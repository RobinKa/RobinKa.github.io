{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultFormula","defaultDiffBy","searchObject","qs","window","location","search","f","decodeURIComponent","d","defaultExpression","tad","FormulaInput","props","useState","valid","setValid","setExpression","buildExpression","useCallback","formula","expression","onChange","e","target","value","type","defaultValue","style","color","width","Boolean","hostname","match","ReactDOM","render","variablesString","setVariablesString","derivativeExpression","useMemo","foundVariables","variablesStringSplit","split","map","s","trim","filter","length","wantedVariables","wantedVariable","errorVar","forEach","index","undefined","derivative","splice","toString","textAlign","padding","fontFamily","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAQIA,EAAiB,aACjBC,EAAgB,OAEdC,EAAeC,QAASC,OAAOC,SAASC,QAE1CJ,EAAaK,GAA+B,kBAAnBL,EAAaK,IACtCP,EAAiBQ,mBAAmBN,EAAaK,IAGjDL,EAAaO,GAA+B,kBAAnBP,EAAaO,IACtCR,EAAgBO,mBAAmBN,EAAaO,IAGpD,IAAMC,EAAoBC,kBAAoBX,GAE9C,SAASY,EAAaC,GAA2B,IAAD,EAClBC,oBAAS,GADS,mBACrCC,EADqC,KAC9BC,EAD8B,KAEtCC,EAAgBJ,EAAMI,cAEtBC,EAAkBC,uBAAY,SAACC,GACjC,IACI,IAAMC,EAAaV,kBAAoBS,GACvCJ,GAAS,GACTC,EAAcI,GAChB,SACEL,GAAS,GACTC,EAAc,SAEnB,CAACA,EAAeD,IAEbM,EAAWH,uBAAY,SAACI,GAC1BL,EAAgBK,EAAEC,OAAOC,SAC1B,CAACP,IAEJ,OACI,2BAAOQ,KAAK,OAAOC,aAAc3B,EAAgBsB,SAAUA,EAAUM,MAAO,CAAEC,MAAOd,EAAQ,QAAU,MAAOe,MAAO,OC/BzGC,QACW,cAA7B3B,OAAOC,SAAS2B,UAEe,UAA7B5B,OAAOC,SAAS2B,UAEhB5B,OAAOC,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFyCD,WAAgB,IAAD,EACUrB,mBAAgCJ,GAD1C,mBACnBW,EADmB,KACPJ,EADO,OAGoBH,mBAASb,GAH7B,mBAGnBmC,EAHmB,KAGFC,EAHE,KAKpBC,EAAuBC,mBAAQ,WACjC,GAAIlB,EAAY,CACZ,IAAMmB,EAAiB7B,kBAAoBU,GAErCoB,EAAuBL,EACxBM,MAAM,KACNC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UACXC,QAAO,SAAAF,GAAC,MAAU,KAANA,KAEjB,GAAoC,IAAhCH,EAAqBM,OACrB,MAAO,0DAGX,IAAMC,EAAkBP,EAAqBE,KAAI,SAAAM,GAAc,OAAIT,EAAeS,MAG9EC,EAA0B,KAQ9B,GAPAF,EAAgBG,SAAQ,SAACF,EAAgBG,QACdC,IAAnBJ,IACAC,EAAWT,EAAqBW,OAKpCF,EACA,MAAM,oBAAN,OAA2BA,EAA3B,KAKJ,IADA,IAAII,EAAajC,EACV2B,EAAgBD,OAAS,GAC5BO,EAAa3C,6BAA+BqC,EAAgB,GAAIrC,oBAAsB2C,EAAY,IAAI3C,WAAa,KACnHqC,EAAgBO,OAAO,EAAG,GAG9B,OAAO5C,mBAAqB2C,GAAYE,WAG5C,MAAO,uBACR,CAACpB,EAAiBf,IAErB,OACI,yBAAKO,MAAO,CAAE6B,UAAW,SAAUC,QAAS,OAAQC,WAAY,oBAC5D,yDADJ,cAEe,uBAAGC,KAAK,qCAAR,UAEX,uCACA,kBAAChD,EAAD,CAAcK,cAAeA,IAE7B,+DACA,2BAAOS,KAAK,OAAOC,aAAc1B,EAAeqB,SAAU,SAAAC,GAAC,OAAIc,EAAmBd,EAAEC,OAAOC,QAAQG,MAAO,CAAEE,MAAO,OAEnH,0CACA,+BAAQQ,MEnGJ,MAASuB,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e22ad707.chunk.js","sourcesContent":["import React, { useState, useCallback, useMemo } from \"react\"\nimport * as tad from \"tadiff\"\nimport * as qs from \"query-string\"\n\ntype FormulaInputProps = {\n    setExpression: (expression: tad.Expression | null) => void\n}\n\nlet defaultFormula = \"cos(4 * x)\"\nlet defaultDiffBy = \"x, x\"\n\nconst searchObject = qs.parse(window.location.search)\n\nif (searchObject.f && typeof searchObject.f === \"string\") {\n    defaultFormula = decodeURIComponent(searchObject.f)\n}\n\nif (searchObject.d && typeof searchObject.d === \"string\") {\n    defaultDiffBy = decodeURIComponent(searchObject.d)\n}\n\nconst defaultExpression = tad.parseExpression(defaultFormula)\n\nfunction FormulaInput(props: FormulaInputProps) {\n    const [valid, setValid] = useState(true)\n    const setExpression = props.setExpression\n\n    const buildExpression = useCallback((formula: string) => {\n        try {\n            const expression = tad.parseExpression(formula)\n            setValid(true)\n            setExpression(expression)\n        } catch {\n            setValid(false)\n            setExpression(null)\n        }\n    }, [setExpression, setValid])\n\n    const onChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        buildExpression(e.target.value)\n    }, [buildExpression])\n\n    return (\n        <input type=\"text\" defaultValue={defaultFormula} onChange={onChange} style={{ color: valid ? \"black\" : \"red\", width: 500 }} />\n    )\n}\n\nexport default function App() {\n    const [expression, setExpression] = useState<tad.Expression | null>(defaultExpression)\n\n    const [variablesString, setVariablesString] = useState(defaultDiffBy)\n\n    const derivativeExpression = useMemo(() => {\n        if (expression) {\n            const foundVariables = tad.getAllVariables(expression)\n\n            const variablesStringSplit = variablesString\n                .split(\",\")\n                .map(s => s.trim())\n                .filter(s => s !== \"\")\n\n            if (variablesStringSplit.length === 0) {\n                return \"Enter variables seperated by comma to differentiate by.\"\n            }\n\n            const wantedVariables = variablesStringSplit.map(wantedVariable => foundVariables[wantedVariable])\n\n            // Check if we have any variables not contained in the expression\n            let errorVar: string | null = null\n            wantedVariables.forEach((wantedVariable, index) => {\n                if (wantedVariable === undefined) {\n                    errorVar = variablesStringSplit[index]\n                    return\n                }\n            })\n\n            if (errorVar) {\n                return `Unknown variable ${errorVar}.`\n            }\n\n            // Differentiate\n            let derivative = expression\n            while (wantedVariables.length > 0) {\n                derivative = tad.getDerivativeForExpression(wantedVariables[0], tad.getAllDerivatives(derivative, new tad.Constant(1)))\n                wantedVariables.splice(0, 1)\n            }\n\n            return tad.expressionToNode(derivative).toString()\n        }\n\n        return \"Invalid expression\"\n    }, [variablesString, expression])\n\n    return (\n        <div style={{ textAlign: \"center\", padding: \"10px\", fontFamily: \"Segoe UI, Arial\" }}>\n            <h1>Automatic differentiation</h1>\n            Powered by <a href=\"https://github.com/RobinKa/tadiff\">tadiff</a>\n\n            <h2>Formula</h2>\n            <FormulaInput setExpression={setExpression} />\n\n            <h2>Take derivative with respect to</h2>\n            <input type=\"text\" defaultValue={defaultDiffBy} onChange={e => setVariablesString(e.target.value)} style={{ width: 500 }} />\n\n            <h2>Derivative</h2>\n            <label>{derivativeExpression}</label>\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}