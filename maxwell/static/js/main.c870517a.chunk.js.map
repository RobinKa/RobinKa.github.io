{"version":3,"sources":["simulator.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["memoKernelFunc","makeFunc","funcs","name","FDTDSimulator","gpu","gridSize","cellSize","data","updateMagneticX","updateMagneticY","updateMagneticZ","updateElectricX","updateElectricY","updateElectricZ","injectSource","decaySource","makeFieldTexture","copyTexture","drawOnTexture","stepElectric","dt","elX","electricFieldX","values","elY","electricFieldY","elZ","electricFieldZ","magX","magneticFieldX","magY","magneticFieldY","magZ","magneticFieldZ","perm","permittivity","injectedElZ","electricSourceFieldZ","time","stepMagnetic","permeability","resetFields","resetMaterials","drawPermeability","pos","size","value","drawPermittivity","injectSignal","getData","cellCount","getAt","field","shapeX","shapeY","shapeZ","x","y","z","getX","index","getY","Math","floor","getZ","this","createKernel","setOutput","setPipeline","texture","thread","shape","keep","gx","constants","gridSizeX","gy","gridSizeY","gz","gridSizeZ","oldValue","max","abs","output","setFunctions","setWarnVarUsage","source","pow","fieldY","fieldZ","magFieldX","cs","fieldX","magFieldY","magFieldZ","elFieldX","elFieldY","elFieldZ","canvasSize","window","innerWidth","innerHeight","canvasAspect","ceil","simulator","clamp","min","LabeledSlider","props","label","type","step","onChange","e","setValue","parseFloat","target","style","height","width","textAlign","lineHeight","marginBottom","OptionSelector","options","map","option","optionIndex","key","boxSizing","border","selectedOption","margin","length","background","color","onClick","setSelectedOption","ControlWidget","useState","collapsed","setCollapsed","userSelect","position","opacity","fontWeight","cursor","padding","brushSize","setBrushSize","brushValue","setBrushValue","signalFrequency","setSignalFrequency","clickOption","setClickOption","Boolean","location","hostname","match","ReactDOM","render","drawingPermeability","setDrawingPermeability","drawingPermittivity","setDrawingPermittivity","mousePosition","setMousePosition","signalStrength","useRef","mouseDownPos","renderSim","drawCanvasRef","simStep","useCallback","simData","current","centerX","centerY","brushHalfSize","round","cos","PI","useEffect","timer","setInterval","clearInterval","startLoop","stop","a","resolveDrawPromise","resolve","requestAnimationFrame","Promise","loop","Error","GPU","mode","canvas","g","xa","ya","eAA","magXAA","magYAA","magZAA","mAA","permittivityValue","log","permeabilityValue","backgroundX","backgroundY","graphical","makeRenderSimulatorCanvas","changePermittivity","canvasPos","changePermeability","onInputDown","clientX","clientY","onInputMove","onInputUp","previousClickOption","setPreviousClickOption","signalBrushSize","setSignalBrushSize","signalBrushValue","setSignalBrushValue","materialBrushSize","setMaterialBrushSize","materialBrushValue","setMaterialBrushValue","ref","onMouseDown","onMouseMove","onMouseUp","onTouchStart","touches","onTouchMove","onTouchEnd","onContextMenu","preventDefault","bottom","right","href","rel","textDecoration","pointerEvents","left","top","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c870517a.chunk.js","sourcesContent":["import { GPU, IKernelRunShortcut, Texture } from \"gpu.js\"\r\n\r\nexport type FlatScalarField3D = {\r\n    values: Texture\r\n    shape: [number, number, number]\r\n}\r\n\r\nexport function indexToCoords(index: number, shape: [number, number, number]): [number, number, number] {\r\n    return [index % shape[0], Math.floor(index / shape[0]) % shape[1], Math.floor(index / (shape[0] * shape[1])) % shape[2]]\r\n}\r\n\r\nexport type SimulationData = {\r\n    time: number\r\n    electricFieldX: FlatScalarField3D\r\n    electricFieldY: FlatScalarField3D\r\n    electricFieldZ: FlatScalarField3D\r\n    magneticFieldX: FlatScalarField3D\r\n    magneticFieldY: FlatScalarField3D\r\n    magneticFieldZ: FlatScalarField3D\r\n\r\n    permittivity: FlatScalarField3D\r\n    permeability: FlatScalarField3D\r\n\r\n    electricSourceFieldZ: FlatScalarField3D\r\n}\r\n\r\nexport interface Simulator {\r\n    stepElectric: (dt: number) => void\r\n    stepMagnetic: (dt: number) => void\r\n    resetFields: () => void\r\n    resetMaterials: () => void\r\n    getData: () => SimulationData\r\n}\r\n\r\nfunction memoKernelFunc(makeFunc: () => IKernelRunShortcut) {\r\n    const funcs: { [name: string]: IKernelRunShortcut } = {}\r\n\r\n    return (name: string) => {\r\n        if (!funcs[name]) {\r\n            funcs[name] = makeFunc()\r\n        }\r\n        return funcs[name]\r\n    }\r\n}\r\n\r\nexport class FDTDSimulator implements Simulator {\r\n    private data: SimulationData\r\n\r\n    private updateMagneticX: IKernelRunShortcut\r\n    private updateMagneticY: IKernelRunShortcut\r\n    private updateMagneticZ: IKernelRunShortcut\r\n    private updateElectricX: IKernelRunShortcut\r\n    private updateElectricY: IKernelRunShortcut\r\n    private updateElectricZ: IKernelRunShortcut\r\n\r\n    private injectSource: IKernelRunShortcut\r\n    private decaySource: IKernelRunShortcut\r\n\r\n    private makeFieldTexture: (name: string) => IKernelRunShortcut\r\n    private copyTexture: (name: string) => IKernelRunShortcut\r\n\r\n    private drawOnTexture: (name: string) => IKernelRunShortcut\r\n\r\n    constructor(readonly gpu: GPU, readonly gridSize: [number, number, number], readonly cellSize: number) {\r\n        const cellCount = gridSize[0] * gridSize[1] * gridSize[2]\r\n\r\n        this.makeFieldTexture = memoKernelFunc(() => this.gpu.createKernel(function (value: number) {\r\n            return value\r\n        }).setOutput([cellCount]).setPipeline(true))\r\n\r\n        this.copyTexture = memoKernelFunc(() => this.gpu.createKernel(function (texture: number[]) {\r\n            return texture[this.thread.x]\r\n        }).setOutput([cellCount]).setPipeline(true))\r\n\r\n        this.data = {\r\n            time: 0,\r\n            electricFieldX: { values: this.makeFieldTexture(\"ex\")(0) as Texture, shape: gridSize },\r\n            electricFieldY: { values: this.makeFieldTexture(\"ey\")(0) as Texture, shape: gridSize },\r\n            electricFieldZ: { values: this.makeFieldTexture(\"ez\")(0) as Texture, shape: gridSize },\r\n            magneticFieldX: { values: this.makeFieldTexture(\"mx\")(0) as Texture, shape: gridSize },\r\n            magneticFieldY: { values: this.makeFieldTexture(\"my\")(0) as Texture, shape: gridSize },\r\n            magneticFieldZ: { values: this.makeFieldTexture(\"mz\")(0) as Texture, shape: gridSize },\r\n            electricSourceFieldZ: { values: this.makeFieldTexture(\"esz\")(0) as Texture, shape: gridSize },\r\n            permittivity: { values: this.makeFieldTexture(\"permittivity\")(1) as Texture, shape: gridSize },\r\n            permeability: { values: this.makeFieldTexture(\"permeability\")(1) as Texture, shape: gridSize },\r\n        }\r\n\r\n        function getAt(field: number[], shapeX: number, shapeY: number, shapeZ: number, x: number, y: number, z: number) {\r\n            if (x < 0 || x >= shapeX || y < 0 || y >= shapeY || z < 0 || z >= shapeZ) {\r\n                return 0\r\n            }\r\n\r\n            return field[x + y * shapeX + z * shapeX * shapeY]\r\n        }\r\n\r\n        function getX(index: number, shapeX: number) {\r\n            return index % shapeX\r\n        }\r\n\r\n        function getY(index: number, shapeX: number, shapeY: number) {\r\n            return Math.floor(index / shapeX) % shapeY\r\n        }\r\n\r\n        function getZ(index: number, shapeX: number, shapeY: number, shapeZ: number) {\r\n            return Math.floor(index / (shapeX * shapeY)) % shapeZ\r\n        }\r\n\r\n        this.drawOnTexture = memoKernelFunc(() => this.gpu.createKernel(function (pos: number[], size: number, value: number, keep: number, texture: number[]) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            const oldValue = getAt(texture, gx, gy, gz, x, y, z)\r\n\r\n            const within = Math.max(Math.abs(pos[0] - x), Math.max(Math.abs(pos[1] - y), Math.abs(pos[2] - z))) < size\r\n\r\n            return within ? value + keep * oldValue : oldValue\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] },\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false).setPipeline(true))\r\n\r\n        this.injectSource = this.gpu.createKernel(function (source: number[], field: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            return getAt(field, gx, gy, gz, x, y, z) + getAt(source, gx, gy, gz, x, y, z) * dt\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] },\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false).setPipeline(true)\r\n\r\n        this.decaySource = this.gpu.createKernel(function (source: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            return getAt(source, gx, gy, gz, x, y, z) * Math.pow(0.1, dt)\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] },\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false).setPipeline(true)\r\n\r\n        this.updateMagneticX = this.gpu.createKernel(function (fieldY: number[], fieldZ: number[], permeability: number[], magFieldX: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(magFieldX, gx, gy, gz, x, y, z) - (dt / (getAt(permeability, gx, gy, gz, x, y, z) * cs)) * (\r\n                (getAt(fieldZ, gx, gy, gz, x, y + 1, z) - getAt(fieldZ, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] },\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false).setPipeline(true)\r\n\r\n        this.updateMagneticY = this.gpu.createKernel(function (fieldX: number[], fieldZ: number[], permeability: number[], magFieldY: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(magFieldY, gx, gy, gz, x, y, z) - (dt / (getAt(permeability, gx, gy, gz, x, y, z) * cs)) * (\r\n                -(getAt(fieldZ, gx, gy, gz, x + 1, y, z) - getAt(fieldZ, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false).setPipeline(true)\r\n\r\n        this.updateMagneticZ = this.gpu.createKernel(function (fieldX: number[], fieldY: number[], permeability: number[], magFieldZ: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(magFieldZ, gx, gy, gz, x, y, z) - (dt / (getAt(permeability, gx, gy, gz, x, y, z) * cs)) * (\r\n                (getAt(fieldY, gx, gy, gz, x + 1, y, z) - getAt(fieldY, gx, gy, gz, x, y, z)) -\r\n                (getAt(fieldX, gx, gy, gz, x, y + 1, z) - getAt(fieldX, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false).setPipeline(true)\r\n\r\n        this.updateElectricX = this.gpu.createKernel(function (fieldY: number[], fieldZ: number[], permittivity: number[], elFieldX: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(elFieldX, gx, gy, gz, x, y, z) + (dt / (getAt(permittivity, gx, gy, gz, x, y, z) * cs)) * (\r\n                (getAt(fieldZ, gx, gy, gz, x, y, z) - getAt(fieldZ, gx, gy, gz, x, y - 1, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false).setPipeline(true)\r\n\r\n        this.updateElectricY = this.gpu.createKernel(function (fieldX: number[], fieldZ: number[], permittivity: number[], elFieldY: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(elFieldY, gx, gy, gz, x, y, z) + (dt / (getAt(permittivity, gx, gy, gz, x, y, z) * cs)) * (\r\n                -(getAt(fieldZ, gx, gy, gz, x, y, z) - getAt(fieldZ, gx, gy, gz, x - 1, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false).setPipeline(true)\r\n\r\n        this.updateElectricZ = this.gpu.createKernel(function (fieldX: number[], fieldY: number[], permittivity: number[], elFieldZ: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(elFieldZ, gx, gy, gz, x, y, z) + (dt / (getAt(permittivity, gx, gy, gz, x, y, z) * cs)) * (\r\n                (getAt(fieldY, gx, gy, gz, x, y, z) - getAt(fieldY, gx, gy, gz, x - 1, y, z)) -\r\n                (getAt(fieldX, gx, gy, gz, x, y, z) - getAt(fieldX, gx, gy, gz, x, y - 1, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false).setPipeline(true)\r\n    }\r\n\r\n    stepElectric = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n        const perm = this.data.permittivity.values\r\n\r\n        const injectedElZ = this.injectSource(this.data.electricSourceFieldZ.values, elZ, dt) as Texture\r\n        this.data.electricSourceFieldZ.values = this.decaySource(this.copyTexture(\"esz\")(this.data.electricSourceFieldZ.values), dt) as Texture\r\n\r\n        // d/dt E(x, t) = (curl B(x, t))/(µε)\r\n        this.data.electricFieldX.values = this.updateElectricX(magY, magZ, perm, this.copyTexture(\"ex\")(elX), dt) as Texture\r\n        this.data.electricFieldY.values = this.updateElectricY(magX, magZ, perm, this.copyTexture(\"ey\")(elY), dt) as Texture\r\n        this.data.electricFieldZ.values = this.updateElectricZ(magX, magY, perm, injectedElZ, dt) as Texture\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    stepMagnetic = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n        const perm = this.data.permeability.values\r\n\r\n        // d/dt B(x, t) = -curl E(x, t)\r\n        this.data.magneticFieldX.values = this.updateMagneticX(elY, elZ, perm, this.copyTexture(\"mx\")(magX), dt) as Texture\r\n        this.data.magneticFieldY.values = this.updateMagneticY(elX, elZ, perm, this.copyTexture(\"my\")(magY), dt) as Texture\r\n        this.data.magneticFieldZ.values = this.updateMagneticZ(elX, elY, perm, this.copyTexture(\"mz\")(magZ), dt) as Texture\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    resetFields = () => {\r\n        this.data.time = 0\r\n        this.data.electricFieldX.values = this.makeFieldTexture(\"ex\")(0) as Texture\r\n        this.data.electricFieldY.values = this.makeFieldTexture(\"ey\")(0) as Texture\r\n        this.data.electricFieldZ.values = this.makeFieldTexture(\"ez\")(0) as Texture\r\n        this.data.magneticFieldX.values = this.makeFieldTexture(\"mx\")(0) as Texture\r\n        this.data.magneticFieldY.values = this.makeFieldTexture(\"my\")(0) as Texture\r\n        this.data.magneticFieldZ.values = this.makeFieldTexture(\"mz\")(0) as Texture\r\n        this.data.electricSourceFieldZ.values = this.makeFieldTexture(\"esz\")(0) as Texture\r\n    }\r\n\r\n    resetMaterials = () => {\r\n        this.data.permeability.values = this.makeFieldTexture(\"permeability\")(1) as Texture\r\n        this.data.permittivity.values = this.makeFieldTexture(\"permittivity\")(1) as Texture\r\n    }\r\n\r\n    drawPermeability = (pos: [number, number, number], size: number, value: number) => {\r\n        this.data.permeability.values = this.drawOnTexture(\"permeability\")(pos, size, value, 0, this.copyTexture(\"permability\")(this.data.permeability.values)) as Texture\r\n    }\r\n\r\n    drawPermittivity = (pos: [number, number, number], size: number, value: number) => {\r\n        this.data.permittivity.values = this.drawOnTexture(\"permittivity\")(pos, size, value, 0, this.copyTexture(\"permittivity\")(this.data.permittivity.values)) as Texture\r\n    }\r\n\r\n    injectSignal = (pos: [number, number, number], size: number, value: number, dt: number) => {\r\n        this.data.electricSourceFieldZ.values = this.drawOnTexture(\"esz\")(pos, size, value * dt, 1, this.copyTexture(\"esz\")(this.data.electricSourceFieldZ.values)) as Texture\r\n    }\r\n\r\n    getData = () => this.data\r\n}","import React, { useRef, useCallback, useEffect, useState } from 'react'\nimport { GPU, IKernelRunShortcut } from \"gpu.js\"\nimport { FDTDSimulator } from \"./simulator\"\n\nconst canvasSize = [window.innerWidth, window.innerHeight]\nconst canvasAspect = canvasSize[0] / canvasSize[1]\n\nconst dt = 0.02\nconst gridSizeLongest = 600\nconst gridSize: [number, number, number] = canvasSize[0] >= canvasSize[1] ?\n    [gridSizeLongest, Math.ceil(gridSizeLongest / canvasAspect), 1] :\n    [Math.ceil(gridSizeLongest * canvasAspect), gridSizeLongest, 1]\nconst cellSize = 0.04\n\nlet simulator: FDTDSimulator | null = null\n\nconst makeRenderSimulatorCanvas = (g: GPU) => {\n    function getAt(field: number[], shapeX: number, shapeY: number, shapeZ: number, x: number, y: number, z: number) {\n        if (x < 0 || x >= shapeX || y < 0 || y >= shapeY || z < 0 || z >= shapeZ) {\n            return 0\n        }\n\n        return field[x + y * shapeX + z * shapeX * shapeY]\n    }\n\n    return g.createKernel(function (electricFieldX: number[], electricFieldY: number[], electricFieldZ: number[],\n        magneticFieldX: number[], magneticFieldY: number[], magneticFieldZ: number[],\n        permittivity: number[], permeability: number[]) {\n        const gx = this.constants.gridSizeX as number\n        const gy = this.constants.gridSizeY as number\n        const gz = this.constants.gridSizeZ as number\n\n        const x = gx * this.thread.x! / (this.output.x as number)\n        const y = gy * (1 - this.thread.y! / (this.output.y as number))\n        const xa = Math.floor(x)\n        const ya = Math.floor(y)\n\n        const z = Math.floor(gz / 2)\n\n        const eAA =\n            getAt(electricFieldX, gx, gy, gz, xa, ya, z) * getAt(electricFieldX, gx, gy, gz, xa, ya, z) +\n            getAt(electricFieldY, gx, gy, gz, xa, ya, z) * getAt(electricFieldY, gx, gy, gz, xa, ya, z) +\n            getAt(electricFieldZ, gx, gy, gz, xa, ya, z) * getAt(electricFieldZ, gx, gy, gz, xa, ya, z)\n\n        // Magnetic field is offset from electric field, so get value at +0.5 by interpolating 0 and 1\n        const magXAA = (getAt(magneticFieldX, gx, gy, gz, xa, ya, z) + getAt(magneticFieldX, gx, gy, gz, xa - 1, ya - 1, z)) / 2\n        const magYAA = (getAt(magneticFieldY, gx, gy, gz, xa, ya, z) + getAt(magneticFieldY, gx, gy, gz, xa - 1, ya - 1, z)) / 2\n        const magZAA = (getAt(magneticFieldZ, gx, gy, gz, xa, ya, z) + getAt(magneticFieldZ, gx, gy, gz, xa - 1, ya - 1, z)) / 2\n\n        const mAA = magXAA * magXAA + magYAA * magYAA + magZAA * magZAA\n\n        const scale = 15\n\n        const permittivityValue = Math.max(0, Math.min(1, (1 + 0.4342944819 * Math.log(getAt(permittivity, gx, gy, gz, xa, ya, z))) / 4))\n        const permeabilityValue = Math.max(0, Math.min(1, (1 + 0.4342944819 * Math.log(getAt(permeability, gx, gy, gz, xa, ya, z))) / 4))\n\n        const backgroundX = (Math.abs(x % 1 - 0.5) < 0.25 ? 1 : 0) * (Math.abs(y % 1 - 0.5) < 0.25 ? 1 : 0)\n        const backgroundY = 1 - backgroundX\n\n        this.color(eAA / scale + 0.5 * backgroundX * permittivityValue, eAA / scale + mAA / scale, mAA / scale + 0.5 * backgroundY * permeabilityValue)\n    }, {\n        output: [canvasSize[0], canvasSize[1]],\n        constants: { gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] },\n        graphical: true\n    }).setFunctions([getAt]).setWarnVarUsage(false)\n}\n\nfunction clamp(min: number, max: number, value: number) {\n    return Math.max(min, Math.min(max, value))\n}\n\ntype LabeledSliderProps = {\n    label: string\n    value: number,\n    setValue: (value: number) => void\n    min: number\n    max: number\n    step: number\n}\n\nfunction LabeledSlider(props: LabeledSliderProps) {\n    return (\n        <div>\n            <label>{props.label}</label>\n            <div>\n                <input type=\"range\" min={props.min} max={props.max} value={props.value} step={props.step}\n                    onChange={e => props.setValue(parseFloat(e.target.value))} style={{ height: 10, width: \"100%\" }} />\n                <div style={{ textAlign: \"center\", lineHeight: 0.1, marginBottom: \"7px\" }}>\n                    {props.value}\n                </div>\n            </div>\n        </div>\n    )\n}\n\ntype OptionSelectorProps = {\n    options: string[]\n    selectedOption: number\n    setSelectedOption: (selectedOption: number) => void\n}\n\nfunction OptionSelector(props: OptionSelectorProps) {\n    return (\n        <div>\n            {props.options.map((option, optionIndex) =>\n                <button key={option} style={{\n                    boxSizing: \"border-box\",\n                    border: optionIndex === props.selectedOption ? \"4px solid rgb(0, 150, 255)\" : \"0\",\n                    height: \"30px\",\n                    margin: \"5px\",\n                    width: `${100 / props.options.length}%`, background: \"rgb(100, 100, 100)\", color: \"white\"\n                }}\n                    onClick={e => props.setSelectedOption(optionIndex)}>\n                    {option}\n                </button>\n            )}\n        </div>\n    )\n}\n\ntype ControlWidgerProps = {\n    brushSize: number,\n    setBrushSize: (brushSize: number) => void\n\n    brushValue: number,\n    setBrushValue: (brushValue: number) => void\n\n    signalFrequency: number,\n    setSignalFrequency: (signalFrequency: number) => void\n\n    clickOption: number\n    setClickOption: (clickOption: number) => void\n\n    resetFields: () => void\n    resetMaterials: () => void\n}\n\nfunction ControlWidget(props: ControlWidgerProps) {\n    const [collapsed, setCollapsed] = useState(false)\n\n    return (\n        <div style={{ userSelect: \"none\" }}>\n            <div style={{ textAlign: \"center\", position: \"absolute\", opacity: 0.8, background: \"rgba(33, 33, 33, 100)\", fontWeight: \"lighter\", color: \"white\" }}>\n                <button onClick={e => setCollapsed(!collapsed)} style={{ width: \"100%\", height: \"30px\", background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", fontWeight: \"bold\", cursor: \"pointer\" }}>\n                    Controls [{collapsed ? \"+\" : \"-\"}]\n                </button>\n                {!collapsed && (\n                    <div style={{ padding: \"10px\" }}>\n                        <LabeledSlider label=\"Brush size\" value={props.brushSize} setValue={props.setBrushSize} min={1} max={100} step={1} />\n                        <LabeledSlider label=\"Brush value\" value={props.brushValue} setValue={props.setBrushValue} min={1} max={100} step={1} />\n                        <LabeledSlider label=\"Signal frequency\" value={props.signalFrequency} setValue={props.setSignalFrequency} min={0} max={5} step={0.5} />\n                        <OptionSelector options={[\"ε brush\", \"µ brush\", \"Signal\"]} selectedOption={props.clickOption} setSelectedOption={props.setClickOption} />\n                        <button onClick={props.resetFields} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Reset fields</button>\n                        <button onClick={props.resetMaterials} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Reset materials</button>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nconst defaultSignalBrushValue = 10\nconst defaultSignalBrushSize = 1\nconst defaultMaterialBrushValue = 5\nconst defaultMaterialBrushSize = 5\n\nexport default function () {\n    const [brushSize, setBrushSize] = useState(defaultSignalBrushSize)\n    const [brushValue, setBrushValue] = useState(defaultSignalBrushValue)\n    const [signalFrequency, setSignalFrequency] = useState(1)\n    const [drawingPermeability, setDrawingPermeability] = useState(false)\n    const [drawingPermittivity, setDrawingPermittivity] = useState(false)\n    const [clickOption, setClickOption] = useState(2) // eps, mu, signal\n    const optionPermittivityBrush = 0\n    const optionPermeabilityBrush = 1\n    const optionSignal = 2\n\n    const [mousePosition, setMousePosition] = useState<[number, number] | null>(null)\n\n    const signalStrength = useRef(0)\n    const mouseDownPos = useRef<[number, number] | null>(null)\n    const renderSim = useRef<IKernelRunShortcut | null>(null)\n    const drawCanvasRef = useRef<HTMLCanvasElement>(null)\n\n    const simStep = useCallback(() => {\n        if (simulator) {\n            const simData = simulator.getData()\n\n            if (mouseDownPos.current !== null && drawCanvasRef.current) {\n                const centerX = clamp(0, simData.electricSourceFieldZ.shape[0] - 1, Math.floor(simData.electricSourceFieldZ.shape[0] * mouseDownPos.current[0] / drawCanvasRef.current.width))\n                const centerY = clamp(0, simData.electricSourceFieldZ.shape[1] - 1, Math.floor(simData.electricSourceFieldZ.shape[1] * mouseDownPos.current[1] / drawCanvasRef.current.height))\n                const brushHalfSize = Math.round(brushSize / 2)\n\n                simulator.injectSignal([centerX, centerY, 0], brushHalfSize, -brushValue * 1000 * Math.cos(2 * Math.PI * signalFrequency * simData.time), dt)\n            }\n\n            simulator.stepMagnetic(dt)\n            simulator.stepElectric(dt)\n        }\n    }, [signalFrequency, brushValue, brushSize])\n\n    useEffect(() => {\n        const timer = setInterval(simStep, 1000 * dt)\n        return () => clearInterval(timer)\n    }, [simStep])\n\n    const startLoop = useCallback(() => {\n        let stop = false\n\n        const loop = (async () => {\n            const resolveDrawPromise = (resolve: (value?: unknown) => void) => requestAnimationFrame(resolve)\n\n            while (!stop) {\n                if (simulator) {\n                    const simData = simulator.getData()\n\n                    if (simData.time > 0 && renderSim.current !== null) {\n                        renderSim.current(simData.electricFieldX.values, simData.electricFieldY.values, simData.electricFieldZ.values,\n                            simData.magneticFieldX.values, simData.magneticFieldY.values, simData.magneticFieldZ.values,\n                            simData.permittivity.values, simData.permeability.values)\n                    }\n                }\n\n                await new Promise(resolveDrawPromise)\n            }\n        })\n\n        loop()\n\n        return () => { stop = true }\n    }, [])\n\n    useEffect(() => {\n        if (drawCanvasRef.current) {\n            const gpu = new GPU({ mode: \"webgl\", canvas: drawCanvasRef.current })\n            renderSim.current = makeRenderSimulatorCanvas(gpu)\n            simulator = new FDTDSimulator(gpu, gridSize, cellSize)\n        } else {\n            throw new Error(\"Canvas ref was null\")\n        }\n\n        startLoop()\n    }, [startLoop])\n\n    const changePermittivity = useCallback((canvasPos: [number, number]) => {\n        if (simulator) {\n            const centerX = Math.round(gridSize[0] * (canvasPos[0] / canvasSize[0]))\n            const centerY = Math.round(gridSize[1] * (canvasPos[1] / canvasSize[1]))\n            const brushHalfSize = Math.round(brushSize / 2)\n\n            simulator.drawPermittivity([centerX, centerY, 0], brushHalfSize, brushValue)\n        }\n    }, [brushSize, brushValue])\n\n    const changePermeability = useCallback((canvasPos: [number, number]) => {\n        if (simulator) {\n            const centerX = Math.round(gridSize[0] * (canvasPos[0] / canvasSize[0]))\n            const centerY = Math.round(gridSize[1] * (canvasPos[1] / canvasSize[1]))\n            const brushHalfSize = Math.round(brushSize / 2)\n\n            simulator.drawPermeability([centerX, centerY, 0], brushHalfSize, brushValue)\n        }\n    }, [brushSize, brushValue])\n\n    const resetMaterials = useCallback(() => {\n        if (simulator) {\n            simulator.resetMaterials()\n        }\n    }, [])\n\n    const resetFields = useCallback(() => {\n        if (simulator) {\n            simulator.resetFields()\n            signalStrength.current = 0\n        }\n    }, [])\n\n    const onInputDown = useCallback(([clientX, clientY]: [number, number]) => {\n        if (simulator) {\n            if (clickOption === optionSignal) {\n                mouseDownPos.current = [clientX, clientY]\n            } else if (clickOption === optionPermittivityBrush) {\n                changePermittivity([clientX, clientY])\n                setDrawingPermittivity(true)\n            } else if (clickOption === optionPermeabilityBrush) {\n                changePermeability([clientX, clientY])\n                setDrawingPermeability(true)\n            }\n        }\n    }, [changePermittivity, changePermeability, clickOption])\n\n    const onInputMove = useCallback(([clientX, clientY]: [number, number]) => {\n        if (simulator) {\n            if (clickOption === optionSignal && mouseDownPos.current !== null) {\n                mouseDownPos.current = [clientX, clientY]\n            }\n\n            if (drawingPermittivity) {\n                changePermittivity([clientX, clientY])\n            }\n\n            if (drawingPermeability) {\n                changePermeability([clientX, clientY])\n            }\n        }\n    }, [changePermittivity, changePermeability, clickOption, drawingPermeability, drawingPermittivity])\n\n    const onInputUp = useCallback(() => {\n        if (clickOption === optionSignal) {\n            mouseDownPos.current = null\n        } else if (clickOption === optionPermeabilityBrush) {\n            setDrawingPermeability(false)\n        } else if (clickOption === optionPermittivityBrush) {\n            setDrawingPermittivity(false)\n        }\n    }, [clickOption])\n\n    // Remember old brush values for signal and material\n    const [previousClickOption, setPreviousClickOption] = useState(optionSignal)\n    const [signalBrushSize, setSignalBrushSize] = useState(defaultSignalBrushSize)\n    const [signalBrushValue, setSignalBrushValue] = useState(defaultSignalBrushValue)\n    const [materialBrushSize, setMaterialBrushSize] = useState(defaultMaterialBrushSize)\n    const [materialBrushValue, setMaterialBrushValue] = useState(defaultMaterialBrushValue)\n    useEffect(() => {\n        if (clickOption === optionSignal && previousClickOption !== optionSignal) {\n            setMaterialBrushSize(brushSize)\n            setMaterialBrushValue(brushValue)\n            setBrushSize(signalBrushSize)\n            setBrushValue(signalBrushValue)\n        } else if (clickOption !== optionSignal && previousClickOption === optionSignal) {\n            setSignalBrushSize(brushSize)\n            setSignalBrushValue(brushValue)\n            setBrushSize(materialBrushSize)\n            setBrushValue(materialBrushValue)\n        }\n\n        setPreviousClickOption(clickOption)\n    }, [clickOption, previousClickOption, signalBrushSize, signalBrushValue, materialBrushSize, materialBrushValue, brushSize, brushValue])\n\n    return (\n        <div>\n            <canvas width={canvasSize[0]} height={canvasSize[1]} ref={drawCanvasRef} style={{ position: \"absolute\", userSelect: \"none\" }}\n                onMouseDown={e => onInputDown([e.clientX, e.clientY])}\n                onMouseMove={e => { setMousePosition([e.clientX, e.clientY]); onInputMove([e.clientX, e.clientY]) }}\n                onMouseUp={e => onInputUp()}\n                onTouchStart={e => onInputDown([e.touches[0].clientX, e.touches[0].clientY])}\n                onTouchMove={e => onInputMove([e.touches[0].clientX, e.touches[0].clientY])}\n                onTouchEnd={e => onInputUp()}\n                onContextMenu={e => e.preventDefault()}\n            />\n\n            <div style={{ position: \"absolute\", bottom: 10, right: 10, userSelect: \"none\" }}>\n                <a href=\"https://github.com/RobinKa/maxwell-simulation\" rel=\"noopener noreferrer\" target=\"_blank\" style={{ fontWeight: \"lighter\", color: \"rgba(255, 255, 255, 100)\", textDecoration: \"none\" }}>Source code</a>\n            </div>\n\n            {mousePosition &&\n                <div style={{ position: \"absolute\", pointerEvents: \"none\", left: mousePosition[0] - (2 * (brushSize + 1)), top: mousePosition[1] - (2 * (brushSize + 1)), width: 4 * (brushSize + 1), height: 4 * (brushSize + 1), border: \"2px solid yellow\" }} />\n            }\n\n            <ControlWidget brushSize={brushSize} setBrushSize={setBrushSize}\n                brushValue={brushValue} setBrushValue={setBrushValue}\n                signalFrequency={signalFrequency} setSignalFrequency={setSignalFrequency}\n                clickOption={clickOption} setClickOption={setClickOption}\n                resetFields={resetFields} resetMaterials={resetMaterials}\n            />\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}