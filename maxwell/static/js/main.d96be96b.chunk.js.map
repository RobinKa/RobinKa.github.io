{"version":3,"sources":["simulator.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["makeScalarField3D","shape","value","field","i","push","values","setScalarField3DValue","x","y","z","addScalarField3DValue","canvasSize","window","innerWidth","innerHeight","canvasAspect","gridSize","Math","ceil","simulator","cellSize","data","gpu","updateMagneticX","updateMagneticY","updateMagneticZ","updateElectricX","updateElectricY","updateElectricZ","stepElectric","dt","elX","electricFieldX","elY","electricFieldY","elZ","electricFieldZ","magX","magneticFieldX","magY","magneticFieldY","magZ","magneticFieldZ","perm","permittivity","time","stepMagnetic","permeability","resetFields","length","resetMaterials","getData","this","cellCount","getAt","shapeX","shapeY","shapeZ","getX","index","getY","floor","getZ","GPU","createKernel","fieldY","fieldZ","magFieldX","thread","gx","constants","gridSizeX","gy","gridSizeY","gz","gridSizeZ","output","setFunctions","setWarnVarUsage","fieldX","magFieldY","magFieldZ","elFieldX","elFieldY","elFieldZ","makeRenderSimulatorCanvas","g","xa","ya","eAA","magXAA","magYAA","magZAA","mAA","permittivityValue","max","min","log","permeabilityValue","backgroundX","abs","backgroundY","color","graphical","clamp","LabeledSlider","props","label","type","step","onChange","e","setValue","parseFloat","target","style","height","width","textAlign","lineHeight","marginBottom","OptionSelector","options","map","option","optionIndex","key","boxSizing","border","selectedOption","margin","background","onClick","setSelectedOption","ControlWidget","useState","collapsed","setCollapsed","userSelect","position","opacity","fontWeight","cursor","padding","brushSize","setBrushSize","brushValue","setBrushValue","signalFrequency","setSignalFrequency","clickOption","setClickOption","renderSim","signalStrength","signalPosition","mouseDownPos","lastDrawTime","Boolean","location","hostname","match","ReactDOM","render","drawingPermeability","setDrawingPermeability","drawingPermittivity","setDrawingPermittivity","drawCanvasRef","useRef","startLoop","useCallback","stop","a","resolveDrawPromise","resolve","requestAnimationFrame","t","Promise","console","simData","pow","current","px","py","sin","PI","mode","canvas","loop","useEffect","changeMaterial","canvasPos","centerX","round","centerY","brushHalfSize","onInputDown","clientX","clientY","onInputMove","onInputUp","ref","onMouseDown","onMouseMove","onMouseUp","onTouchStart","touches","onTouchMove","onTouchEnd","onContextMenu","preventDefault","bottom","right","href","rel","textDecoration","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d96be96b.chunk.js","sourcesContent":["import { GPU, IKernelRunShortcut } from \"gpu.js\"\r\n\r\nexport type FlatScalarField3D = {\r\n    values: number[]\r\n    shape: [number, number, number]\r\n}\r\n\r\nfunction makeScalarField3D(shape: [number, number, number], value: number = 0) {\r\n    const field = []\r\n    for (let i = 0; i < shape[0] * shape[1] * shape[2]; i++) {\r\n        field.push(value)\r\n    }\r\n    return { values: field, shape: shape }\r\n}\r\n\r\nexport function indexToCoords(index: number, shape: [number, number, number]): [number, number, number] {\r\n    return [index % shape[0], Math.floor(index / shape[0]) % shape[1], Math.floor(index / (shape[0] * shape[1])) % shape[2]]\r\n}\r\n\r\nexport function setScalarField3DValue(field: FlatScalarField3D, x: number, y: number, z: number, value: number) {\r\n    field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]] = value\r\n}\r\n\r\nexport function addScalarField3DValue(field: FlatScalarField3D, x: number, y: number, z: number, value: number) {\r\n    field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]] += value\r\n}\r\n\r\nexport function updateScalarField3DValue(field: FlatScalarField3D, x: number, y: number, z: number, getValue: (current: number) => number) {\r\n    field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]] = getValue(field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]])\r\n}\r\n\r\nexport function getScalarField3DValue(field: FlatScalarField3D, x: number, y: number, z: number) {\r\n    return field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]]\r\n}\r\n\r\nexport type SimulationData = {\r\n    time: number\r\n    electricFieldX: FlatScalarField3D\r\n    electricFieldY: FlatScalarField3D\r\n    electricFieldZ: FlatScalarField3D\r\n    magneticFieldX: FlatScalarField3D\r\n    magneticFieldY: FlatScalarField3D\r\n    magneticFieldZ: FlatScalarField3D\r\n    permittivity: FlatScalarField3D\r\n    permeability: FlatScalarField3D\r\n}\r\n\r\nexport interface Simulator {\r\n    stepElectric: (dt: number) => void\r\n    stepMagnetic: (dt: number) => void\r\n    resetFields: () => void\r\n    resetMaterials: () => void\r\n    getData: () => SimulationData\r\n}\r\n\r\nexport class FDTDSimulator implements Simulator {\r\n    private data: SimulationData\r\n\r\n    private gpu: GPU\r\n    private updateMagneticX: IKernelRunShortcut\r\n    private updateMagneticY: IKernelRunShortcut\r\n    private updateMagneticZ: IKernelRunShortcut\r\n    private updateElectricX: IKernelRunShortcut\r\n    private updateElectricY: IKernelRunShortcut\r\n    private updateElectricZ: IKernelRunShortcut\r\n\r\n    constructor(gridSize: [number, number, number], cellSize: number) {\r\n        this.data = {\r\n            time: 0,\r\n            electricFieldX: makeScalarField3D(gridSize),\r\n            electricFieldY: makeScalarField3D(gridSize),\r\n            electricFieldZ: makeScalarField3D(gridSize),\r\n            magneticFieldX: makeScalarField3D(gridSize),\r\n            magneticFieldY: makeScalarField3D(gridSize),\r\n            magneticFieldZ: makeScalarField3D(gridSize),\r\n            permittivity: makeScalarField3D(gridSize, 1),\r\n            permeability: makeScalarField3D(gridSize, 1),\r\n        }\r\n\r\n        const cellCount = gridSize[0] * gridSize[1] * gridSize[2]\r\n\r\n        this.gpu = new GPU()\r\n\r\n        function getAt(field: number[], shapeX: number, shapeY: number, shapeZ: number, x: number, y: number, z: number) {\r\n            if (x < 0 || x >= shapeX || y < 0 || y >= shapeY || z < 0 || z >= shapeZ) {\r\n                return 0\r\n            }\r\n\r\n            return field[x + y * shapeX + z * shapeX * shapeZ]\r\n        }\r\n\r\n        function getX(index: number, shapeX: number) {\r\n            return index % shapeX\r\n        }\r\n\r\n        function getY(index: number, shapeX: number, shapeY: number) {\r\n            return Math.floor(index / shapeX) % shapeY\r\n        }\r\n\r\n        function getZ(index: number, shapeX: number, shapeY: number, shapeZ: number) {\r\n            return Math.floor(index / (shapeX * shapeY)) % shapeZ\r\n        }\r\n\r\n        this.updateMagneticX = this.gpu.createKernel(function (fieldY: number[], fieldZ: number[], permeability: number[], magFieldX: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(magFieldX, gx, gy, gz, x, y, z) - (dt / (getAt(permeability, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                (getAt(fieldZ, gx, gy, gz, x, y + 1, z) - getAt(fieldZ, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false)\r\n\r\n\r\n        this.updateMagneticY = this.gpu.createKernel(function (fieldX: number[], fieldZ: number[], permeability: number[], magFieldY: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(magFieldY, gx, gy, gz, x, y, z) - (dt / (getAt(permeability, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                -(getAt(fieldZ, gx, gy, gz, x + 1, y, z) - getAt(fieldZ, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false)\r\n\r\n        this.updateMagneticZ = this.gpu.createKernel(function (fieldX: number[], fieldY: number[], permeability: number[], magFieldZ: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(magFieldZ, gx, gy, gz, x, y, z) - (dt / (getAt(permeability, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                (getAt(fieldY, gx, gy, gz, x + 1, y, z) - getAt(fieldY, gx, gy, gz, x, y, z)) -\r\n                (getAt(fieldX, gx, gy, gz, x, y + 1, z) - getAt(fieldX, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false)\r\n\r\n        this.updateElectricX = this.gpu.createKernel(function (fieldY: number[], fieldZ: number[], permittivity: number[], elFieldX: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(elFieldX, gx, gy, gz, x, y, z) + (dt / (getAt(permittivity, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                (getAt(fieldZ, gx, gy, gz, x, y, z) - getAt(fieldZ, gx, gy, gz, x, y - 1, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false)\r\n\r\n        this.updateElectricY = this.gpu.createKernel(function (fieldX: number[], fieldZ: number[], permittivity: number[], elFieldY: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(elFieldY, gx, gy, gz, x, y, z) + (dt / (getAt(permittivity, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                -(getAt(fieldZ, gx, gy, gz, x, y, z) - getAt(fieldZ, gx, gy, gz, x - 1, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false)\r\n\r\n        this.updateElectricZ = this.gpu.createKernel(function (fieldX: number[], fieldY: number[], permittivity: number[], elFieldZ: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(elFieldZ, gx, gy, gz, x, y, z) + (dt / (getAt(permittivity, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                (getAt(fieldY, gx, gy, gz, x, y, z) - getAt(fieldY, gx, gy, gz, x - 1, y, z)) -\r\n                (getAt(fieldX, gx, gy, gz, x, y, z) - getAt(fieldX, gx, gy, gz, x, y - 1, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt]).setWarnVarUsage(false)\r\n    }\r\n\r\n    stepElectric = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n        const perm = this.data.permittivity.values\r\n\r\n        // d/dt E(x, t) = (curl B(x, t))/(µε)\r\n        this.data.electricFieldX.values = this.updateElectricX(magY, magZ, perm, elX, dt) as number[]\r\n        this.data.electricFieldY.values = this.updateElectricY(magX, magZ, perm, elY, dt) as number[]\r\n        this.data.electricFieldZ.values = this.updateElectricZ(magX, magY, perm, elZ, dt) as number[]\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    stepMagnetic = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n        const perm = this.data.permeability.values\r\n\r\n        // d/dt B(x, t) = -curl E(x, t)\r\n        this.data.magneticFieldX.values = this.updateMagneticX(elY, elZ, perm, magX, dt) as number[]\r\n        this.data.magneticFieldY.values = this.updateMagneticY(elX, elZ, perm, magY, dt) as number[]\r\n        this.data.magneticFieldZ.values = this.updateMagneticZ(elX, elY, perm, magZ, dt) as number[]\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    resetFields = () => {\r\n        this.data.time = 0\r\n        for (let i = 0; i < this.data.electricFieldX.values.length; i++) {\r\n            this.data.electricFieldX.values[i] = 0\r\n            this.data.electricFieldY.values[i] = 0\r\n            this.data.electricFieldZ.values[i] = 0\r\n            this.data.magneticFieldX.values[i] = 0\r\n            this.data.magneticFieldY.values[i] = 0\r\n            this.data.magneticFieldZ.values[i] = 0\r\n        }\r\n    }\r\n\r\n    resetMaterials = () => {\r\n        for (let i = 0; i < this.data.permeability.values.length; i++) {\r\n            this.data.permeability.values[i] = 1\r\n            this.data.permittivity.values[i] = 1\r\n        }\r\n    }\r\n\r\n    getData = () => this.data\r\n}","import React, { useRef, useCallback, useEffect, useState } from 'react'\nimport { GPU } from \"gpu.js\"\nimport { FDTDSimulator, addScalarField3DValue, FlatScalarField3D, setScalarField3DValue } from \"./simulator\"\n\nconst canvasSize = [window.innerWidth, window.innerHeight]\nconst canvasAspect = canvasSize[0] / canvasSize[1]\n\nconst maxDt = 0.02\nconst minDt = 0.001\nconst gridSizeLongest = 800\nconst gridSize: [number, number, number] = canvasSize[0] >= canvasSize[1] ?\n    [gridSizeLongest, Math.ceil(gridSizeLongest / canvasAspect), 1] :\n    [Math.ceil(gridSizeLongest * canvasAspect), gridSizeLongest, 1]\nconst cellSize = 0.04\n\nconst simulator = new FDTDSimulator(gridSize, cellSize)\n\nconst makeRenderSimulatorCanvas = (g: GPU) => {\n    function getAt(field: number[], shapeX: number, shapeY: number, shapeZ: number, x: number, y: number, z: number) {\n        if (x < 0 || x >= shapeX || y < 0 || y >= shapeY || z < 0 || z >= shapeZ) {\n            return 0\n        }\n\n        return field[x + y * shapeX + z * shapeX * shapeZ]\n    }\n\n    return g.createKernel(function (electricFieldX: number[], electricFieldY: number[], electricFieldZ: number[],\n        magneticFieldX: number[], magneticFieldY: number[], magneticFieldZ: number[],\n        permittivity: number[], permeability: number[]) {\n        const gx = this.constants.gridSizeX as number\n        const gy = this.constants.gridSizeY as number\n        const gz = this.constants.gridSizeZ as number\n\n        const x = gx * this.thread.x! / (this.output.x as number)\n        const y = gy * (1 - this.thread.y! / (this.output.y as number))\n        const xa = Math.floor(x)\n        const ya = Math.floor(y)\n\n        const z = Math.floor(gz / 2)\n\n        const eAA = getAt(electricFieldX, gx, gy, gz, xa, ya, z) * getAt(electricFieldX, gx, gy, gz, xa, ya, z) + getAt(electricFieldY, gx, gy, gz, xa, ya, z) * getAt(electricFieldY, gx, gy, gz, xa, ya, z) + getAt(electricFieldZ, gx, gy, gz, xa, ya, z) * getAt(electricFieldZ, gx, gy, gz, xa, ya, z)\n\n        // Magnetic field is offset from electric field, so get value at +0.5 by interpolating 0 and 1\n        const magXAA = (getAt(magneticFieldX, gx, gy, gz, xa, ya, z) + getAt(magneticFieldX, gx, gy, gz, xa - 1, ya - 1, z)) / 2\n        const magYAA = (getAt(magneticFieldY, gx, gy, gz, xa, ya, z) + getAt(magneticFieldY, gx, gy, gz, xa - 1, ya - 1, z)) / 2\n        const magZAA = (getAt(magneticFieldZ, gx, gy, gz, xa, ya, z) + getAt(magneticFieldZ, gx, gy, gz, xa - 1, ya - 1, z)) / 2\n\n        const mAA = magXAA * magXAA + magYAA * magYAA + magZAA * magZAA\n\n        const scale = 15\n\n        const permittivityValue = Math.max(0, Math.min(1, (1 + 0.4342944819 * Math.log(getAt(permittivity, gx, gy, gz, xa, ya, z))) / 4))\n        const permeabilityValue = Math.max(0, Math.min(1, (1 + 0.4342944819 * Math.log(getAt(permeability, gx, gy, gz, xa, ya, z))) / 4))\n\n        const backgroundX = (Math.abs(x % 1 - 0.5) < 0.25 ? 1 : 0) * (Math.abs(y % 1 - 0.5) < 0.25 ? 1 : 0)\n        const backgroundY = 1 - backgroundX\n\n        this.color(eAA / scale + 0.5 * backgroundX * permittivityValue, eAA / scale + mAA / scale, mAA / scale + 0.5 * backgroundY * permeabilityValue)\n    }, {\n        output: [canvasSize[0], canvasSize[1]],\n        constants: { gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] },\n        graphical: true\n    }).setFunctions([getAt]).setWarnVarUsage(false)\n}\n\nfunction clamp(min: number, max: number, value: number) {\n    return Math.max(min, Math.min(max, value))\n}\n\ntype LabeledSliderProps = {\n    label: string\n    value: number,\n    setValue: (value: number) => void\n    min: number\n    max: number\n    step: number\n}\n\nfunction LabeledSlider(props: LabeledSliderProps) {\n    return (\n        <div>\n            <label>{props.label}</label>\n            <div>\n                <input type=\"range\" min={props.min} max={props.max} value={props.value} step={props.step}\n                    onChange={e => props.setValue(parseFloat(e.target.value))} style={{ height: 10, width: \"100%\" }} />\n                <div style={{ textAlign: \"center\", lineHeight: 0.1, marginBottom: \"7px\" }}>\n                    {props.value}\n                </div>\n            </div>\n        </div>\n    )\n}\n\ntype OptionSelectorProps = {\n    options: string[]\n    selectedOption: number\n    setSelectedOption: (selectedOption: number) => void\n}\n\nfunction OptionSelector(props: OptionSelectorProps) {\n    return (\n        <div>\n            {props.options.map((option, optionIndex) =>\n                <button key={option} style={{\n                    boxSizing: \"border-box\",\n                    border: optionIndex === props.selectedOption ? \"4px solid rgb(0, 150, 255)\" : \"0\",\n                    height: \"30px\",\n                    margin: \"5px\",\n                    width: `${100 / props.options.length}%`, background: \"rgb(100, 100, 100)\", color: \"white\"\n                }}\n                    onClick={e => props.setSelectedOption(optionIndex)}>\n                    {option}\n                </button>\n            )}\n        </div>\n    )\n}\n\ntype ControlWidgerProps = {\n    brushSize: number,\n    setBrushSize: (brushSize: number) => void\n\n    brushValue: number,\n    setBrushValue: (brushValue: number) => void\n\n    signalFrequency: number,\n    setSignalFrequency: (signalFrequency: number) => void\n\n    clickOption: number\n    setClickOption: (clickOption: number) => void\n\n    resetFields: () => void\n    resetMaterials: () => void\n}\n\nfunction ControlWidget(props: ControlWidgerProps) {\n    const [collapsed, setCollapsed] = useState(false)\n\n    return (\n        <div style={{ userSelect: \"none\" }}>\n            <div style={{ textAlign: \"center\", position: \"absolute\", opacity: 0.8, background: \"rgba(33, 33, 33, 100)\", fontWeight: \"lighter\", color: \"white\" }}>\n                <button onClick={e => setCollapsed(!collapsed)} style={{ width: \"100%\", height: \"30px\", background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", fontWeight: \"bold\", cursor: \"pointer\" }}>\n                    Controls [{collapsed ? \"+\" : \"-\"}]\n                </button>\n                {!collapsed && (\n                    <div style={{ padding: \"10px\" }}>\n                        <LabeledSlider label=\"Brush size\" value={props.brushSize} setValue={props.setBrushSize} min={0} max={100} step={1} />\n                        <LabeledSlider label=\"Brush value\" value={props.brushValue} setValue={props.setBrushValue} min={1} max={100} step={1} />\n                        <LabeledSlider label=\"Signal frequency\" value={props.signalFrequency} setValue={props.setSignalFrequency} min={0.5} max={5} step={0.5} />\n                        <OptionSelector options={[\"ε brush\", \"µ brush\", \"Signal\"]} selectedOption={props.clickOption} setSelectedOption={props.setClickOption} />\n                        <button onClick={props.resetFields} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Reset fields</button>\n                        <button onClick={props.resetMaterials} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Reset materials</button>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nlet renderSim: any = null\nlet signalStrength = 0\nlet signalPosition = [0, 0]\nlet mouseDownPos: [number, number] | null = null\nlet dt = maxDt\nlet lastDrawTime = -1\n\nexport default function () {\n    const [brushSize, setBrushSize] = useState(5)\n    const [brushValue, setBrushValue] = useState(5)\n    const [signalFrequency, setSignalFrequency] = useState(1)\n    const [drawingPermeability, setDrawingPermeability] = useState(false)\n    const [drawingPermittivity, setDrawingPermittivity] = useState(false)\n    const [clickOption, setClickOption] = useState(2) // eps, mu, signal\n    const optionPermittivityBrush = 0\n    const optionPermeabilityBrush = 1\n    const optionSignal = 2\n\n    const drawCanvasRef = useRef<HTMLCanvasElement>(null)\n\n    const startLoop = useCallback(() => {\n        let stop = false\n\n        const loop = (async () => {\n            const resolveDrawPromise = (resolve: (value?: unknown) => void) => requestAnimationFrame(t => {\n                if (lastDrawTime >= 0) {\n                    dt = Math.max(minDt, Math.min(maxDt, (t - lastDrawTime) / 1000))\n                }\n                lastDrawTime = t\n                resolve()\n            })\n\n            while (!stop) {\n                await new Promise(resolveDrawPromise)\n\n                console.log(dt)\n\n                const simData = simulator.getData()\n\n                if (mouseDownPos !== null) {\n                    signalPosition = mouseDownPos\n                    signalStrength = Math.min(10000, signalStrength + dt * 10000)\n                }\n\n                signalStrength *= Math.pow(0.1, dt)\n\n                if (signalStrength > 1 && drawCanvasRef.current) {\n                    const px = clamp(0, simData.electricFieldX.shape[0] - 1, Math.floor(simData.electricFieldX.shape[0] * signalPosition[0] / drawCanvasRef.current.width))\n                    const py = clamp(0, simData.electricFieldX.shape[1] - 1, Math.floor(simData.electricFieldX.shape[1] * signalPosition[1] / drawCanvasRef.current.height))\n\n                    for (let z = 0; z < simData.electricFieldX.shape[2]; z++) {\n                        addScalarField3DValue(simData.electricFieldZ, px, py, z, Math.sin(signalFrequency * 2 * Math.PI * simData.time) * signalStrength * dt)\n                    }\n                }\n\n                simulator.stepMagnetic(dt)\n                simulator.stepElectric(dt)\n\n                if (renderSim === null && drawCanvasRef.current !== null) {\n                    renderSim = makeRenderSimulatorCanvas(new GPU({ mode: \"webgl2\", canvas: drawCanvasRef.current }))\n                }\n\n                if (renderSim !== null) {\n                    renderSim(simData.electricFieldX.values, simData.electricFieldY.values, simData.electricFieldZ.values,\n                        simData.magneticFieldX.values, simData.magneticFieldY.values, simData.magneticFieldZ.values,\n                        simData.permittivity.values, simData.permeability.values)\n                }\n\n                await new Promise(resolveDrawPromise)\n            }\n        })\n\n        loop()\n\n        return () => { stop = true }\n    }, [signalFrequency])\n\n    useEffect(startLoop, [startLoop])\n\n    const changeMaterial = useCallback((field: FlatScalarField3D, canvasPos: [number, number]) => {\n        const centerX = Math.round(gridSize[0] * (canvasPos[0] / canvasSize[0]))\n        const centerY = Math.round(gridSize[1] * (canvasPos[1] / canvasSize[1]))\n        const brushHalfSize = Math.round(brushSize / 2)\n\n        console.log(brushHalfSize)\n\n        for (let x = Math.max(0, centerX - brushHalfSize); x <= Math.min(gridSize[0] - 1, centerX + brushHalfSize); x++) {\n            for (let y = Math.max(0, centerY - brushHalfSize); y <= Math.min(gridSize[1] - 1, centerY + brushHalfSize); y++) {\n                setScalarField3DValue(field, x, y, 0, brushValue)\n            }\n        }\n    }, [brushSize, brushValue])\n\n    const resetMaterials = useCallback(() => {\n        simulator.resetMaterials()\n    }, [])\n\n    const resetFields = useCallback(() => {\n        simulator.resetFields()\n        signalStrength = 0\n    }, [])\n\n    const onInputDown = useCallback(([clientX, clientY]: [number, number]) => {\n        if (clickOption === optionSignal) {\n            mouseDownPos = [clientX, clientY]\n        } else if (clickOption === optionPermittivityBrush) {\n            changeMaterial(simulator.getData().permittivity, [clientX, clientY])\n            setDrawingPermittivity(true)\n        } else if (clickOption === optionPermeabilityBrush) {\n            changeMaterial(simulator.getData().permeability, [clientX, clientY])\n            setDrawingPermeability(true)\n        }\n    }, [changeMaterial, clickOption])\n\n    const onInputMove = useCallback(([clientX, clientY]: [number, number]) => {\n        if (clickOption === optionSignal && mouseDownPos !== null) {\n            mouseDownPos = [clientX, clientY]\n        }\n\n        if (drawingPermittivity) {\n            changeMaterial(simulator.getData().permittivity, [clientX, clientY])\n        }\n\n        if (drawingPermeability) {\n            changeMaterial(simulator.getData().permeability, [clientX, clientY])\n        }\n    }, [changeMaterial, clickOption, drawingPermeability, drawingPermittivity])\n\n    const onInputUp = useCallback(([clientX, clientY]: [number, number]) => {\n        if (clickOption === optionSignal) {\n            mouseDownPos = null\n        } else if (clickOption === optionPermeabilityBrush) {\n            setDrawingPermeability(false)\n        } else if (clickOption === optionPermittivityBrush) {\n            setDrawingPermittivity(false)\n        }\n    }, [clickOption])\n\n    return (\n        <div>\n            <canvas width={canvasSize[0]} height={canvasSize[1]} ref={drawCanvasRef} style={{ position: \"absolute\" }}\n                onMouseDown={e => onInputDown([e.clientX, e.clientY])}\n                onMouseMove={e => onInputMove([e.clientX, e.clientY])}\n                onMouseUp={e => onInputUp([e.clientX, e.clientY])}\n                onTouchStart={e => onInputDown([e.touches[0].clientX, e.touches[0].clientY])}\n                onTouchMove={e => onInputMove([e.touches[0].clientX, e.touches[0].clientY])}\n                onTouchEnd={e => onInputUp([e.touches[0].clientX, e.touches[0].clientY])}\n                onContextMenu={e => e.preventDefault()}\n            />\n\n            <div style={{ position: \"absolute\", bottom: 10, right: 10, userSelect: \"none\" }}>\n                <a href=\"https://github.com/RobinKa/maxwell-simulation\" rel=\"noopener noreferrer\" target=\"_blank\" style={{ fontWeight: \"lighter\", color: \"rgba(255, 255, 255, 100)\", textDecoration: \"none\" }}>Source code</a>\n            </div>\n\n            <ControlWidget brushSize={brushSize} setBrushSize={setBrushSize}\n                brushValue={brushValue} setBrushValue={setBrushValue}\n                signalFrequency={signalFrequency} setSignalFrequency={setSignalFrequency}\n                clickOption={clickOption} setClickOption={setClickOption}\n                resetFields={resetFields} resetMaterials={resetMaterials}\n            />\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}