{"version":3,"sources":["simulator.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["makeScalarField3D","shape","value","field","i","push","values","addScalarField3DValue","x","y","z","updateScalarField3DValue","getValue","canvasSize","window","innerWidth","innerHeight","gridSize","Math","ceil","simulator","cellSize","data","gpu","updateMagneticX","updateMagneticY","updateMagneticZ","updateElectricX","updateElectricY","updateElectricZ","stepElectric","dt","elX","electricFieldX","elY","electricFieldY","elZ","electricFieldZ","magX","magneticFieldX","magY","magneticFieldY","magZ","magneticFieldZ","perm","permittivity","time","stepMagnetic","permeability","getData","this","cellCount","getAt","shapeX","shapeY","shapeZ","getX","index","getY","floor","getZ","GPU","createKernel","fieldY","fieldZ","magFieldX","thread","gx","constants","gridSizeX","gy","gridSizeY","gz","gridSizeZ","output","setFunctions","fieldX","magFieldY","magFieldZ","elFieldX","elFieldY","elFieldZ","makeRenderSimulatorCanvas","g","xa","ya","xb","yb","alphaX","alphaY","eAA","eAB","eBA","eBB","magXAA","magYAA","magZAA","magXAB","magYAB","magZAB","magXBA","magYBA","magZBA","magXBB","magYBB","magZBB","mAA","mAB","mBA","mBB","eMix","max","min","mMix","permittivityValue","log","permeabilityValue","backgroundX","abs","backgroundY","color","graphical","clamp","renderSim","signalStrength","signalPosition","mouseDownPos","rightDown","middleDown","Boolean","location","hostname","match","ReactDOM","render","drawCanvasRef","useRef","startLoop","useCallback","stop","a","simReady","resolveSimPromise","resolve","setTimeout","resolveDrawPromise","requestAnimationFrame","simPromise","Promise","drawPromise","race","simData","pow","current","px","width","py","height","sin","PI","mode","canvas","loop","useEffect","onMouseDown","e","button","clientX","clientY","preventDefault","round","factor","ctrlKey","val","onMouseMove","onMouseUp","ref","onContextMenu","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d98ac2a0.chunk.js","sourcesContent":["import { GPU, IKernelRunShortcut } from \"gpu.js\"\r\n\r\nexport type FlatScalarField3D = {\r\n    values: number[]\r\n    shape: [number, number, number]\r\n}\r\n\r\nfunction makeScalarField3D(shape: [number, number, number], value: number = 0) {\r\n    const field = []\r\n    for (let i = 0; i < shape[0] * shape[1] * shape[2]; i++) {\r\n        field.push(value)\r\n    }\r\n    return { values: field, shape: shape }\r\n}\r\n\r\nexport function indexToCoords(index: number, shape: [number, number, number]): [number, number, number] {\r\n    return [index % shape[0], Math.floor(index / shape[0]) % shape[1], Math.floor(index / (shape[0] * shape[1])) % shape[2]]\r\n}\r\n\r\nexport function setScalarField3DValue(field: FlatScalarField3D, x: number, y: number, z: number, value: number) {\r\n    field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]] = value\r\n}\r\n\r\nexport function addScalarField3DValue(field: FlatScalarField3D, x: number, y: number, z: number, value: number) {\r\n    field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]] += value\r\n}\r\n\r\nexport function updateScalarField3DValue(field: FlatScalarField3D, x: number, y: number, z: number, getValue: (current: number) => number) {\r\n    field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]] = getValue(field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]])\r\n}\r\n\r\nexport function getScalarField3DValue(field: FlatScalarField3D, x: number, y: number, z: number) {\r\n    return field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]]\r\n}\r\n\r\nexport type SimulationData = {\r\n    time: number\r\n    electricFieldX: FlatScalarField3D\r\n    electricFieldY: FlatScalarField3D\r\n    electricFieldZ: FlatScalarField3D\r\n    magneticFieldX: FlatScalarField3D\r\n    magneticFieldY: FlatScalarField3D\r\n    magneticFieldZ: FlatScalarField3D\r\n    permittivity: FlatScalarField3D\r\n    permeability: FlatScalarField3D\r\n}\r\n\r\nexport interface Simulator {\r\n    stepElectric: (dt: number) => void\r\n    stepMagnetic: (dt: number) => void\r\n    getData: () => SimulationData\r\n}\r\n\r\nexport class FDTDSimulator implements Simulator {\r\n    private data: SimulationData\r\n\r\n    private gpu: GPU\r\n    private updateMagneticX: IKernelRunShortcut\r\n    private updateMagneticY: IKernelRunShortcut\r\n    private updateMagneticZ: IKernelRunShortcut\r\n    private updateElectricX: IKernelRunShortcut\r\n    private updateElectricY: IKernelRunShortcut\r\n    private updateElectricZ: IKernelRunShortcut\r\n\r\n    constructor(gridSize: [number, number, number], cellSize: number) {\r\n        this.data = {\r\n            time: 0,\r\n            electricFieldX: makeScalarField3D(gridSize),\r\n            electricFieldY: makeScalarField3D(gridSize),\r\n            electricFieldZ: makeScalarField3D(gridSize),\r\n            magneticFieldX: makeScalarField3D(gridSize),\r\n            magneticFieldY: makeScalarField3D(gridSize),\r\n            magneticFieldZ: makeScalarField3D(gridSize),\r\n            permittivity: makeScalarField3D(gridSize, 1),\r\n            permeability: makeScalarField3D(gridSize, 1),\r\n        }\r\n\r\n        const cellCount = gridSize[0] * gridSize[1] * gridSize[2]\r\n\r\n        this.gpu = new GPU()\r\n\r\n        function getAt(field: number[], shapeX: number, shapeY: number, shapeZ: number, x: number, y: number, z: number) {\r\n            if (x < 0 || x >= shapeX || y < 0 || y >= shapeY || z < 0 || z >= shapeZ) {\r\n                return 0\r\n            }\r\n\r\n            return field[x + y * shapeX + z * shapeX * shapeZ]\r\n        }\r\n\r\n        function getX(index: number, shapeX: number) {\r\n            return index % shapeX\r\n        }\r\n\r\n        function getY(index: number, shapeX: number, shapeY: number) {\r\n            return Math.floor(index / shapeX) % shapeY\r\n        }\r\n\r\n        function getZ(index: number, shapeX: number, shapeY: number, shapeZ: number) {\r\n            return Math.floor(index / (shapeX * shapeY)) % shapeZ\r\n        }\r\n\r\n        this.updateMagneticX = this.gpu.createKernel(function (fieldY: number[], fieldZ: number[], permeability: number[], magFieldX: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(magFieldX, gx, gy, gz, x, y, z) - (dt / (getAt(permeability, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                (getAt(fieldZ, gx, gy, gz, x, y + 1, z) - getAt(fieldZ, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n\r\n\r\n        this.updateMagneticY = this.gpu.createKernel(function (fieldX: number[], fieldZ: number[], permeability: number[], magFieldY: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(magFieldY, gx, gy, gz, x, y, z) - (dt / (getAt(permeability, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                -(getAt(fieldZ, gx, gy, gz, x + 1, y, z) - getAt(fieldZ, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n\r\n        this.updateMagneticZ = this.gpu.createKernel(function (fieldX: number[], fieldY: number[], permeability: number[], magFieldZ: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(magFieldZ, gx, gy, gz, x, y, z) - (dt / (getAt(permeability, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                (getAt(fieldY, gx, gy, gz, x + 1, y, z) - getAt(fieldY, gx, gy, gz, x, y, z)) -\r\n                (getAt(fieldX, gx, gy, gz, x, y + 1, z) - getAt(fieldX, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n\r\n        this.updateElectricX = this.gpu.createKernel(function (fieldY: number[], fieldZ: number[], permittivity: number[], elFieldX: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(elFieldX, gx, gy, gz, x, y, z) + (dt / (getAt(permittivity, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                (getAt(fieldZ, gx, gy, gz, x, y, z) - getAt(fieldZ, gx, gy, gz, x, y - 1, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n\r\n        this.updateElectricY = this.gpu.createKernel(function (fieldX: number[], fieldZ: number[], permittivity: number[], elFieldY: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(elFieldY, gx, gy, gz, x, y, z) + (dt / (getAt(permittivity, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                -(getAt(fieldZ, gx, gy, gz, x, y, z) - getAt(fieldZ, gx, gy, gz, x - 1, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n\r\n        this.updateElectricZ = this.gpu.createKernel(function (fieldX: number[], fieldY: number[], permittivity: number[], elFieldZ: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx)\r\n            const y = getY(index, gx, gy)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(elFieldZ, gx, gy, gz, x, y, z) + (dt / (getAt(permittivity, gx, gy, gz, x, y, z) * cellSize)) * (\r\n                (getAt(fieldY, gx, gy, gz, x, y, z) - getAt(fieldY, gx, gy, gz, x - 1, y, z)) -\r\n                (getAt(fieldX, gx, gy, gz, x, y, z) - getAt(fieldX, gx, gy, gz, x, y - 1, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n    }\r\n\r\n    stepElectric = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n        const perm = this.data.permittivity.values\r\n\r\n        // d/dt E(x, t) = (curl B(x, t))/(µε)\r\n        this.data.electricFieldX.values = this.updateElectricX(magY, magZ, perm, elX, dt) as number[]\r\n        this.data.electricFieldY.values = this.updateElectricY(magX, magZ, perm, elY, dt) as number[]\r\n        this.data.electricFieldZ.values = this.updateElectricZ(magX, magY, perm, elZ, dt) as number[]\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    stepMagnetic = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n        const perm = this.data.permeability.values\r\n\r\n        // d/dt B(x, t) = -curl E(x, t)\r\n        this.data.magneticFieldX.values = this.updateMagneticX(elY, elZ, perm, magX, dt) as number[]\r\n        this.data.magneticFieldY.values = this.updateMagneticY(elX, elZ, perm, magY, dt) as number[]\r\n        this.data.magneticFieldZ.values = this.updateMagneticZ(elX, elY, perm, magZ, dt) as number[]\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    getData = () => this.data\r\n}","import React, { useRef, useCallback, useEffect } from 'react'\nimport { GPU } from \"gpu.js\"\nimport { FDTDSimulator, addScalarField3DValue, updateScalarField3DValue } from \"./simulator\"\n\nconst canvasSize = [window.innerWidth, window.innerHeight]\n\nconst dt = 0.01\nconst gridSizeX = 300\nconst gridSize: [number, number, number] = [gridSizeX, Math.ceil(gridSizeX / canvasSize[0] * canvasSize[1]), 1]\nconst cellSize = 0.05\n\nconst simulator = new FDTDSimulator(gridSize, cellSize)\n\nconst makeRenderSimulatorCanvas = (g: GPU) => {\n    function getAt(field: number[], shapeX: number, shapeY: number, shapeZ: number, x: number, y: number, z: number) {\n        if (x < 0 || x >= shapeX || y < 0 || y >= shapeY || z < 0 || z >= shapeZ) {\n            return 0\n        }\n\n        return field[x + y * shapeX + z * shapeX * shapeZ]\n    }\n\n    return g.createKernel(function (electricFieldX: number[], electricFieldY: number[], electricFieldZ: number[],\n        magneticFieldX: number[], magneticFieldY: number[], magneticFieldZ: number[],\n        permittivity: number[], permeability: number[]) {\n        const gx = this.constants.gridSizeX as number\n        const gy = this.constants.gridSizeY as number\n        const gz = this.constants.gridSizeZ as number\n\n        const x = gx * this.thread.x! / (this.output.x as number)\n        const y = gy * (1 - this.thread.y! / (this.output.y as number))\n        const xa = Math.floor(x)\n        const ya = Math.floor(y)\n        const xb = xa + 1\n        const yb = ya + 1\n\n        const alphaX = xb === xa ? 0 : (x - xa) / (xb - xa)\n        const alphaY = yb === ya ? 0 : (y - ya) / (yb - ya)\n\n        const z = Math.floor(gz / 2)\n\n        const eAA = getAt(electricFieldX, gx, gy, gz, xa, ya, z) * getAt(electricFieldX, gx, gy, gz, xa, ya, z) + getAt(electricFieldY, gx, gy, gz, xa, ya, z) * getAt(electricFieldY, gx, gy, gz, xa, ya, z) + getAt(electricFieldZ, gx, gy, gz, xa, ya, z) * getAt(electricFieldZ, gx, gy, gz, xa, ya, z)\n        const eAB = getAt(electricFieldX, gx, gy, gz, xa, yb, z) * getAt(electricFieldX, gx, gy, gz, xa, yb, z) + getAt(electricFieldY, gx, gy, gz, xa, yb, z) * getAt(electricFieldY, gx, gy, gz, xa, yb, z) + getAt(electricFieldZ, gx, gy, gz, xa, yb, z) * getAt(electricFieldZ, gx, gy, gz, xa, yb, z)\n        const eBA = getAt(electricFieldX, gx, gy, gz, xb, ya, z) * getAt(electricFieldX, gx, gy, gz, xb, ya, z) + getAt(electricFieldY, gx, gy, gz, xb, ya, z) * getAt(electricFieldY, gx, gy, gz, xb, ya, z) + getAt(electricFieldZ, gx, gy, gz, xb, ya, z) * getAt(electricFieldZ, gx, gy, gz, xb, ya, z)\n        const eBB = getAt(electricFieldX, gx, gy, gz, xb, yb, z) * getAt(electricFieldX, gx, gy, gz, xb, yb, z) + getAt(electricFieldY, gx, gy, gz, xb, yb, z) * getAt(electricFieldY, gx, gy, gz, xb, yb, z) + getAt(electricFieldZ, gx, gy, gz, xb, yb, z) * getAt(electricFieldZ, gx, gy, gz, xb, yb, z)\n\n        // Magnetic field is offset from electric field, so get value at +0.5 by interpolating 0 and 1\n        const magXAA = (getAt(magneticFieldX, gx, gy, gz, xa, ya, z) + getAt(magneticFieldX, gx, gy, gz, xa - 1, ya - 1, z)) / 2\n        const magYAA = (getAt(magneticFieldY, gx, gy, gz, xa, ya, z) + getAt(magneticFieldY, gx, gy, gz, xa - 1, ya - 1, z)) / 2\n        const magZAA = (getAt(magneticFieldZ, gx, gy, gz, xa, ya, z) + getAt(magneticFieldZ, gx, gy, gz, xa - 1, ya - 1, z)) / 2\n        const magXAB = (getAt(magneticFieldX, gx, gy, gz, xa, yb, z) + getAt(magneticFieldX, gx, gy, gz, xa - 1, yb - 1, z)) / 2\n        const magYAB = (getAt(magneticFieldY, gx, gy, gz, xa, yb, z) + getAt(magneticFieldY, gx, gy, gz, xa - 1, yb - 1, z)) / 2\n        const magZAB = (getAt(magneticFieldZ, gx, gy, gz, xa, yb, z) + getAt(magneticFieldZ, gx, gy, gz, xa - 1, yb - 1, z)) / 2\n        const magXBA = (getAt(magneticFieldX, gx, gy, gz, xb, ya, z) + getAt(magneticFieldX, gx, gy, gz, xb - 1, ya - 1, z)) / 2\n        const magYBA = (getAt(magneticFieldY, gx, gy, gz, xb, ya, z) + getAt(magneticFieldY, gx, gy, gz, xb - 1, ya - 1, z)) / 2\n        const magZBA = (getAt(magneticFieldZ, gx, gy, gz, xb, ya, z) + getAt(magneticFieldZ, gx, gy, gz, xb - 1, ya - 1, z)) / 2\n        const magXBB = (getAt(magneticFieldX, gx, gy, gz, xb, yb, z) + getAt(magneticFieldX, gx, gy, gz, xb - 1, yb - 1, z)) / 2\n        const magYBB = (getAt(magneticFieldY, gx, gy, gz, xb, yb, z) + getAt(magneticFieldY, gx, gy, gz, xb - 1, yb - 1, z)) / 2\n        const magZBB = (getAt(magneticFieldZ, gx, gy, gz, xb, yb, z) + getAt(magneticFieldZ, gx, gy, gz, xb - 1, yb - 1, z)) / 2\n\n        const mAA = magXAA * magXAA + magYAA * magYAA + magZAA * magZAA\n        const mAB = magXAB * magXAB + magYAB * magYAB + magZAB * magZAB\n        const mBA = magXBA * magXBA + magYBA * magYBA + magZBA * magZBA\n        const mBB = magXBB * magXBB + magYBB * magYBB + magZBB * magZBB\n\n        const scale = 100\n\n        const eMix = Math.max(0, Math.min(scale, alphaY * (alphaX * eBB + (1 - alphaX) * eAB) + (1 - alphaY) * (alphaX * eBA + (1 - alphaX) * eAA)))\n        const mMix = Math.max(0, Math.min(scale, alphaY * (alphaX * mBB + (1 - alphaX) * mAB) + (1 - alphaY) * (alphaX * mBA + (1 - alphaX) * mAA)))\n\n        const permittivityValue = Math.max(0, Math.min(1, (1 + 0.4342944819 * Math.log(getAt(permittivity, gx, gy, gz, xa, ya, z))) / 4))\n        const permeabilityValue = Math.max(0, Math.min(1, (1 + 0.4342944819 * Math.log(getAt(permeability, gx, gy, gz, xa, ya, z))) / 4))\n\n        const backgroundX = (Math.abs(x % 1 - 0.5) < 0.25 ? 1 : 0) * (Math.abs(y % 1 - 0.5) < 0.25 ? 1 : 0)\n        const backgroundY = 1 - backgroundX\n\n        this.color(eMix / scale + 0.5 * backgroundX * permittivityValue, eMix / scale + mMix / scale, mMix / scale + 0.5 * backgroundY * permeabilityValue)\n    }, {\n        output: [canvasSize[0], canvasSize[1]],\n        constants: { gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] },\n        graphical: true\n    }).setFunctions([getAt])\n}\n\nfunction clamp(min: number, max: number, value: number) {\n    return Math.max(min, Math.min(max, value))\n}\n\nlet renderSim: any = null\nlet signalStrength = 0\nlet signalPosition = [0, 0]\nlet mouseDownPos: [number, number] | null = null\nlet rightDown = false\nlet middleDown = false\n\nexport default function () {\n    const drawCanvasRef = useRef<HTMLCanvasElement>(null)\n\n    const startLoop = useCallback(() => {\n        let stop = false\n\n        const loop = (async () => {\n            let simReady = false\n            const resolveSimPromise = (resolve: any) => setTimeout(() => { simReady = true; resolve() }, 1000 * dt)\n            const resolveDrawPromise = (resolve: any) => requestAnimationFrame(resolve)\n\n            let simPromise = new Promise(resolveSimPromise)\n            let drawPromise = new Promise(resolveDrawPromise)\n\n            while (!stop) {\n                await Promise.race([simPromise, drawPromise])\n\n                const simData = simulator.getData()\n\n                if (simReady || simulator.getData().time <= 0) {\n                    if (mouseDownPos !== null) {\n                        signalPosition = mouseDownPos\n                        signalStrength = Math.min(10000, signalStrength + dt * 10000)\n                    }\n\n                    signalStrength *= Math.pow(0.1, dt)\n\n                    if (signalStrength > 1 && drawCanvasRef.current) {\n                        const px = clamp(0, simData.electricFieldX.shape[0] - 1, Math.floor(simData.electricFieldX.shape[0] * signalPosition[0] / drawCanvasRef.current.width))\n                        const py = clamp(0, simData.electricFieldX.shape[1] - 1, Math.floor(simData.electricFieldX.shape[1] * signalPosition[1] / drawCanvasRef.current.height))\n\n                        for (let z = 0; z < simData.electricFieldX.shape[2]; z++) {\n                            //addScalarField3DValue(simData.electricFieldX, px, py, z, sig[0] * dt / 2)\n                            //addScalarField3DValue(simData.electricFieldY, px, py, z, sig[1] * dt / 2)\n                            addScalarField3DValue(simData.electricFieldZ, px, py, z, Math.sin(2 * 2 * Math.PI * simData.time) * signalStrength * dt)\n                        }\n                    }\n\n                    simulator.stepMagnetic(dt)\n                    simulator.stepElectric(dt)\n\n                    simPromise = new Promise(resolveSimPromise)\n                } else {\n                    if (renderSim === null && drawCanvasRef.current !== null) {\n                        renderSim = makeRenderSimulatorCanvas(new GPU({ mode: \"webgl2\", canvas: drawCanvasRef.current }))\n                    }\n\n                    if (renderSim !== null) {\n                        renderSim(simData.electricFieldX.values, simData.electricFieldY.values, simData.electricFieldZ.values,\n                            simData.magneticFieldX.values, simData.magneticFieldY.values, simData.magneticFieldZ.values,\n                            simData.permittivity.values, simData.permeability.values)\n                    }\n\n                    drawPromise = new Promise(resolveDrawPromise)\n                }\n\n                simReady = false\n                await Promise.race([simPromise, drawPromise])\n            }\n        })\n\n        loop()\n\n        return () => { stop = true }\n    }, [])\n\n    useEffect(startLoop, [startLoop])\n\n    const onMouseDown = useCallback((e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n        if (e.button === 0) {\n            mouseDownPos = [e.clientX, e.clientY]\n            e.preventDefault()\n        } else if (e.button === 2) {\n            const x = Math.round(gridSize[0] * (e.clientX / canvasSize[0]))\n            const y = Math.round(gridSize[1] * (e.clientY / canvasSize[1]))\n\n            const factor = e.ctrlKey ? 0.1 : 10\n\n            updateScalarField3DValue(simulator.getData().permittivity, x, y, 0, val => Math.min(1000, Math.max(0.4, factor * val)))\n            rightDown = true\n            e.preventDefault()\n        } else if (e.button === 1) {\n            const x = Math.round(gridSize[0] * (e.clientX / canvasSize[0]))\n            const y = Math.round(gridSize[1] * (e.clientY / canvasSize[1]))\n            \n            const factor = e.ctrlKey ? 0.1 : 10\n\n            updateScalarField3DValue(simulator.getData().permeability, x, y, 0, val => Math.min(1000, Math.max(0.4, factor * val)))\n            middleDown = true\n            e.preventDefault()\n        }\n    }, [])\n\n    const onMouseMove = useCallback((e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n        if (e.button === 0 && mouseDownPos !== null) {\n            mouseDownPos = [e.clientX, e.clientY]\n            e.preventDefault()\n        }\n\n        if (rightDown) {\n            const x = Math.round(gridSize[0] * (e.clientX / canvasSize[0]))\n            const y = Math.round(gridSize[1] * (e.clientY / canvasSize[1]))\n\n            const factor = e.ctrlKey ? 0.1 : 10\n\n            updateScalarField3DValue(simulator.getData().permittivity, x, y, 0, val => Math.min(1000, Math.max(0.4, factor * val)))\n            e.preventDefault()\n        }\n\n        if (middleDown) {\n            const x = Math.round(gridSize[0] * (e.clientX / canvasSize[0]))\n            const y = Math.round(gridSize[1] * (e.clientY / canvasSize[1]))\n            \n            const factor = e.ctrlKey ? 0.1 : 10\n\n            updateScalarField3DValue(simulator.getData().permeability, x, y, 0, val => Math.min(1000, Math.max(0.4, factor * val)))\n            e.preventDefault()\n        }\n    }, [])\n\n    const onMouseUp = useCallback((e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n        if (e.button === 0) {\n            mouseDownPos = null\n        } else if (e.button === 1) {\n            middleDown = false\n        } else if (e.button === 2) {\n            rightDown = false\n        }\n    }, [])\n\n    return (\n        <canvas width={canvasSize[0]} height={canvasSize[1]} ref={drawCanvasRef}\n            onMouseDown={onMouseDown}\n            onMouseMove={onMouseMove}\n            onMouseUp={onMouseUp}\n            onContextMenu={e => e.preventDefault()}\n        />\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}