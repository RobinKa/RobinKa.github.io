{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["fieldAt3D","field","coords","outOfRange","xs","undefined","ys","value","makeField3D","shape","getValue","x","row","y","d","z","push","fdCurl3D","out","length","left","right","top","bottom","front","back","inplaceMulAddVectorField3D","a","b","s","simulator","data","auxCurl","step","dt","halfDt","electricField","magneticField","getData","this","_","permittivity","permeability","drawArrow","ctx","from","to","style","strokeStyle","beginPath","moveTo","lineTo","stroke","fillStyle","angle","Math","atan2","cos","sin","PI","closePath","fill","Clamp","min","max","Boolean","window","location","hostname","match","ReactDOM","render","canvasRef","useRef","redrawCanvas","useMemo","simulationData","current","getContext","fillRect","canvas","width","height","cellSize","arrowLength","canvasCoords","electricValue","electricMag","sqrt","magneticValue","magneticMag","energy","depthColor","arc","useCallback","Promise","resolve","setTimeout","useEffect","ref","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47844794.chunk.js","sourcesContent":["import React, { useRef, useCallback, useEffect, useMemo } from 'react'\n\ntype Vector3D = [number, number, number]\n\ntype Field3D<T> = T[][][]\ntype ScalarField3D = Field3D<number>\ntype VectorField3D = Field3D<Vector3D>\n\nfunction fieldAt3D<T>(field: Field3D<T>, coords: [number, number, number], outOfRange: T) {\n    const xs = field[coords[0]]\n\n    if (xs === undefined) {\n        return outOfRange\n    }\n\n    const ys = xs[coords[1]]\n\n    if (ys === undefined) {\n        return outOfRange\n    }\n\n    const value = ys[coords[2]]\n\n    if (value === undefined) {\n        return outOfRange\n    }\n\n    return value\n}\n\nfunction makeField3D<T>(shape: [number, number, number], getValue: (coords: [number, number, number]) => T): Field3D<T> {\n    const field = []\n    for (let x = 0; x < shape[0]; x++) {\n        const row = []\n        for (let y = 0; y < shape[1]; y++) {\n            const d = []\n            for (let z = 0; z < shape[2]; z++) {\n                d.push(getValue([x, y, z]))\n            }\n            row.push(d)\n        }\n        field.push(row)\n    }\n    return field\n}\n\nfunction fdCurl3D(field: VectorField3D, out: VectorField3D) {\n    for (let x = 0; x < field.length; x++) {\n        for (let y = 0; y < field[0].length; y++) {\n            for (let z = 0; z < field[0][0].length; z++) {\n                const left = fieldAt3D(field, [x - 1, y, z], [0, 0, 0])\n                const right = fieldAt3D(field, [x + 1, y, z], [0, 0, 0])\n\n                const top = fieldAt3D(field, [x, y - 1, z], [0, 0, 0])\n                const bottom = fieldAt3D(field, [x, y + 1, z], [0, 0, 0])\n\n                const front = fieldAt3D(field, [x, y, z - 1], [0, 0, 0])\n                const back = fieldAt3D(field, [x, y, z + 1], [0, 0, 0])\n\n                out[x][y][z][0] = 0.5 * ((bottom[2] - top[2]) - (back[1] - front[1]))\n                out[x][y][z][1] = 0.5 * ((back[0] - front[0]) - (right[2] - left[2]))\n                out[x][y][z][2] = 0.5 * ((right[1] - left[1]) - (bottom[0] - top[0]))\n            }\n        }\n    }\n}\n\nfunction inplaceMulAddVectorField3D(a: VectorField3D, b: VectorField3D, s: number) {\n    for (let x = 0; x < a.length; x++) {\n        for (let y = 0; y < a[0].length; y++) {\n            for (let z = 0; z < a[0][0].length; z++) {\n                for (let d = 0; d < 3; d++) {\n                    a[x][y][z][d] += s * b[x][y][z][d]\n                }\n            }\n        }\n    }\n}\n\ntype SimulationData = {\n    electricField: VectorField3D\n    magneticField: VectorField3D\n    permittivity: ScalarField3D\n    permeability: ScalarField3D\n}\n\ninterface Simulator {\n    step: (dt: number) => void\n    getData: () => SimulationData\n}\n\nclass FDTDSimulator implements Simulator {\n    private data: SimulationData\n\n    private auxCurl: VectorField3D\n\n    constructor(shape: [number, number, number]) {\n        this.data = {\n            electricField: makeField3D<Vector3D>(shape, (_) => [0, 0, 0]),\n            magneticField: makeField3D<Vector3D>(shape, (_) => [0, 0, 0]),\n            permittivity: makeField3D<number>(shape, (_) => 0),\n            permeability: makeField3D<number>(shape, (_) => 0),\n        }\n\n        this.auxCurl = makeField3D<Vector3D>(shape, (_) => [0, 0, 0])\n    }\n\n    step = (dt: number) => {\n        const halfDt = dt / 2\n\n        // d/dt B(x, t) = -curl E(x, t)\n        fdCurl3D(this.data.electricField, this.auxCurl)\n        inplaceMulAddVectorField3D(this.data.magneticField, this.auxCurl, -halfDt)\n\n        // d/dt E(x, t) = (curl B(x, t))/(µε)\n        fdCurl3D(this.data.magneticField, this.auxCurl)\n        inplaceMulAddVectorField3D(this.data.electricField, this.auxCurl, halfDt)\n    }\n\n    getData = () => this.data\n}\n\nconst gridSize = 5\nconst p = 2\n\nconst simulator = new FDTDSimulator([gridSize, gridSize, gridSize])\n\nsimulator.getData().electricField[p][p][p][1] = 10\nsimulator.getData().electricField[p][p][p][0] = 10\nsimulator.getData().magneticField[p][p][p][2] = 10\n\nfunction drawArrow(ctx: CanvasRenderingContext2D, from: [number, number], to: [number, number], style: string) {\n    const r = 5\n\n    ctx.strokeStyle = style\n    ctx.beginPath()\n    ctx.moveTo(from[0], from[1])\n    ctx.lineTo(to[0], to[1])\n    ctx.stroke()\n    \n    ctx.fillStyle = style\n    ctx.beginPath()\n    let angle = Math.atan2(to[1] - from[1], to[0] - from[0])\n    let x = r * Math.cos(angle) + to[0]\n    let y = r * Math.sin(angle) + to[1]\n    ctx.moveTo(x, y)\n\n    angle += (1 / 3) * (2 * Math.PI)\n    x = r * Math.cos(angle) + to[0]\n    y = r * Math.sin(angle) + to[1]\n    ctx.lineTo(x, y)\n\n    angle += (1 / 3) * (2 * Math.PI)\n    x = r * Math.cos(angle) + to[0]\n    y = r * Math.sin(angle) + to[1]\n    ctx.lineTo(x, y)\n\n    ctx.closePath()\n    ctx.fill()\n}\n\nfunction Clamp(min: number, max: number, value: number) {\n    return Math.max(min, Math.min(max, value))\n}\n\nexport default function () {\n    const canvasRef = useRef<HTMLCanvasElement>(null)\n\n    const redrawCanvas = useMemo(() => (simulationData: SimulationData) => {\n        if (canvasRef.current) {\n            const ctx = canvasRef.current.getContext(\"2d\")\n            if (ctx) {\n                ctx.fillStyle = \"black\"\n                ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n                const simulationData = simulator.getData()\n\n                const cellSize = ctx.canvas.width / simulationData.electricField.length\n                const arrowLength = cellSize / 2.5\n\n                for (let x = 0; x < simulationData.electricField.length; x++) {\n                    for (let y = 0; y < simulationData.electricField[0].length; y++) {\n                        for (let z = 0; z < simulationData.electricField[0][0].length; z++) {\n                            const canvasCoords: [number, number] = [\n                                (x + 0.5) * cellSize + cellSize * z / (4 * simulationData.electricField.length),\n                                (y + 0.5) * cellSize - cellSize * z / (4 * simulationData.electricField.length)\n                            ]\n\n                            const electricValue = simulationData.electricField[x][y][z]\n                            const electricMag = Math.sqrt(electricValue[0] * electricValue[0] + electricValue[1] * electricValue[1] + electricValue[2] * electricValue[2])\n                            const magneticValue = simulationData.magneticField[x][y][z]\n                            const magneticMag = Math.sqrt(magneticValue[0] * magneticValue[0] + magneticValue[1] * magneticValue[1] + magneticValue[2] * magneticValue[2])\n\n                            const energy = electricMag * electricMag + magneticMag * magneticMag\n\n                            const depthColor = 255 * z / (simulationData.electricField[0][0].length - 1)\n\n                            ctx.strokeStyle = `rgb(${depthColor}, 255, ${depthColor})`\n                            ctx.beginPath()\n                            ctx.arc(canvasCoords[0], canvasCoords[1], arrowLength * Math.min(1, energy / 10), 0, 2 * Math.PI)\n                            ctx.stroke()\n\n                            const elOffset: [number, number] = [\n                                canvasCoords[0] + arrowLength * Clamp(-1, 1, electricValue[0]),\n                                canvasCoords[1] + arrowLength * Clamp(-1, 1, electricValue[1]),\n                            ]\n\n                            drawArrow(ctx, canvasCoords, elOffset, `rgb(255, ${depthColor}, ${depthColor})`)\n                        \n\n                            const magOffset: [number, number] = [\n                                canvasCoords[0] + arrowLength * Clamp(-1, 1, magneticValue[0]),\n                                canvasCoords[1] + arrowLength * Clamp(-1, 1, magneticValue[1]),\n                            ]\n\n                            drawArrow(ctx, canvasCoords, magOffset, `rgb(${depthColor}, ${depthColor}, 255)`)\n                        }\n                    }\n                }\n            }\n        }\n    }, [canvasRef])\n\n    const step = useCallback(() => {\n        (async () => {\n            while (true) {\n                simulator.step(0.01)\n                redrawCanvas(simulator.getData())\n                await new Promise(resolve => setTimeout(resolve, 10))\n            }\n        })()\n    }, [redrawCanvas])\n\n    useEffect(() => {\n        redrawCanvas(simulator.getData())\n    }, [redrawCanvas])\n\n    useEffect(step, [step])\n\n    return (\n        <div>\n            <canvas width={1000} height={1000} ref={canvasRef} />\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}