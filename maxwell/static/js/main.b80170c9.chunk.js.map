{"version":3,"sources":["simulator.ts","App.tsx","util.ts","serviceWorker.ts","index.tsx"],"names":["memoByName","makeNew","memoized","name","FDTDSimulator","gpu","gridSize","cellSize","getAt","field","shapeX","shapeY","x","y","data","updateMagneticX","updateMagneticY","updateMagneticZ","updateElectricX","updateElectricY","updateElectricZ","injectSource","decaySource","makeFieldTexture","copyTexture","drawOnTexture","setGridSize","forEach","kernel","setOutput","resetFields","resetMaterials","stepElectric","dt","elX","electricFieldX","values","elY","electricFieldY","elZ","electricFieldZ","magX","magneticFieldX","magY","magneticFieldY","magZ","magneticFieldZ","perm","permittivity","injectedElZ","electricSourceFieldZ","time","stepMagnetic","permeability","drawPermeability","pos","size","value","drawPermittivity","injectSignal","loadPermittivity","loadPermeability","getData","this","createKernel","setPipeline","setTactic","setDynamicOutput","setDynamicArguments","texture","thread","shape","keep","oldValue","output","Math","max","abs","constants","setFunctions","setWarnVarUsage","source","gx","gy","pow","fieldY","fieldZ","magFieldX","cs","fieldX","magFieldY","magFieldZ","elFieldX","elFieldY","elFieldZ","initialCanvasSize","window","innerWidth","innerHeight","initialGridSize","calculateGridSize","gridSizeLongest","canvasSize","canvasAspect","ceil","clamp","min","LabeledSlider","props","label","type","step","onChange","e","setValue","parseFloat","target","style","height","width","textAlign","lineHeight","marginBottom","OptionSelector","options","map","option","optionIndex","key","boxSizing","border","selectedOption","margin","length","background","color","onClick","setSelectedOption","ControlWidget","useState","collapsed","setCollapsed","simulatorMapUrl","setSimulatorMapUrl","simulator","onSaveClicked","useCallback","simData","open","simulatorMap","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","textBaseline","fillText","canvasData","getImageData","round","putImageData","toDataURL","simulatorMapToImageUrl","toArray","onLoadClicked","imageUrl","targetSize","onLoaded","image","Image","crossOrigin","onload","drawImage","imageData","push","src","imageUrlToSimulatorMap","userSelect","position","opacity","fontWeight","cursor","padding","setGridSizeLongest","brushSize","setBrushSize","brushValue","setBrushValue","signalFrequency","setSignalFrequency","clickOption","setClickOption","Boolean","location","hostname","match","ReactDOM","render","drawCanvasRef","useRef","setCanvasSize","useEffect","adjustCanvasSize","addEventListener","removeEventListener","useMemo","setGpu","current","GPU","mode","renderSim","g","eAA","magXAA","magYAA","magZAA","mAA","permittivityValue","log","permeabilityValue","backgroundX","backgroundY","setGraphical","setPrecision","makeRenderSimulatorCanvas","drawingPermeability","setDrawingPermeability","drawingPermittivity","setDrawingPermittivity","mousePosition","setMousePosition","signalStrength","mouseDownPos","simStep","centerX","floor","centerY","brushHalfSize","cos","PI","timer","setInterval","clearInterval","drawStep","stop","requestAnimationFrame","drawIfNotStopped","changePermittivity","canvasPos","changePermeability","onInputDown","clientX","clientY","onInputMove","onInputUp","previousClickOption","setPreviousClickOption","signalBrushSize","setSignalBrushSize","signalBrushValue","setSignalBrushValue","materialBrushSize","setMaterialBrushSize","materialBrushValue","setMaterialBrushValue","touchAction","ref","top","left","onMouseDown","onMouseMove","onMouseUp","onTouchStart","touches","onTouchMove","onTouchEnd","onContextMenu","preventDefault","bottom","right","href","rel","textDecoration","pointerEvents","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b80170c9.chunk.js","sourcesContent":["import { GPU, IKernelRunShortcut, Texture } from \"gpu.js\"\r\n\r\nexport type ScalarField2D = {\r\n    values: Texture\r\n    shape: [number, number]\r\n}\r\n\r\nexport type SimulationData = {\r\n    time: number\r\n    electricFieldX: ScalarField2D\r\n    electricFieldY: ScalarField2D\r\n    electricFieldZ: ScalarField2D\r\n    magneticFieldX: ScalarField2D\r\n    magneticFieldY: ScalarField2D\r\n    magneticFieldZ: ScalarField2D\r\n\r\n    permittivity: ScalarField2D\r\n    permeability: ScalarField2D\r\n\r\n    electricSourceFieldZ: ScalarField2D\r\n}\r\n\r\nexport interface Simulator {\r\n    stepElectric: (dt: number) => void\r\n    stepMagnetic: (dt: number) => void\r\n    resetFields: () => void\r\n    resetMaterials: () => void\r\n    getData: () => SimulationData\r\n}\r\n\r\nfunction memoByName<T>(makeNew: () => T) {\r\n    const memoized: { [name: string]: T } = {}\r\n\r\n    return (name: string) => {\r\n        if (!memoized[name]) {\r\n            memoized[name] = makeNew()\r\n        }\r\n        return memoized[name]\r\n    }\r\n}\r\n\r\nexport class FDTDSimulator implements Simulator {\r\n    private data: SimulationData\r\n\r\n    private updateMagneticX: IKernelRunShortcut\r\n    private updateMagneticY: IKernelRunShortcut\r\n    private updateMagneticZ: IKernelRunShortcut\r\n    private updateElectricX: IKernelRunShortcut\r\n    private updateElectricY: IKernelRunShortcut\r\n    private updateElectricZ: IKernelRunShortcut\r\n\r\n    private injectSource: IKernelRunShortcut\r\n    private decaySource: IKernelRunShortcut\r\n\r\n    private makeFieldTexture: (name: string) => IKernelRunShortcut\r\n    private copyTexture: (name: string) => IKernelRunShortcut\r\n\r\n    private drawOnTexture: (name: string) => IKernelRunShortcut\r\n\r\n    constructor(readonly gpu: GPU, gridSize: [number, number], readonly cellSize: number) {\r\n        this.makeFieldTexture = memoByName(() => this.gpu.createKernel(function (value: number) {\r\n            return value\r\n        }).setOutput(gridSize).setPipeline(true).setTactic(\"performance\").setDynamicOutput(true).setDynamicArguments(true))\r\n\r\n        this.copyTexture = memoByName(() => this.gpu.createKernel(function (texture: number[][]) {\r\n            return texture[this.thread.y!][this.thread.x]\r\n        }).setOutput(gridSize).setPipeline(true).setTactic(\"performance\").setDynamicOutput(true).setDynamicArguments(true))\r\n\r\n        this.data = {\r\n            time: 0,\r\n            electricFieldX: { values: this.makeFieldTexture(\"ex\")(0) as Texture, shape: gridSize },\r\n            electricFieldY: { values: this.makeFieldTexture(\"ey\")(0) as Texture, shape: gridSize },\r\n            electricFieldZ: { values: this.makeFieldTexture(\"ez\")(0) as Texture, shape: gridSize },\r\n            magneticFieldX: { values: this.makeFieldTexture(\"mx\")(0) as Texture, shape: gridSize },\r\n            magneticFieldY: { values: this.makeFieldTexture(\"my\")(0) as Texture, shape: gridSize },\r\n            magneticFieldZ: { values: this.makeFieldTexture(\"mz\")(0) as Texture, shape: gridSize },\r\n            electricSourceFieldZ: { values: this.makeFieldTexture(\"esz\")(0) as Texture, shape: gridSize },\r\n            permittivity: { values: this.makeFieldTexture(\"permittivity\")(1) as Texture, shape: gridSize },\r\n            permeability: { values: this.makeFieldTexture(\"permeability\")(1) as Texture, shape: gridSize },\r\n        }\r\n\r\n        function getAt(field: number[][], shapeX: number, shapeY: number, x: number, y: number) {\r\n            if (x < 0 || x >= shapeX || y < 0 || y >= shapeY) {\r\n                return 0\r\n            }\r\n\r\n            return field[y][x]\r\n        }\r\n\r\n        this.drawOnTexture = memoByName(() => this.gpu.createKernel(function (pos: number[], size: number, value: number, keep: number, texture: number[][]) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n\r\n            const oldValue = getAt(texture, gx, gy, x, y)\r\n\r\n            const within = Math.max(Math.abs(pos[0] - x), Math.abs(pos[1] - y)) < size\r\n\r\n            return within ? value + keep * oldValue : oldValue\r\n        }, {\r\n            constants: { cellSize: cellSize },\r\n        }).setOutput(gridSize).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\").setDynamicOutput(true).setDynamicArguments(true))\r\n\r\n        this.injectSource = this.gpu.createKernel(function (source: number[][], field: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n\r\n            return getAt(field, gx, gy, x, y) + getAt(source, gx, gy, x, y) * dt\r\n        }).setOutput(gridSize).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\").setDynamicOutput(true).setDynamicArguments(true)\r\n\r\n        this.decaySource = this.gpu.createKernel(function (source: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n\r\n            return getAt(source, gx, gy, x, y) * Math.pow(0.1, dt)\r\n        }).setOutput(gridSize).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\").setDynamicOutput(true).setDynamicArguments(true)\r\n\r\n        this.updateMagneticX = this.gpu.createKernel(function (fieldY: number[][], fieldZ: number[][], permeability: number[][], magFieldX: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(magFieldX, gx, gy, x, y) - (dt / (getAt(permeability, gx, gy, x, y) * cs)) * (\r\n                (getAt(fieldZ, gx, gy, x, y + 1) - getAt(fieldZ, gx, gy, x, y)))\r\n        }, {\r\n            constants: { cellSize: cellSize },\r\n        }).setOutput(gridSize).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\").setDynamicOutput(true).setDynamicArguments(true)\r\n\r\n        this.updateMagneticY = this.gpu.createKernel(function (fieldX: number[][], fieldZ: number[][], permeability: number[][], magFieldY: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(magFieldY, gx, gy, x, y) - (dt / (getAt(permeability, gx, gy, x, y) * cs)) * (\r\n                -(getAt(fieldZ, gx, gy, x + 1, y) - getAt(fieldZ, gx, gy, x, y)))\r\n        }, {\r\n            constants: { cellSize: cellSize },\r\n        }).setOutput(gridSize).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\").setDynamicOutput(true).setDynamicArguments(true)\r\n\r\n        this.updateMagneticZ = this.gpu.createKernel(function (fieldX: number[][], fieldY: number[][], permeability: number[][], magFieldZ: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(magFieldZ, gx, gy, x, y) - (dt / (getAt(permeability, gx, gy, x, y) * cs)) * (\r\n                (getAt(fieldY, gx, gy, x + 1, y) - getAt(fieldY, gx, gy, x, y)) -\r\n                (getAt(fieldX, gx, gy, x, y + 1) - getAt(fieldX, gx, gy, x, y)))\r\n        }, {\r\n            constants: { cellSize: cellSize },\r\n        }).setOutput(gridSize).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\").setDynamicOutput(true).setDynamicArguments(true)\r\n\r\n        this.updateElectricX = this.gpu.createKernel(function (fieldY: number[][], fieldZ: number[][], permittivity: number[][], elFieldX: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(elFieldX, gx, gy, x, y) + (dt / (getAt(permittivity, gx, gy, x, y) * cs)) * (\r\n                (getAt(fieldZ, gx, gy, x, y) - getAt(fieldZ, gx, gy, x, y - 1)))\r\n        }, {\r\n            constants: { cellSize: cellSize },\r\n        }).setOutput(gridSize).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\").setDynamicOutput(true).setDynamicArguments(true)\r\n\r\n        this.updateElectricY = this.gpu.createKernel(function (fieldX: number[][], fieldZ: number[][], permittivity: number[][], elFieldY: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(elFieldY, gx, gy, x, y) + (dt / (getAt(permittivity, gx, gy, x, y) * cs)) * (\r\n                -(getAt(fieldZ, gx, gy, x, y) - getAt(fieldZ, gx, gy, x - 1, y)))\r\n        }, {\r\n            constants: { cellSize: cellSize },\r\n        }).setOutput(gridSize).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\").setDynamicOutput(true).setDynamicArguments(true)\r\n\r\n        this.updateElectricZ = this.gpu.createKernel(function (fieldX: number[][], fieldY: number[][], permittivity: number[][], elFieldZ: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(elFieldZ, gx, gy, x, y) + (dt / (getAt(permittivity, gx, gy, x, y) * cs)) * (\r\n                (getAt(fieldY, gx, gy, x, y) - getAt(fieldY, gx, gy, x - 1, y)) -\r\n                (getAt(fieldX, gx, gy, x, y) - getAt(fieldX, gx, gy, x, y - 1)))\r\n        }, {\r\n            constants: { cellSize: cellSize },\r\n        }).setOutput(gridSize).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\").setDynamicOutput(true).setDynamicArguments(true)\r\n    }\r\n\r\n    setGridSize = (gridSize: [number, number]) => {\r\n        const kernels = [\r\n            this.updateElectricX,\r\n            this.updateElectricY,\r\n            this.updateElectricZ,\r\n            this.updateMagneticX,\r\n            this.updateMagneticY,\r\n            this.updateMagneticZ,\r\n            this.injectSource,\r\n            this.decaySource,\r\n            this.makeFieldTexture(\"ex\"),\r\n            this.makeFieldTexture(\"ey\"),\r\n            this.makeFieldTexture(\"ez\"),\r\n            this.makeFieldTexture(\"mx\"),\r\n            this.makeFieldTexture(\"my\"),\r\n            this.makeFieldTexture(\"mz\"),\r\n            this.makeFieldTexture(\"esz\"),\r\n            this.makeFieldTexture(\"permeability\"),\r\n            this.makeFieldTexture(\"permittivity\"),\r\n            this.copyTexture(\"loadPermittivity\"),\r\n            this.copyTexture(\"loadPermittivity\"),\r\n            this.copyTexture(\"permeability\"),\r\n            this.copyTexture(\"permittivity\"),\r\n            this.copyTexture(\"ex\"),\r\n            this.copyTexture(\"ey\"),\r\n            this.copyTexture(\"esz\"),\r\n            this.copyTexture(\"mx\"),\r\n            this.copyTexture(\"my\"),\r\n            this.copyTexture(\"mz\"),\r\n            this.drawOnTexture(\"esz\"),\r\n            this.drawOnTexture(\"permeability\"),\r\n            this.drawOnTexture(\"permittivity\")\r\n        ]\r\n\r\n        kernels.forEach(kernel => kernel.setOutput(gridSize))\r\n\r\n        this.resetFields()\r\n        this.resetMaterials()\r\n    }\r\n\r\n    stepElectric = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n        const perm = this.data.permittivity.values\r\n\r\n        const injectedElZ = this.injectSource(this.data.electricSourceFieldZ.values, elZ, dt) as Texture\r\n        this.data.electricSourceFieldZ.values = this.decaySource(this.copyTexture(\"esz\")(this.data.electricSourceFieldZ.values), dt) as Texture\r\n\r\n        // d/dt E(x, t) = (curl B(x, t))/(µε)\r\n        this.data.electricFieldX.values = this.updateElectricX(magY, magZ, perm, this.copyTexture(\"ex\")(elX), dt) as Texture\r\n        this.data.electricFieldY.values = this.updateElectricY(magX, magZ, perm, this.copyTexture(\"ey\")(elY), dt) as Texture\r\n        this.data.electricFieldZ.values = this.updateElectricZ(magX, magY, perm, injectedElZ, dt) as Texture\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    stepMagnetic = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n        const perm = this.data.permeability.values\r\n\r\n        // d/dt B(x, t) = -curl E(x, t)\r\n        this.data.magneticFieldX.values = this.updateMagneticX(elY, elZ, perm, this.copyTexture(\"mx\")(magX), dt) as Texture\r\n        this.data.magneticFieldY.values = this.updateMagneticY(elX, elZ, perm, this.copyTexture(\"my\")(magY), dt) as Texture\r\n        this.data.magneticFieldZ.values = this.updateMagneticZ(elX, elY, perm, this.copyTexture(\"mz\")(magZ), dt) as Texture\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    resetFields = () => {\r\n        this.data.time = 0\r\n        this.data.electricFieldX.values = this.makeFieldTexture(\"ex\")(0) as Texture\r\n        this.data.electricFieldY.values = this.makeFieldTexture(\"ey\")(0) as Texture\r\n        this.data.electricFieldZ.values = this.makeFieldTexture(\"ez\")(0) as Texture\r\n        this.data.magneticFieldX.values = this.makeFieldTexture(\"mx\")(0) as Texture\r\n        this.data.magneticFieldY.values = this.makeFieldTexture(\"my\")(0) as Texture\r\n        this.data.magneticFieldZ.values = this.makeFieldTexture(\"mz\")(0) as Texture\r\n        this.data.electricSourceFieldZ.values = this.makeFieldTexture(\"esz\")(0) as Texture\r\n    }\r\n\r\n    resetMaterials = () => {\r\n        this.data.permeability.values = this.makeFieldTexture(\"permeability\")(1) as Texture\r\n        this.data.permittivity.values = this.makeFieldTexture(\"permittivity\")(1) as Texture\r\n    }\r\n\r\n    drawPermeability = (pos: [number, number, number], size: number, value: number) => {\r\n        this.data.permeability.values = this.drawOnTexture(\"permeability\")(pos, size, value, 0, this.copyTexture(\"permability\")(this.data.permeability.values)) as Texture\r\n    }\r\n\r\n    drawPermittivity = (pos: [number, number, number], size: number, value: number) => {\r\n        this.data.permittivity.values = this.drawOnTexture(\"permittivity\")(pos, size, value, 0, this.copyTexture(\"permittivity\")(this.data.permittivity.values)) as Texture\r\n    }\r\n\r\n    injectSignal = (pos: [number, number], size: number, value: number, dt: number) => {\r\n        this.data.electricSourceFieldZ.values = this.drawOnTexture(\"esz\")(pos, size, value * dt, 1, this.copyTexture(\"esz\")(this.data.electricSourceFieldZ.values)) as Texture\r\n    }\r\n    \r\n    loadPermittivity = (permittivity: number[][]) => {\r\n        this.data.permittivity.values = this.copyTexture(\"loadPermittivity\")(permittivity) as Texture\r\n    }\r\n\r\n    loadPermeability = (permeability: number[][]) => {\r\n        this.data.permeability.values = this.copyTexture(\"loadPermeability\")(permeability) as Texture\r\n    }\r\n\r\n    getData = () => this.data\r\n}","import React, { useRef, useCallback, useEffect, useState, useMemo } from 'react'\nimport { GPU } from \"gpu.js\"\nimport { FDTDSimulator } from \"./simulator\"\nimport { simulatorMapToImageUrl, imageUrlToSimulatorMap } from './util'\n\nconst dt = 0.02\nconst cellSize = 0.04\n\nconst defaultSignalBrushValue = 10\nconst defaultSignalBrushSize = 1\nconst defaultMaterialBrushValue = 5\nconst defaultMaterialBrushSize = 5\n\nconst initialGridSizeLongest = 600\nconst initialCanvasSize: [number, number] = [window.innerWidth, window.innerHeight]\nconst initialGridSize: [number, number] = calculateGridSize(initialGridSizeLongest, initialCanvasSize)\n\nfunction calculateGridSize(gridSizeLongest: number, canvasSize: [number, number]): [number, number] {\n    const canvasAspect = canvasSize[0] / canvasSize[1]\n\n    return canvasSize[0] >= canvasSize[1] ?\n        [gridSizeLongest, Math.ceil(gridSizeLongest / canvasAspect)] :\n        [Math.ceil(gridSizeLongest * canvasAspect), gridSizeLongest]\n}\n\nconst makeRenderSimulatorCanvas = (g: GPU, canvasSize: [number, number]) => {\n    function getAt(field: number[][], shapeX: number, shapeY: number, x: number, y: number) {\n        if (x < 0 || x >= shapeX || y < 0 || y >= shapeY) {\n            return 0\n        }\n\n        return field[y][x]\n    }\n\n    return g.createKernel(function (electricFieldX: number[][], electricFieldY: number[][], electricFieldZ: number[][],\n        magneticFieldX: number[][], magneticFieldY: number[][], magneticFieldZ: number[][],\n        permittivity: number[][], permeability: number[][], gridSize: number[]) {\n        const gx = gridSize[0]\n        const gy = gridSize[1]\n\n        const x = gx * this.thread.x! / (this.output.x as number)\n        const y = gy * (1 - this.thread.y! / (this.output.y as number))\n\n        const eAA =\n            getAt(electricFieldX, gx, gy, x, y) * getAt(electricFieldX, gx, gy, x, y) +\n            getAt(electricFieldY, gx, gy, x, y) * getAt(electricFieldY, gx, gy, x, y) +\n            getAt(electricFieldZ, gx, gy, x, y) * getAt(electricFieldZ, gx, gy, x, y)\n\n        // Magnetic field is offset from electric field, so get value at +0.5 by interpolating 0 and 1\n        const magXAA = getAt(magneticFieldX, gx, gy, x - 0.5, y - 0.5)\n        const magYAA = getAt(magneticFieldY, gx, gy, x - 0.5, y - 0.5)\n        const magZAA = getAt(magneticFieldZ, gx, gy, x - 0.5, y - 0.5)\n\n        const mAA = magXAA * magXAA + magYAA * magYAA + magZAA * magZAA\n\n        const scale = 15\n\n        // Material constants are between 1 and 100, so take log10 ([0, 2]) and divide by 2 to get full range\n        const permittivityValue = 0.3 + 0.7 * Math.max(0, Math.min(1, (0.4342944819 * Math.log(getAt(permittivity, gx, gy, x, y))) / 2))\n        const permeabilityValue = 0.3 + 0.7 * Math.max(0, Math.min(1, (0.4342944819 * Math.log(getAt(permeability, gx, gy, x, y))) / 2))\n\n        const backgroundX = (Math.abs(x % 1 - 0.5) < 0.25 ? 1 : 0) * (Math.abs(y % 1 - 0.5) < 0.25 ? 1 : 0)\n        const backgroundY = 1 - backgroundX\n\n        this.color(Math.min(1, eAA / scale + 0.5 * backgroundX * permittivityValue), Math.min(1, eAA / scale + mAA / scale), Math.min(1, mAA / scale + 0.5 * backgroundY * permeabilityValue))\n    }).setOutput(canvasSize).setGraphical(true).setFunctions([getAt]).setWarnVarUsage(false).setTactic(\"performance\").setPrecision(\"unsigned\").setDynamicOutput(true).setDynamicArguments(true)\n}\n\nfunction clamp(min: number, max: number, value: number) {\n    return Math.max(min, Math.min(max, value))\n}\n\ntype LabeledSliderProps = {\n    label: string\n    value: number,\n    setValue: (value: number) => void\n    min: number\n    max: number\n    step: number\n}\n\nfunction LabeledSlider(props: LabeledSliderProps) {\n    return (\n        <div>\n            <label>{props.label}</label>\n            <div>\n                <input type=\"range\" min={props.min} max={props.max} value={props.value} step={props.step}\n                    onChange={e => props.setValue(parseFloat(e.target.value))} style={{ height: 10, width: \"100%\" }} />\n                <div style={{ textAlign: \"center\", lineHeight: 0.1, marginBottom: \"7px\" }}>\n                    {props.value}\n                </div>\n            </div>\n        </div>\n    )\n}\n\ntype OptionSelectorProps = {\n    options: string[]\n    selectedOption: number\n    setSelectedOption: (selectedOption: number) => void\n}\n\nfunction OptionSelector(props: OptionSelectorProps) {\n    return (\n        <div>\n            {props.options.map((option, optionIndex) =>\n                <button key={option} style={{\n                    boxSizing: \"border-box\",\n                    border: optionIndex === props.selectedOption ? \"4px solid rgb(0, 150, 255)\" : \"0\",\n                    height: \"30px\",\n                    margin: \"5px\",\n                    width: `${100 / props.options.length}%`, background: \"rgb(100, 100, 100)\", color: \"white\"\n                }}\n                    onClick={e => props.setSelectedOption(optionIndex)}>\n                    {option}\n                </button>\n            )}\n        </div>\n    )\n}\n\ntype ControlWidgerProps = {\n    simulator: FDTDSimulator | null\n\n    gridSize: [number, number]\n\n    gridSizeLongest: number\n    setGridSizeLongest: (gridSizeLongest: number) => void\n\n    brushSize: number,\n    setBrushSize: (brushSize: number) => void\n\n    brushValue: number\n    setBrushValue: (brushValue: number) => void\n\n    signalFrequency: number,\n    setSignalFrequency: (signalFrequency: number) => void\n\n    clickOption: number\n    setClickOption: (clickOption: number) => void\n\n    resetFields: () => void\n    resetMaterials: () => void\n}\n\nfunction ControlWidget(props: ControlWidgerProps) {\n    const [collapsed, setCollapsed] = useState(false)\n    const [simulatorMapUrl, setSimulatorMapUrl] = useState(\"\")\n\n    const simulator = props.simulator\n    const gridSize = props.gridSize\n\n    const onSaveClicked = useCallback(() => {\n        if (simulator) {\n            const simData = simulator.getData()\n\n            window.open(simulatorMapToImageUrl({\n                permittivity: simData.permittivity.values.toArray() as number[][],\n                permeability: simData.permeability.values.toArray() as number[][],\n                shape: [simData.permeability.shape[0], simData.permeability.shape[1]]\n            }))\n        }\n    }, [simulator])\n\n    const onLoadClicked = useCallback(() => {\n        if (simulator) {\n            imageUrlToSimulatorMap(simulatorMapUrl, [gridSize[0], gridSize[1]], map => {\n                if (simulator) {\n                    simulator.loadPermeability(map.permeability)\n                    simulator.loadPermittivity(map.permittivity)\n                }\n            })\n        }\n    }, [simulator, gridSize, simulatorMapUrl])\n\n    return (\n        <div style={{ userSelect: \"none\" }}>\n            <div style={{ textAlign: \"center\", position: \"absolute\", opacity: 0.8, background: \"rgba(33, 33, 33, 100)\", fontWeight: \"lighter\", color: \"white\" }}>\n                <button onClick={e => setCollapsed(!collapsed)} style={{ width: \"100%\", height: \"30px\", background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", fontWeight: \"bold\", cursor: \"pointer\" }}>\n                    Controls [{collapsed ? \"+\" : \"-\"}]\n                </button>\n                {!collapsed && (\n                    <div style={{ padding: \"10px\" }}>\n                        <div>\n                            <button onClick={onSaveClicked} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Save map</button>\n                        </div>\n                        <div>\n                            <input type=\"text\" onChange={e => setSimulatorMapUrl(e.target.value)} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }} />\n                            <button onClick={onLoadClicked} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Load map url</button>\n                        </div>\n                        <LabeledSlider label=\"Grid length\" value={props.gridSizeLongest} setValue={props.setGridSizeLongest} min={100} max={2000} step={100} />\n                        <LabeledSlider label=\"Brush size\" value={props.brushSize} setValue={props.setBrushSize} min={1} max={100} step={1} />\n                        <LabeledSlider label=\"Brush value\" value={props.brushValue} setValue={props.setBrushValue} min={1} max={100} step={1} />\n                        <LabeledSlider label=\"Signal frequency\" value={props.signalFrequency} setValue={props.setSignalFrequency} min={0} max={5} step={0.5} />\n                        <OptionSelector options={[\"ε brush\", \"µ brush\", \"Signal\"]} selectedOption={props.clickOption} setSelectedOption={props.setClickOption} />\n                        <div>\n                            <button onClick={props.resetFields} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Reset fields</button>\n                            <button onClick={props.resetMaterials} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Reset materials</button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default function () {\n    const drawCanvasRef = useRef<HTMLCanvasElement>(null)\n\n    const [canvasSize, setCanvasSize] = useState<[number, number]>(initialCanvasSize)\n    const [gridSizeLongest, setGridSizeLongest] = useState(initialGridSizeLongest)\n\n    useEffect(() => {\n        const adjustCanvasSize = () => setCanvasSize([window.innerWidth, window.innerHeight])\n\n        window.addEventListener(\"resize\", adjustCanvasSize)\n        return () => window.removeEventListener(\"resize\", adjustCanvasSize)\n    }, [])\n\n    const gridSize = useMemo<[number, number]>(() => calculateGridSize(gridSizeLongest, canvasSize), [canvasSize, gridSizeLongest])\n\n    // Would use useMemo for gpu here, but useMemo does not seem to work with ref dependencies.\n    const [gpu, setGpu] = useState<GPU | null>(null)\n    useEffect(() => {\n        if (drawCanvasRef.current) {\n            setGpu(new GPU({ mode: \"webgl\", canvas: drawCanvasRef.current }))\n        }\n    }, [drawCanvasRef])\n\n    const simulator = useMemo(() => gpu ? new FDTDSimulator(gpu, initialGridSize, cellSize) : null, [gpu])\n    const renderSim = useMemo(() => gpu ? makeRenderSimulatorCanvas(gpu, initialGridSize) : null, [gpu])\n\n    useEffect(() => {\n        if (renderSim) {\n            renderSim.setOutput(canvasSize)\n        }\n\n        if (simulator) {\n            simulator.setGridSize(gridSize)\n        }\n    }, [renderSim, simulator, canvasSize, gridSize])\n\n    const [brushSize, setBrushSize] = useState(defaultSignalBrushSize)\n    const [brushValue, setBrushValue] = useState(defaultSignalBrushValue)\n    const [signalFrequency, setSignalFrequency] = useState(1)\n    const [drawingPermeability, setDrawingPermeability] = useState(false)\n    const [drawingPermittivity, setDrawingPermittivity] = useState(false)\n    const [clickOption, setClickOption] = useState(2) // eps, mu, signal\n    const optionPermittivityBrush = 0\n    const optionPermeabilityBrush = 1\n    const optionSignal = 2\n\n    const [mousePosition, setMousePosition] = useState<[number, number] | null>(null)\n\n    const signalStrength = useRef(0)\n    const mouseDownPos = useRef<[number, number] | null>(null)\n\n    const simStep = useCallback(() => {\n        if (simulator) {\n            const simData = simulator.getData()\n\n            if (mouseDownPos.current !== null) {\n                const centerX = clamp(0, gridSize[0] - 1, Math.floor(gridSize[0] * mouseDownPos.current[0] / canvasSize[0]))\n                const centerY = clamp(0, gridSize[1] - 1, Math.floor(gridSize[1] * mouseDownPos.current[1] / canvasSize[1]))\n                const brushHalfSize = Math.round(brushSize / 2)\n\n                simulator.injectSignal([centerX, centerY], brushHalfSize, -brushValue * 1000 * Math.cos(2 * Math.PI * signalFrequency * simData.time), dt)\n            }\n\n            simulator.stepMagnetic(dt)\n            simulator.stepElectric(dt)\n        }\n    }, [simulator, canvasSize, gridSize, signalFrequency, brushValue, brushSize])\n\n    useEffect(() => {\n        const timer = setInterval(simStep, 1000 * dt)\n        return () => clearInterval(timer)\n    }, [simStep])\n\n    const drawStep = useCallback(() => {\n        if (simulator && renderSim) {\n            if (drawCanvasRef.current) {\n                drawCanvasRef.current.width = window.innerWidth\n                drawCanvasRef.current.height = window.innerHeight\n            }\n\n            const simData = simulator.getData()\n\n            if (simData.time > 0) {\n                renderSim(simData.electricFieldX.values, simData.electricFieldY.values, simData.electricFieldZ.values,\n                    simData.magneticFieldX.values, simData.magneticFieldY.values, simData.magneticFieldZ.values,\n                    simData.permittivity.values, simData.permeability.values, gridSize)\n            }\n        }\n    }, [simulator, renderSim, gridSize, drawCanvasRef])\n\n    useEffect(() => {\n        let stop = false\n        const drawIfNotStopped = () => {\n            if (!stop) {\n                drawStep()\n                requestAnimationFrame(drawIfNotStopped)\n            }\n        }\n\n        requestAnimationFrame(drawIfNotStopped)\n\n        return () => { stop = true }\n    }, [drawStep])\n\n    const changePermittivity = useCallback((canvasPos: [number, number]) => {\n        if (simulator) {\n            const centerX = Math.round(gridSize[0] * (canvasPos[0] / canvasSize[0]))\n            const centerY = Math.round(gridSize[1] * (canvasPos[1] / canvasSize[1]))\n            const brushHalfSize = Math.round(brushSize / 2)\n\n            simulator.drawPermittivity([centerX, centerY, 0], brushHalfSize, brushValue)\n        }\n    }, [simulator, gridSize, canvasSize, brushSize, brushValue])\n\n    const changePermeability = useCallback((canvasPos: [number, number]) => {\n        if (simulator) {\n            const centerX = Math.round(gridSize[0] * (canvasPos[0] / canvasSize[0]))\n            const centerY = Math.round(gridSize[1] * (canvasPos[1] / canvasSize[1]))\n            const brushHalfSize = Math.round(brushSize / 2)\n\n            simulator.drawPermeability([centerX, centerY, 0], brushHalfSize, brushValue)\n        }\n    }, [simulator, gridSize, canvasSize, brushSize, brushValue])\n\n    const resetMaterials = useCallback(() => {\n        if (simulator) {\n            simulator.resetMaterials()\n        }\n    }, [simulator])\n\n    const resetFields = useCallback(() => {\n        if (simulator) {\n            simulator.resetFields()\n            signalStrength.current = 0\n        }\n    }, [simulator])\n\n    const onInputDown = useCallback(([clientX, clientY]: [number, number]) => {\n        if (simulator) {\n            if (clickOption === optionSignal) {\n                mouseDownPos.current = [clientX, clientY]\n            } else if (clickOption === optionPermittivityBrush) {\n                changePermittivity([clientX, clientY])\n                setDrawingPermittivity(true)\n            } else if (clickOption === optionPermeabilityBrush) {\n                changePermeability([clientX, clientY])\n                setDrawingPermeability(true)\n            }\n        }\n    }, [simulator, changePermittivity, changePermeability, clickOption])\n\n    const onInputMove = useCallback(([clientX, clientY]: [number, number]) => {\n        if (simulator) {\n            if (clickOption === optionSignal && mouseDownPos.current !== null) {\n                mouseDownPos.current = [clientX, clientY]\n            }\n\n            if (drawingPermittivity) {\n                changePermittivity([clientX, clientY])\n            }\n\n            if (drawingPermeability) {\n                changePermeability([clientX, clientY])\n            }\n        }\n    }, [simulator, changePermittivity, changePermeability, clickOption, drawingPermeability, drawingPermittivity])\n\n    const onInputUp = useCallback(() => {\n        if (clickOption === optionSignal) {\n            mouseDownPos.current = null\n        } else if (clickOption === optionPermeabilityBrush) {\n            setDrawingPermeability(false)\n        } else if (clickOption === optionPermittivityBrush) {\n            setDrawingPermittivity(false)\n        }\n    }, [clickOption])\n\n    // Remember old brush values for signal and material\n    const [previousClickOption, setPreviousClickOption] = useState(optionSignal)\n    const [signalBrushSize, setSignalBrushSize] = useState(defaultSignalBrushSize)\n    const [signalBrushValue, setSignalBrushValue] = useState(defaultSignalBrushValue)\n    const [materialBrushSize, setMaterialBrushSize] = useState(defaultMaterialBrushSize)\n    const [materialBrushValue, setMaterialBrushValue] = useState(defaultMaterialBrushValue)\n    useEffect(() => {\n        if (clickOption === optionSignal && previousClickOption !== optionSignal) {\n            setMaterialBrushSize(brushSize)\n            setMaterialBrushValue(brushValue)\n            setBrushSize(signalBrushSize)\n            setBrushValue(signalBrushValue)\n        } else if (clickOption !== optionSignal && previousClickOption === optionSignal) {\n            setSignalBrushSize(brushSize)\n            setSignalBrushValue(brushValue)\n            setBrushSize(materialBrushSize)\n            setBrushValue(materialBrushValue)\n        }\n\n        setPreviousClickOption(clickOption)\n    }, [clickOption, previousClickOption, signalBrushSize, signalBrushValue, materialBrushSize, materialBrushValue, brushSize, brushValue])\n\n    return (\n        <div style={{ touchAction: \"none\" }}>\n            <canvas width={canvasSize[0]} height={canvasSize[1]} ref={drawCanvasRef} style={{ position: \"absolute\", userSelect: \"none\", top: 0, left: 0, width: canvasSize[0], height: canvasSize[1] }}\n                onMouseDown={e => onInputDown([e.clientX, e.clientY])}\n                onMouseMove={e => { setMousePosition([e.clientX, e.clientY]); onInputMove([e.clientX, e.clientY]) }}\n                onMouseUp={e => onInputUp()}\n                onTouchStart={e => { setMousePosition([e.touches[0].clientX, e.touches[0].clientY]); onInputDown([e.touches[0].clientX, e.touches[0].clientY]) }}\n                onTouchMove={e => { setMousePosition([e.touches[0].clientX, e.touches[0].clientY]); onInputMove([e.touches[0].clientX, e.touches[0].clientY]) }}\n                onTouchEnd={e => { setMousePosition(null); onInputUp() }}\n                onContextMenu={e => e.preventDefault()}\n            />\n\n            <div style={{ position: \"absolute\", bottom: 10, right: 10, userSelect: \"none\" }}>\n                <a href=\"https://github.com/RobinKa/maxwell-simulation\" rel=\"noopener noreferrer\" target=\"_blank\" style={{ fontWeight: \"lighter\", color: \"rgba(255, 255, 255, 100)\", textDecoration: \"none\" }}>Source code</a>\n            </div>\n\n            {mousePosition &&\n                <div style={{ position: \"absolute\", pointerEvents: \"none\", left: mousePosition[0] - (2 * (brushSize + 1)), top: mousePosition[1] - (2 * (brushSize + 1)), width: 4 * (brushSize + 1), height: 4 * (brushSize + 1), border: \"2px solid yellow\" }} />\n            }\n\n            <ControlWidget simulator={simulator} gridSize={gridSize}\n                gridSizeLongest={gridSizeLongest} setGridSizeLongest={setGridSizeLongest}\n                brushSize={brushSize} setBrushSize={setBrushSize}\n                brushValue={brushValue} setBrushValue={setBrushValue}\n                signalFrequency={signalFrequency} setSignalFrequency={setSignalFrequency}\n                clickOption={clickOption} setClickOption={setClickOption}\n                resetFields={resetFields} resetMaterials={resetMaterials}\n            />\n        </div>\n    )\n}\n","type SimulatorMap = {\r\n    permittivity: number[][]\r\n    permeability: number[][]\r\n    shape: [number, number]\r\n}\r\n\r\nexport function simulatorMapToImageUrl(simulatorMap: SimulatorMap): string {\r\n    const canvas = document.createElement(\"canvas\")\r\n    canvas.width = simulatorMap.shape[0]\r\n    canvas.height = simulatorMap.shape[1]\r\n\r\n    const permeability = simulatorMap.permeability\r\n    const permittivity = simulatorMap.permittivity\r\n\r\n    const ctx = canvas.getContext(\"2d\")!\r\n\r\n    ctx.fillStyle = \"rgb(1, 0, 1)\"\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n    ctx.fillStyle = \"rgb(0, 255, 0)\"\r\n    ctx.textAlign = \"center\"\r\n    ctx.textBaseline = \"middle\"\r\n    ctx.fillText(\"warlock.ai/maxwell\", canvas.width / 2, canvas.height / 2)\r\n\r\n    const canvasData = ctx.getImageData(0, 0, canvas.width, canvas.height)\r\n\r\n    for (let x = 0; x < canvas.width; x++) {\r\n        for (let y = 0; y < canvas.height; y++) {\r\n            canvasData.data[x * 4 + y * canvas.width * 4 + 0] = Math.round(permittivity[y][x]) // r\r\n            canvasData.data[x * 4 + y * canvas.width * 4 + 2] = Math.round(permeability[y][x]) // b\r\n            canvasData.data[x * 4 + y * canvas.width * 4 + 3] = 255 // a\r\n        }\r\n    }\r\n\r\n    ctx.putImageData(canvasData, 0, 0)\r\n\r\n    return canvas.toDataURL(\"image/png\")\r\n}\r\n\r\nexport function imageUrlToSimulatorMap(imageUrl: string, targetSize: [number, number], onLoaded: (simulatorMap: SimulatorMap) => void) {\r\n    const canvas = document.createElement(\"canvas\")\r\n    canvas.width = targetSize[0]\r\n    canvas.height = targetSize[1]\r\n    const image = new Image()\r\n    image.crossOrigin = \"anonymous\"\r\n    image.onload = e => {\r\n        const ctx = canvas.getContext(\"2d\")!\r\n\r\n        ctx.fillStyle = \"rgb(1, 0, 1)\"\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n        ctx.drawImage(image, 0, 0, image.width, image.height)\r\n\r\n        const map: SimulatorMap = { permeability: [], permittivity: [], shape: targetSize }\r\n\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data\r\n        for (let y = 0; y < targetSize[1]; y++) {\r\n            map.permittivity.push([])\r\n            map.permeability.push([])\r\n            for (let x = 0; x < targetSize[0]; x++) {\r\n                map.permittivity[y].push(Math.max(1, imageData[x * 4 + y * targetSize[0] * 4 + 0]))\r\n                map.permeability[y].push(Math.max(1, imageData[x * 4 + y * targetSize[0] * 4 + 2]))\r\n            }\r\n        }\r\n\r\n        onLoaded(map)\r\n    }\r\n    image.src = imageUrl\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}