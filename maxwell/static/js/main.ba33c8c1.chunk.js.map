{"version":3,"sources":["simulator.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["makeEmptyScalarField3D","shape","field","i","push","values","addScalarField3DValue","x","y","z","value","canvasSize","window","innerWidth","innerHeight","gridSize","Math","ceil","simulator","cellSize","data","gpu","updateMagneticX","updateMagneticY","updateMagneticZ","updateElectricX","updateElectricY","updateElectricZ","stepElectric","dt","elX","electricFieldX","elY","electricFieldY","elZ","electricFieldZ","magX","magneticFieldX","magY","magneticFieldY","magZ","magneticFieldZ","time","stepMagnetic","console","log","getData","this","permittivity","permeability","cellCount","getAt","shapeX","shapeY","shapeZ","getX","index","floor","getY","getZ","GPU","createKernel","fieldY","fieldZ","magFieldX","thread","gx","constants","gridSizeX","gy","gridSizeY","gz","gridSizeZ","output","setFunctions","fieldX","magFieldY","magFieldZ","elFieldX","elFieldY","elFieldZ","makeRenderSimulatorCanvas","g","ox","oy","xa","ya","xb","yb","alphaX","alphaY","eAA","eAB","eBA","eBB","magXAA","magYAA","magZAA","magXAB","magYAB","magZAB","magXBA","magYBA","magZBA","magXBB","magYBB","magZBB","mAA","mAB","mBA","mBB","eMixTop","eMixBottom","eMix","max","min","mMixTop","mMixBottom","mMix","color","sqrt","graphical","clamp","renderSim","Boolean","location","hostname","match","ReactDOM","render","drawCanvasRef","useRef","useState","mouseDownPos","setMouseDownPos","getSignal","useMemo","t","sin","PI","step","useCallback","stop","a","simData","current","sig","px","width","py","height","mode","canvas","Promise","resolve","setTimeout","loop","useEffect","ref","onMouseDown","e","clientX","clientY","onMouseMove","onMouseUp","_","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba33c8c1.chunk.js","sourcesContent":["import { GPU, IKernelRunShortcut } from \"gpu.js\"\r\n\r\nexport type FlatScalarField3D = {\r\n    values: number[]\r\n    shape: [number, number, number]\r\n}\r\n\r\nfunction makeEmptyScalarField3D(shape: [number, number, number]) {\r\n    const field = []\r\n    for (let i = 0; i < shape[0] * shape[1] * shape[2]; i++) {\r\n        field.push(0)\r\n    }\r\n    return { values: field, shape: shape }\r\n}\r\n\r\nexport function setScalarField3DValue(field: FlatScalarField3D, x: number, y: number, z: number, value: number) {\r\n    field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]] = value\r\n}\r\n\r\nexport function addScalarField3DValue(field: FlatScalarField3D, x: number, y: number, z: number, value: number) {\r\n    field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]] += value\r\n}\r\n\r\nexport function getScalarField3DValue(field: FlatScalarField3D, x: number, y: number, z: number) {\r\n    return field.values[x + y * field.shape[0] + z * field.shape[0] * field.shape[1]]\r\n}\r\n\r\nexport type SimulationData = {\r\n    time: number\r\n    electricFieldX: FlatScalarField3D\r\n    electricFieldY: FlatScalarField3D\r\n    electricFieldZ: FlatScalarField3D\r\n    magneticFieldX: FlatScalarField3D\r\n    magneticFieldY: FlatScalarField3D\r\n    magneticFieldZ: FlatScalarField3D\r\n    permittivity: FlatScalarField3D\r\n    permeability: FlatScalarField3D\r\n}\r\n\r\nexport interface Simulator {\r\n    stepElectric: (dt: number) => void\r\n    stepMagnetic: (dt: number) => void\r\n    getData: () => SimulationData\r\n}\r\n\r\nexport class FDTDSimulator implements Simulator {\r\n    private data: SimulationData\r\n\r\n    private gpu: GPU\r\n    private updateMagneticX: IKernelRunShortcut\r\n    private updateMagneticY: IKernelRunShortcut\r\n    private updateMagneticZ: IKernelRunShortcut\r\n    private updateElectricX: IKernelRunShortcut\r\n    private updateElectricY: IKernelRunShortcut\r\n    private updateElectricZ: IKernelRunShortcut\r\n\r\n    constructor(gridSize: [number, number, number], cellSize: number) {\r\n        this.data = {\r\n            time: 0,\r\n            electricFieldX: makeEmptyScalarField3D(gridSize),\r\n            electricFieldY: makeEmptyScalarField3D(gridSize),\r\n            electricFieldZ: makeEmptyScalarField3D(gridSize),\r\n            magneticFieldX: makeEmptyScalarField3D(gridSize),\r\n            magneticFieldY: makeEmptyScalarField3D(gridSize),\r\n            magneticFieldZ: makeEmptyScalarField3D(gridSize),\r\n            permittivity: makeEmptyScalarField3D(gridSize),\r\n            permeability: makeEmptyScalarField3D(gridSize),\r\n        }\r\n\r\n        const cellCount = gridSize[0] * gridSize[1] * gridSize[2]\r\n\r\n        this.gpu = new GPU()\r\n\r\n        function getAt(field: number[], shapeX: number, shapeY: number, shapeZ: number, x: number, y: number, z: number) {\r\n            if (x < 0 || x >= shapeX || y < 0 || y >= shapeY || z < 0 || z >= shapeZ) {\r\n                return 0\r\n            }\r\n\r\n            return field[x + y * shapeX + z * shapeX * shapeZ]\r\n        }\r\n\r\n        function getX(index: number, shapeX: number, shapeY: number, shapeZ: number) {\r\n            return Math.floor(index % shapeX)\r\n        }\r\n\r\n        function getY(index: number, shapeX: number, shapeY: number, shapeZ: number) {\r\n            return Math.floor(index / shapeX) % shapeY\r\n        }\r\n\r\n        function getZ(index: number, shapeX: number, shapeY: number, shapeZ: number) {\r\n            return Math.floor(index / (shapeX * shapeY)) % shapeZ\r\n        }\r\n\r\n        this.updateMagneticX = this.gpu.createKernel(function (fieldY: number[], fieldZ: number[], magFieldX: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx, gy, gz)\r\n            const y = getY(index, gx, gy, gz)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(magFieldX, gx, gy, gz, x, y, z) - (dt / cellSize) * (\r\n                (getAt(fieldZ, gx, gy, gz, x, y + 1, z) - getAt(fieldZ, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n\r\n\r\n        this.updateMagneticY = this.gpu.createKernel(function (fieldX: number[], fieldZ: number[], magFieldY: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx, gy, gz)\r\n            const y = getY(index, gx, gy, gz)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(magFieldY, gx, gy, gz, x, y, z) - (dt / cellSize) * (\r\n                -(getAt(fieldZ, gx, gy, gz, x + 1, y, z) - getAt(fieldZ, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n\r\n        this.updateMagneticZ = this.gpu.createKernel(function (fieldX: number[], fieldY: number[], magFieldZ: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx, gy, gz)\r\n            const y = getY(index, gx, gy, gz)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(magFieldZ, gx, gy, gz, x, y, z) - (dt / cellSize) * (\r\n                (getAt(fieldY, gx, gy, gz, x + 1, y, z) - getAt(fieldY, gx, gy, gz, x, y, z)) -\r\n                (getAt(fieldX, gx, gy, gz, x, y + 1, z) - getAt(fieldX, gx, gy, gz, x, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n\r\n        this.updateElectricX = this.gpu.createKernel(function (fieldY: number[], fieldZ: number[], elFieldX: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx, gy, gz)\r\n            const y = getY(index, gx, gy, gz)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(elFieldX, gx, gy, gz, x, y, z) + (dt / cellSize) * (\r\n                (getAt(fieldZ, gx, gy, gz, x, y, z) - getAt(fieldZ, gx, gy, gz, x, y - 1, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n\r\n        this.updateElectricY = this.gpu.createKernel(function (fieldX: number[], fieldZ: number[], elFieldY: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx, gy, gz)\r\n            const y = getY(index, gx, gy, gz)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(elFieldY, gx, gy, gz, x, y, z) + (dt / cellSize) * (\r\n                -(getAt(fieldZ, gx, gy, gz, x, y, z) - getAt(fieldZ, gx, gy, gz, x - 1, y, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n\r\n        this.updateElectricZ = this.gpu.createKernel(function (fieldX: number[], fieldY: number[], elFieldZ: number[], dt: number) {\r\n            const index = Math.floor(this.thread.x)\r\n\r\n            const gx = this.constants.gridSizeX as number\r\n            const gy = this.constants.gridSizeY as number\r\n            const gz = this.constants.gridSizeZ as number\r\n            const cellSize = this.constants.cellSize as number\r\n\r\n            const x = getX(index, gx, gy, gz)\r\n            const y = getY(index, gx, gy, gz)\r\n            const z = getZ(index, gx, gy, gz)\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(elFieldZ, gx, gy, gz, x, y, z) + (dt / cellSize) * (\r\n                (getAt(fieldY, gx, gy, gz, x, y, z) - getAt(fieldY, gx, gy, gz, x - 1, y, z)) -\r\n                (getAt(fieldX, gx, gy, gz, x, y, z) - getAt(fieldX, gx, gy, gz, x, y - 1, z)))\r\n        }, {\r\n            output: [cellCount],\r\n            constants: { cellSize: cellSize, gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] }\r\n        }).setFunctions([getX, getY, getZ, getAt])\r\n    }\r\n\r\n    stepElectric = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n\r\n        // d/dt E(x, t) = (curl B(x, t))/(µε)\r\n        this.data.electricFieldX.values = this.updateElectricX(magY, magZ, elX, dt) as number[]\r\n        this.data.electricFieldY.values = this.updateElectricY(magX, magZ, elY, dt) as number[]\r\n        this.data.electricFieldZ.values = this.updateElectricZ(magX, magY, elZ, dt) as number[]\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    stepMagnetic = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n\r\n        console.log((this.updateMagneticX(elY, elZ, magX, dt) as number[])[100])\r\n\r\n        // d/dt B(x, t) = -curl E(x, t)\r\n        this.data.magneticFieldX.values = this.updateMagneticX(elY, elZ, magX, dt) as number[]\r\n        this.data.magneticFieldY.values = this.updateMagneticY(elX, elZ, magY, dt) as number[]\r\n        this.data.magneticFieldZ.values = this.updateMagneticZ(elX, elY, magZ, dt) as number[]\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    getData = () => this.data\r\n}","import React, { useRef, useCallback, useEffect, useMemo, useState } from 'react'\nimport { GPU } from \"gpu.js\"\nimport { FDTDSimulator, addScalarField3DValue } from \"./simulator\"\n\nconst canvasSize = [window.innerWidth, window.innerHeight]\n\nconst dt = 0.01\nconst gridSizeX = 400\nconst gridSize: [number, number, number] = [gridSizeX, Math.ceil(gridSizeX / canvasSize[0] * canvasSize[1]), 1]\nconst cellSize = 0.05\n\nconst simulator = new FDTDSimulator(gridSize, cellSize)\n\nconst makeRenderSimulatorCanvas = (g: GPU) => {\n    function getAt(field: number[], shapeX: number, shapeY: number, shapeZ: number, x: number, y: number, z: number) {\n        if (x < 0 || x >= shapeX || y < 0 || y >= shapeY || z < 0 || z >= shapeZ) {\n            return 0\n        }\n\n        return field[x + y * shapeX + z * shapeX * shapeZ]\n    }\n\n    return g.createKernel(function (electricFieldX: number[], electricFieldY: number[], electricFieldZ: number[], magneticFieldX: number[], magneticFieldY: number[], magneticFieldZ: number[]) {\n        const gx = this.constants.gridSizeX as number\n        const gy = this.constants.gridSizeY as number\n        const gz = this.constants.gridSizeZ as number\n\n        const ox = this.output.x as number\n        const oy = this.output.y as number\n        \n        const x = gx * this.thread.x! / ox\n        const y = gy * (1 - this.thread.y! / oy)\n        const xa = Math.floor(x)\n        const ya = Math.floor(y)\n        const xb = xa + 1\n        const yb = ya + 1\n\n        const alphaX = xb === xa ? 0 : (x - xa) / (xb - xa)\n        const alphaY = yb === ya ? 0 : (y - ya) / (yb - ya)\n\n        const z = Math.floor(gz / 2)\n\n        const eAA = getAt(electricFieldX, gx, gy, gz, xa, ya, z) * getAt(electricFieldX, gx, gy, gz, xa, ya, z) + getAt(electricFieldY, gx, gy, gz, xa, ya, z) * getAt(electricFieldY, gx, gy, gz, xa, ya, z) + getAt(electricFieldZ, gx, gy, gz, xa, ya, z) * getAt(electricFieldZ, gx, gy, gz, xa, ya, z)\n        const eAB = getAt(electricFieldX, gx, gy, gz, xa, yb, z) * getAt(electricFieldX, gx, gy, gz, xa, yb, z) + getAt(electricFieldY, gx, gy, gz, xa, yb, z) * getAt(electricFieldY, gx, gy, gz, xa, yb, z) + getAt(electricFieldZ, gx, gy, gz, xa, yb, z) * getAt(electricFieldZ, gx, gy, gz, xa, yb, z)\n        const eBA = getAt(electricFieldX, gx, gy, gz, xb, ya, z) * getAt(electricFieldX, gx, gy, gz, xb, ya, z) + getAt(electricFieldY, gx, gy, gz, xb, ya, z) * getAt(electricFieldY, gx, gy, gz, xb, ya, z) + getAt(electricFieldZ, gx, gy, gz, xb, ya, z) * getAt(electricFieldZ, gx, gy, gz, xb, ya, z)\n        const eBB = getAt(electricFieldX, gx, gy, gz, xb, yb, z) * getAt(electricFieldX, gx, gy, gz, xb, yb, z) + getAt(electricFieldY, gx, gy, gz, xb, yb, z) * getAt(electricFieldY, gx, gy, gz, xb, yb, z) + getAt(electricFieldZ, gx, gy, gz, xb, yb, z) * getAt(electricFieldZ, gx, gy, gz, xb, yb, z)\n\n        // Magnetic field is offset from electric field, so get value at +0.5 by interpolating 0 and 1\n        const magXAA = (getAt(magneticFieldX, gx, gy, gz, xa, ya, z) + getAt(magneticFieldX, gx, gy, gz, xa+1, ya+1, z)) / 2\n        const magYAA = (getAt(magneticFieldY, gx, gy, gz, xa, ya, z) + getAt(magneticFieldY, gx, gy, gz, xa+1, ya+1, z)) / 2\n        const magZAA = (getAt(magneticFieldZ, gx, gy, gz, xa, ya, z) + getAt(magneticFieldZ, gx, gy, gz, xa+1, ya+1, z)) / 2\n        const magXAB = (getAt(magneticFieldX, gx, gy, gz, xa, yb, z) + getAt(magneticFieldX, gx, gy, gz, xa+1, yb+1, z)) / 2\n        const magYAB = (getAt(magneticFieldY, gx, gy, gz, xa, yb, z) + getAt(magneticFieldY, gx, gy, gz, xa+1, yb+1, z)) / 2\n        const magZAB = (getAt(magneticFieldZ, gx, gy, gz, xa, yb, z) + getAt(magneticFieldZ, gx, gy, gz, xa+1, yb+1, z)) / 2\n        const magXBA = (getAt(magneticFieldX, gx, gy, gz, xb, ya, z) + getAt(magneticFieldX, gx, gy, gz, xb+1, ya+1, z)) / 2\n        const magYBA = (getAt(magneticFieldY, gx, gy, gz, xb, ya, z) + getAt(magneticFieldY, gx, gy, gz, xb+1, ya+1, z)) / 2\n        const magZBA = (getAt(magneticFieldZ, gx, gy, gz, xb, ya, z) + getAt(magneticFieldZ, gx, gy, gz, xb+1, ya+1, z)) / 2\n        const magXBB = (getAt(magneticFieldX, gx, gy, gz, xb, yb, z) + getAt(magneticFieldX, gx, gy, gz, xb+1, yb+1, z)) / 2\n        const magYBB = (getAt(magneticFieldY, gx, gy, gz, xb, yb, z) + getAt(magneticFieldY, gx, gy, gz, xb+1, yb+1, z)) / 2\n        const magZBB = (getAt(magneticFieldZ, gx, gy, gz, xb, yb, z) + getAt(magneticFieldZ, gx, gy, gz, xb+1, yb+1, z)) / 2\n\n        const mAA = magXAA * magXAA + magYAA * magYAA + magZAA * magZAA\n        const mAB = magXAB * magXAB + magYAB * magYAB + magZAB * magZAB\n        const mBA = magXBA * magXBA + magYBA * magYBA + magZBA * magZBA\n        const mBB = magXBB * magXBB + magYBB * magYBB + magZBB * magZBB\n\n        const scale = 300\n\n        const eMixTop = alphaX * eBA + (1 - alphaX) * eAA\n        const eMixBottom = alphaX * eBB + (1 - alphaX) * eAB\n        const eMix = Math.max(0, Math.min(scale, alphaY * eMixBottom + (1 - alphaY) * eMixTop))\n\n        const mMixTop = alphaX * mBA + (1 - alphaX) * mAA\n        const mMixBottom = alphaX * mBB + (1 - alphaX) * mAB\n\n        const mMix = Math.max(0, Math.min(scale, alphaY * mMixBottom + (1 - alphaY) * mMixTop))\n\n        this.color(Math.sqrt(eMix / scale), Math.sqrt(eMix / scale + mMix / scale), Math.sqrt(mMix / scale))\n        //this.color(eAA, 0, 0)\n        //this.color(alphaX, alphaY, 0)\n        //this.color(getAt(electricFieldZ, gx, gy, gz, xa, ya, z) * getAt(electricFieldZ, gx, gy, gz, xa, ya, z), 0, 0)\n    }, {\n        output: [canvasSize[0], canvasSize[1]],\n        constants: { gridSizeX: gridSize[0], gridSizeY: gridSize[1], gridSizeZ: gridSize[2] },\n        graphical: true \n    }).setFunctions([getAt])\n}\n\nfunction clamp(min: number, max: number, value: number) {\n    return Math.max(min, Math.min(max, value))\n}\n\nlet renderSim: any = null\n\nexport default function () {\n    const drawCanvasRef = useRef<HTMLCanvasElement>(null)\n\n    const [mouseDownPos, setMouseDownPos] = useState<[number, number] | null>(null)\n\n    const getSignal = useMemo(() => {\n        return (t: number) => {\n            return [0, 0, Math.sin(2 * Math.PI * t) * 500 * 60]\n        }\n    }, [])\n\n    const step = useCallback(() => {\n        let stop = false\n\n        const loop = (async () => {\n            //await new Promise(resolve => setTimeout(resolve, 100))\n\n            while (!stop) {\n                const simData = simulator.getData()\n\n                console.log(\"iter\")\n\n                if (mouseDownPos !== null && drawCanvasRef.current) {\n                    const sig = getSignal(simData.time)\n\n                    const px = clamp(0, simData.electricFieldX.shape[0] - 1, Math.floor(simData.electricFieldX.shape[0] * mouseDownPos[0] / drawCanvasRef.current.width))\n                    const py = clamp(0, simData.electricFieldX.shape[1] - 1, Math.floor(simData.electricFieldX.shape[1] * mouseDownPos[1] / drawCanvasRef.current.height))\n\n                    for (let z = 0; z < simData.electricFieldX.shape[2]; z++) {\n                        addScalarField3DValue(simData.electricFieldX, px, py, z, sig[0] * dt / 2)\n                        addScalarField3DValue(simData.electricFieldY, px, py, z, sig[1] * dt / 2)\n                        addScalarField3DValue(simData.electricFieldZ, px, py, z, sig[2] * dt / 2)\n                    }\n                }\n\n                simulator.stepMagnetic(dt)\n                simulator.stepElectric(dt)\n\n                if (renderSim === null && drawCanvasRef.current !== null) {\n                    renderSim = makeRenderSimulatorCanvas(new GPU({ mode: \"webgl2\", canvas: drawCanvasRef.current }))\n                }\n\n                if (renderSim !== null) {\n                    renderSim(simData.electricFieldX.values, simData.electricFieldY.values, simData.electricFieldZ.values,\n                        simData.magneticFieldX.values, simData.magneticFieldY.values, simData.magneticFieldZ.values)\n                }\n\n                await new Promise(resolve => setTimeout(resolve, 1))\n            }\n        })\n\n        loop()\n\n        return () => { stop = true }\n    }, [getSignal, mouseDownPos])\n\n    useEffect(step, [step])\n\n    return (\n        <canvas width={canvasSize[0]} height={canvasSize[1]} ref={drawCanvasRef}\n            onMouseDown={e => setMouseDownPos([e.clientX, e.clientY])}\n            onMouseMove={e => { if (mouseDownPos !== null) setMouseDownPos([e.clientX, e.clientY]) }}\n            onMouseUp={_ => setMouseDownPos(null)} />\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}