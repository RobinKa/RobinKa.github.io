{"version":3,"sources":["simulator.ts","App.tsx","util.ts","serviceWorker.ts","index.tsx"],"names":["memoByName","makeNew","memoized","name","FDTDSimulator","gpu","gridSize","cellSize","getAt","field","shapeX","shapeY","x","y","data","updateMagneticX","updateMagneticY","updateMagneticZ","updateElectricX","updateElectricY","updateElectricZ","injectSource","decaySource","makeFieldTexture","copyTexture","drawOnTexture","stepElectric","dt","elX","electricFieldX","values","elY","electricFieldY","elZ","electricFieldZ","magX","magneticFieldX","magY","magneticFieldY","magZ","magneticFieldZ","perm","permittivity","injectedElZ","electricSourceFieldZ","time","stepMagnetic","permeability","resetFields","resetMaterials","drawPermeability","pos","size","value","drawPermittivity","injectSignal","loadPermittivity","loadPermeability","getData","this","createKernel","setOutput","setPipeline","setTactic","texture","thread","shape","keep","oldValue","output","Math","max","abs","constants","setFunctions","setWarnVarUsage","source","gx","gy","pow","fieldY","fieldZ","magFieldX","cs","fieldX","magFieldY","magFieldZ","elFieldX","elFieldY","elFieldZ","canvasSize","window","innerWidth","innerHeight","canvasAspect","ceil","simulator","clamp","min","LabeledSlider","props","label","type","step","onChange","e","setValue","parseFloat","target","style","height","width","textAlign","lineHeight","marginBottom","OptionSelector","options","map","option","optionIndex","key","boxSizing","border","selectedOption","margin","length","background","color","onClick","setSelectedOption","ControlWidget","useState","collapsed","setCollapsed","simulatorMapUrl","setSimulatorMapUrl","onSaveClicked","useCallback","simData","open","simulatorMap","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","textBaseline","fillText","canvasData","getImageData","round","putImageData","toDataURL","simulatorMapToImageUrl","toArray","onLoadClicked","imageUrl","targetSize","onLoaded","image","Image","crossOrigin","onload","drawImage","imageData","push","src","imageUrlToSimulatorMap","userSelect","position","opacity","fontWeight","cursor","padding","brushSize","setBrushSize","brushValue","setBrushValue","signalFrequency","setSignalFrequency","clickOption","setClickOption","Boolean","location","hostname","match","ReactDOM","render","drawingPermeability","setDrawingPermeability","drawingPermittivity","setDrawingPermittivity","mousePosition","setMousePosition","signalStrength","useRef","mouseDownPos","renderSim","drawCanvasRef","simStep","current","centerX","floor","centerY","brushHalfSize","cos","PI","useEffect","timer","setInterval","clearInterval","startLoop","stop","a","resolveDrawPromise","resolve","requestAnimationFrame","Promise","loop","Error","GPU","mode","g","gridSizeX","gridSizeY","xa","ya","eAA","magXAA","magYAA","magZAA","mAA","permittivityValue","log","permeabilityValue","backgroundX","backgroundY","graphical","setPrecision","makeRenderSimulatorCanvas","changePermittivity","canvasPos","changePermeability","onInputDown","clientX","clientY","onInputMove","onInputUp","previousClickOption","setPreviousClickOption","signalBrushSize","setSignalBrushSize","signalBrushValue","setSignalBrushValue","materialBrushSize","setMaterialBrushSize","materialBrushValue","setMaterialBrushValue","ref","onMouseDown","onMouseMove","onMouseUp","onTouchStart","touches","onTouchMove","onTouchEnd","onContextMenu","preventDefault","bottom","right","href","rel","textDecoration","pointerEvents","left","top","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd2f5001.chunk.js","sourcesContent":["import { GPU, IKernelRunShortcut, Texture } from \"gpu.js\"\r\n\r\nexport type FlatScalarField3D = {\r\n    values: Texture\r\n    shape: [number, number]\r\n}\r\n\r\nexport type SimulationData = {\r\n    time: number\r\n    electricFieldX: FlatScalarField3D\r\n    electricFieldY: FlatScalarField3D\r\n    electricFieldZ: FlatScalarField3D\r\n    magneticFieldX: FlatScalarField3D\r\n    magneticFieldY: FlatScalarField3D\r\n    magneticFieldZ: FlatScalarField3D\r\n\r\n    permittivity: FlatScalarField3D\r\n    permeability: FlatScalarField3D\r\n\r\n    electricSourceFieldZ: FlatScalarField3D\r\n}\r\n\r\nexport interface Simulator {\r\n    stepElectric: (dt: number) => void\r\n    stepMagnetic: (dt: number) => void\r\n    resetFields: () => void\r\n    resetMaterials: () => void\r\n    getData: () => SimulationData\r\n}\r\n\r\nfunction memoByName<T>(makeNew: () => T) {\r\n    const memoized: { [name: string]: T } = {}\r\n\r\n    return (name: string) => {\r\n        if (!memoized[name]) {\r\n            memoized[name] = makeNew()\r\n        }\r\n        return memoized[name]\r\n    }\r\n}\r\n\r\nexport class FDTDSimulator implements Simulator {\r\n    private data: SimulationData\r\n\r\n    private updateMagneticX: IKernelRunShortcut\r\n    private updateMagneticY: IKernelRunShortcut\r\n    private updateMagneticZ: IKernelRunShortcut\r\n    private updateElectricX: IKernelRunShortcut\r\n    private updateElectricY: IKernelRunShortcut\r\n    private updateElectricZ: IKernelRunShortcut\r\n\r\n    private injectSource: IKernelRunShortcut\r\n    private decaySource: IKernelRunShortcut\r\n\r\n    private makeFieldTexture: (name: string) => IKernelRunShortcut\r\n    private copyTexture: (name: string) => IKernelRunShortcut\r\n\r\n    private drawOnTexture: (name: string) => IKernelRunShortcut\r\n\r\n    constructor(readonly gpu: GPU, readonly gridSize: [number, number], readonly cellSize: number) {\r\n        this.makeFieldTexture = memoByName(() => this.gpu.createKernel(function (value: number) {\r\n            return value\r\n        }).setOutput([gridSize[0], gridSize[1]]).setPipeline(true).setTactic(\"performance\"))\r\n\r\n        this.copyTexture = memoByName(() => this.gpu.createKernel(function (texture: number[][]) {\r\n            return texture[this.thread.y!][this.thread.x]\r\n        }).setOutput([gridSize[0], gridSize[1]]).setPipeline(true).setTactic(\"performance\"))\r\n\r\n        this.data = {\r\n            time: 0,\r\n            electricFieldX: { values: this.makeFieldTexture(\"ex\")(0) as Texture, shape: gridSize },\r\n            electricFieldY: { values: this.makeFieldTexture(\"ey\")(0) as Texture, shape: gridSize },\r\n            electricFieldZ: { values: this.makeFieldTexture(\"ez\")(0) as Texture, shape: gridSize },\r\n            magneticFieldX: { values: this.makeFieldTexture(\"mx\")(0) as Texture, shape: gridSize },\r\n            magneticFieldY: { values: this.makeFieldTexture(\"my\")(0) as Texture, shape: gridSize },\r\n            magneticFieldZ: { values: this.makeFieldTexture(\"mz\")(0) as Texture, shape: gridSize },\r\n            electricSourceFieldZ: { values: this.makeFieldTexture(\"esz\")(0) as Texture, shape: gridSize },\r\n            permittivity: { values: this.makeFieldTexture(\"permittivity\")(1) as Texture, shape: gridSize },\r\n            permeability: { values: this.makeFieldTexture(\"permeability\")(1) as Texture, shape: gridSize },\r\n        }\r\n\r\n        function getAt(field: number[][], shapeX: number, shapeY: number, x: number, y: number) {\r\n            if (x < 0 || x >= shapeX || y < 0 || y >= shapeY) {\r\n                return 0\r\n            }\r\n\r\n            return field[y][x]\r\n        }\r\n\r\n        this.drawOnTexture = memoByName(() => this.gpu.createKernel(function (pos: number[], size: number, value: number, keep: number, texture: number[][]) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n\r\n            const oldValue = getAt(texture, gx, gy, x, y)\r\n\r\n            const within = Math.max(Math.abs(pos[0] - x), Math.abs(pos[1] - y)) < size\r\n\r\n            return within ? value + keep * oldValue : oldValue\r\n        }, {\r\n            output: [gridSize[0], gridSize[1]],\r\n            constants: { cellSize: cellSize },\r\n        }).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\"))\r\n\r\n        this.injectSource = this.gpu.createKernel(function (source: number[][], field: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n\r\n            return getAt(field, gx, gy, x, y) + getAt(source, gx, gy, x, y) * dt\r\n        }, {\r\n            output: [gridSize[0], gridSize[1]],\r\n        }).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\")\r\n\r\n        this.decaySource = this.gpu.createKernel(function (source: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n\r\n            return getAt(source, gx, gy, x, y) * Math.pow(0.1, dt)\r\n        }, {\r\n            output: [gridSize[0], gridSize[1]],\r\n        }).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\")\r\n\r\n        this.updateMagneticX = this.gpu.createKernel(function (fieldY: number[][], fieldZ: number[][], permeability: number[][], magFieldX: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(magFieldX, gx, gy, x, y) - (dt / (getAt(permeability, gx, gy, x, y) * cs)) * (\r\n                (getAt(fieldZ, gx, gy, x, y + 1) - getAt(fieldZ, gx, gy, x, y)))\r\n        }, {\r\n            output: [gridSize[0], gridSize[1]],\r\n            constants: { cellSize: cellSize },\r\n        }).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\")\r\n\r\n        this.updateMagneticY = this.gpu.createKernel(function (fieldX: number[][], fieldZ: number[][], permeability: number[][], magFieldY: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(magFieldY, gx, gy, x, y) - (dt / (getAt(permeability, gx, gy, x, y) * cs)) * (\r\n                -(getAt(fieldZ, gx, gy, x + 1, y) - getAt(fieldZ, gx, gy, x, y)))\r\n        }, {\r\n            output: [gridSize[0], gridSize[1]],\r\n            constants: { cellSize: cellSize },\r\n        }).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\")\r\n\r\n        this.updateMagneticZ = this.gpu.createKernel(function (fieldX: number[][], fieldY: number[][], permeability: number[][], magFieldZ: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(magFieldZ, gx, gy, x, y) - (dt / (getAt(permeability, gx, gy, x, y) * cs)) * (\r\n                (getAt(fieldY, gx, gy, x + 1, y) - getAt(fieldY, gx, gy, x, y)) -\r\n                (getAt(fieldX, gx, gy, x, y + 1) - getAt(fieldX, gx, gy, x, y)))\r\n        }, {\r\n            output: [gridSize[0], gridSize[1]],\r\n            constants: { cellSize: cellSize },\r\n        }).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\")\r\n\r\n        this.updateElectricX = this.gpu.createKernel(function (fieldY: number[][], fieldZ: number[][], permittivity: number[][], elFieldX: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_Y Z - d_Z Y\r\n            return getAt(elFieldX, gx, gy, x, y) + (dt / (getAt(permittivity, gx, gy, x, y) * cs)) * (\r\n                (getAt(fieldZ, gx, gy, x, y) - getAt(fieldZ, gx, gy, x, y - 1)))\r\n        }, {\r\n            output: [gridSize[0], gridSize[1]],\r\n            constants: { cellSize: cellSize },\r\n        }).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\")\r\n\r\n        this.updateElectricY = this.gpu.createKernel(function (fieldX: number[][], fieldZ: number[][], permittivity: number[][], elFieldY: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_Z X - d_X Z\r\n            return getAt(elFieldY, gx, gy, x, y) + (dt / (getAt(permittivity, gx, gy, x, y) * cs)) * (\r\n                -(getAt(fieldZ, gx, gy, x, y) - getAt(fieldZ, gx, gy, x - 1, y)))\r\n        }, {\r\n            output: [gridSize[0], gridSize[1]],\r\n            constants: { cellSize: cellSize },\r\n        }).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\")\r\n\r\n        this.updateElectricZ = this.gpu.createKernel(function (fieldX: number[][], fieldY: number[][], permittivity: number[][], elFieldZ: number[][], dt: number) {\r\n            const x = this.thread.x as number\r\n            const y = this.thread.y! as number\r\n            const gx = this.output.x as number\r\n            const gy = this.output.y as number\r\n            const cs = this.constants.cellSize as number\r\n\r\n            // d_X Y - d_Y X\r\n            return getAt(elFieldZ, gx, gy, x, y) + (dt / (getAt(permittivity, gx, gy, x, y) * cs)) * (\r\n                (getAt(fieldY, gx, gy, x, y) - getAt(fieldY, gx, gy, x - 1, y)) -\r\n                (getAt(fieldX, gx, gy, x, y) - getAt(fieldX, gx, gy, x, y - 1)))\r\n        }, {\r\n            output: [gridSize[0], gridSize[1]],\r\n            constants: { cellSize: cellSize },\r\n        }).setFunctions([getAt]).setWarnVarUsage(false).setPipeline(true).setTactic(\"performance\")\r\n    }\r\n\r\n    stepElectric = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n        const perm = this.data.permittivity.values\r\n\r\n        const injectedElZ = this.injectSource(this.data.electricSourceFieldZ.values, elZ, dt) as Texture\r\n        this.data.electricSourceFieldZ.values = this.decaySource(this.copyTexture(\"esz\")(this.data.electricSourceFieldZ.values), dt) as Texture\r\n\r\n        // d/dt E(x, t) = (curl B(x, t))/(µε)\r\n        this.data.electricFieldX.values = this.updateElectricX(magY, magZ, perm, this.copyTexture(\"ex\")(elX), dt) as Texture\r\n        this.data.electricFieldY.values = this.updateElectricY(magX, magZ, perm, this.copyTexture(\"ey\")(elY), dt) as Texture\r\n        this.data.electricFieldZ.values = this.updateElectricZ(magX, magY, perm, injectedElZ, dt) as Texture\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    stepMagnetic = (dt: number) => {\r\n        const elX = this.data.electricFieldX.values\r\n        const elY = this.data.electricFieldY.values\r\n        const elZ = this.data.electricFieldZ.values\r\n        const magX = this.data.magneticFieldX.values\r\n        const magY = this.data.magneticFieldY.values\r\n        const magZ = this.data.magneticFieldZ.values\r\n        const perm = this.data.permeability.values\r\n\r\n        // d/dt B(x, t) = -curl E(x, t)\r\n        this.data.magneticFieldX.values = this.updateMagneticX(elY, elZ, perm, this.copyTexture(\"mx\")(magX), dt) as Texture\r\n        this.data.magneticFieldY.values = this.updateMagneticY(elX, elZ, perm, this.copyTexture(\"my\")(magY), dt) as Texture\r\n        this.data.magneticFieldZ.values = this.updateMagneticZ(elX, elY, perm, this.copyTexture(\"mz\")(magZ), dt) as Texture\r\n\r\n        this.data.time += dt / 2\r\n    }\r\n\r\n    resetFields = () => {\r\n        this.data.time = 0\r\n        this.data.electricFieldX.values = this.makeFieldTexture(\"ex\")(0) as Texture\r\n        this.data.electricFieldY.values = this.makeFieldTexture(\"ey\")(0) as Texture\r\n        this.data.electricFieldZ.values = this.makeFieldTexture(\"ez\")(0) as Texture\r\n        this.data.magneticFieldX.values = this.makeFieldTexture(\"mx\")(0) as Texture\r\n        this.data.magneticFieldY.values = this.makeFieldTexture(\"my\")(0) as Texture\r\n        this.data.magneticFieldZ.values = this.makeFieldTexture(\"mz\")(0) as Texture\r\n        this.data.electricSourceFieldZ.values = this.makeFieldTexture(\"esz\")(0) as Texture\r\n    }\r\n\r\n    resetMaterials = () => {\r\n        this.data.permeability.values = this.makeFieldTexture(\"permeability\")(1) as Texture\r\n        this.data.permittivity.values = this.makeFieldTexture(\"permittivity\")(1) as Texture\r\n    }\r\n\r\n    drawPermeability = (pos: [number, number, number], size: number, value: number) => {\r\n        this.data.permeability.values = this.drawOnTexture(\"permeability\")(pos, size, value, 0, this.copyTexture(\"permability\")(this.data.permeability.values)) as Texture\r\n    }\r\n\r\n    drawPermittivity = (pos: [number, number, number], size: number, value: number) => {\r\n        this.data.permittivity.values = this.drawOnTexture(\"permittivity\")(pos, size, value, 0, this.copyTexture(\"permittivity\")(this.data.permittivity.values)) as Texture\r\n    }\r\n\r\n    injectSignal = (pos: [number, number, number], size: number, value: number, dt: number) => {\r\n        this.data.electricSourceFieldZ.values = this.drawOnTexture(\"esz\")(pos, size, value * dt, 1, this.copyTexture(\"esz\")(this.data.electricSourceFieldZ.values)) as Texture\r\n    }\r\n    \r\n    loadPermittivity = (permittivity: number[][]) => {\r\n        this.data.permittivity.values = this.copyTexture(\"loadPermittivity\")(permittivity) as Texture\r\n    }\r\n\r\n    loadPermeability = (permeability: number[][]) => {\r\n        this.data.permeability.values = this.copyTexture(\"loadPermeability\")(permeability) as Texture\r\n    }\r\n\r\n    getData = () => this.data\r\n}","import React, { useRef, useCallback, useEffect, useState } from 'react'\nimport { GPU, IKernelRunShortcut } from \"gpu.js\"\nimport { FDTDSimulator } from \"./simulator\"\nimport { simulatorMapToImageUrl, imageUrlToSimulatorMap } from './util'\n\nconst canvasSize = [window.innerWidth, window.innerHeight]\nconst canvasAspect = canvasSize[0] / canvasSize[1]\n\nconst dt = 0.02\nconst gridSizeLongest = 600\nconst gridSize: [number, number] = canvasSize[0] >= canvasSize[1] ?\n    [gridSizeLongest, Math.ceil(gridSizeLongest / canvasAspect)] :\n    [Math.ceil(gridSizeLongest * canvasAspect), gridSizeLongest]\nconst cellSize = 0.04\n\nlet simulator: FDTDSimulator | null = null\n\nconst makeRenderSimulatorCanvas = (g: GPU) => {\n    function getAt(field: number[][], shapeX: number, shapeY: number, x: number, y: number) {\n        if (x < 0 || x >= shapeX || y < 0 || y >= shapeY) {\n            return 0\n        }\n\n        return field[y][x]\n    }\n\n    return g.createKernel(function (electricFieldX: number[][], electricFieldY: number[][], electricFieldZ: number[][],\n        magneticFieldX: number[][], magneticFieldY: number[][], magneticFieldZ: number[][],\n        permittivity: number[][], permeability: number[][]) {\n        const gx = this.constants.gridSizeX as number\n        const gy = this.constants.gridSizeY as number\n\n        const x = gx * this.thread.x! / (this.output.x as number)\n        const y = gy * (1 - this.thread.y! / (this.output.y as number))\n        const xa = Math.floor(x)\n        const ya = Math.floor(y)\n\n        const eAA =\n            getAt(electricFieldX, gx, gy, xa, ya) * getAt(electricFieldX, gx, gy, xa, ya) +\n            getAt(electricFieldY, gx, gy, xa, ya) * getAt(electricFieldY, gx, gy, xa, ya) +\n            getAt(electricFieldZ, gx, gy, xa, ya) * getAt(electricFieldZ, gx, gy, xa, ya)\n\n        // Magnetic field is offset from electric field, so get value at +0.5 by interpolating 0 and 1\n        const magXAA = (getAt(magneticFieldX, gx, gy, xa, ya) + getAt(magneticFieldX, gx, gy, xa - 1, ya - 1)) / 2\n        const magYAA = (getAt(magneticFieldY, gx, gy, xa, ya) + getAt(magneticFieldY, gx, gy, xa - 1, ya - 1)) / 2\n        const magZAA = (getAt(magneticFieldZ, gx, gy, xa, ya) + getAt(magneticFieldZ, gx, gy, xa - 1, ya - 1)) / 2\n\n        const mAA = magXAA * magXAA + magYAA * magYAA + magZAA * magZAA\n\n        const scale = 15\n\n        // Material constants are between 1 and 100, so take log10 ([0, 2]) and divide by 2 to get full range\n        const permittivityValue = 0.3 + 0.7 * Math.max(0, Math.min(1, (0.4342944819 * Math.log(getAt(permittivity, gx, gy, xa, ya))) / 2))\n        const permeabilityValue = 0.3 + 0.7 * Math.max(0, Math.min(1, (0.4342944819 * Math.log(getAt(permeability, gx, gy, xa, ya))) / 2))\n\n        const backgroundX = (Math.abs(x % 1 - 0.5) < 0.25 ? 1 : 0) * (Math.abs(y % 1 - 0.5) < 0.25 ? 1 : 0)\n        const backgroundY = 1 - backgroundX\n\n        this.color(Math.min(1, eAA / scale + 0.5 * backgroundX * permittivityValue), Math.min(1, eAA / scale + mAA / scale), Math.min(1, mAA / scale + 0.5 * backgroundY * permeabilityValue))\n    }, {\n        output: [canvasSize[0], canvasSize[1]],\n        constants: { gridSizeX: gridSize[0], gridSizeY: gridSize[1] },\n        graphical: true\n    }).setFunctions([getAt]).setWarnVarUsage(false).setTactic(\"performance\").setPrecision(\"unsigned\")\n}\n\nfunction clamp(min: number, max: number, value: number) {\n    return Math.max(min, Math.min(max, value))\n}\n\ntype LabeledSliderProps = {\n    label: string\n    value: number,\n    setValue: (value: number) => void\n    min: number\n    max: number\n    step: number\n}\n\nfunction LabeledSlider(props: LabeledSliderProps) {\n    return (\n        <div>\n            <label>{props.label}</label>\n            <div>\n                <input type=\"range\" min={props.min} max={props.max} value={props.value} step={props.step}\n                    onChange={e => props.setValue(parseFloat(e.target.value))} style={{ height: 10, width: \"100%\" }} />\n                <div style={{ textAlign: \"center\", lineHeight: 0.1, marginBottom: \"7px\" }}>\n                    {props.value}\n                </div>\n            </div>\n        </div>\n    )\n}\n\ntype OptionSelectorProps = {\n    options: string[]\n    selectedOption: number\n    setSelectedOption: (selectedOption: number) => void\n}\n\nfunction OptionSelector(props: OptionSelectorProps) {\n    return (\n        <div>\n            {props.options.map((option, optionIndex) =>\n                <button key={option} style={{\n                    boxSizing: \"border-box\",\n                    border: optionIndex === props.selectedOption ? \"4px solid rgb(0, 150, 255)\" : \"0\",\n                    height: \"30px\",\n                    margin: \"5px\",\n                    width: `${100 / props.options.length}%`, background: \"rgb(100, 100, 100)\", color: \"white\"\n                }}\n                    onClick={e => props.setSelectedOption(optionIndex)}>\n                    {option}\n                </button>\n            )}\n        </div>\n    )\n}\n\ntype ControlWidgerProps = {\n    brushSize: number,\n    setBrushSize: (brushSize: number) => void\n\n    brushValue: number,\n    setBrushValue: (brushValue: number) => void\n\n    signalFrequency: number,\n    setSignalFrequency: (signalFrequency: number) => void\n\n    clickOption: number\n    setClickOption: (clickOption: number) => void\n\n    resetFields: () => void\n    resetMaterials: () => void\n}\n\nfunction ControlWidget(props: ControlWidgerProps) {\n    const [collapsed, setCollapsed] = useState(false)\n    const [simulatorMapUrl, setSimulatorMapUrl] = useState(\"\")\n\n    const onSaveClicked = useCallback(() => {\n        if (simulator) {\n            const simData = simulator.getData()\n\n            window.open(simulatorMapToImageUrl({\n                permittivity: simData.permittivity.values.toArray() as number[][],\n                permeability: simData.permeability.values.toArray() as number[][],\n                shape: [simData.permeability.shape[0], simData.permeability.shape[1]]\n            }))\n        }\n    }, [])\n\n    const onLoadClicked = useCallback(() => {\n        if (simulator) {\n            imageUrlToSimulatorMap(simulatorMapUrl, [gridSize[0], gridSize[1]], map => {\n                if (simulator) {\n                    simulator.loadPermeability(map.permeability)\n                    simulator.loadPermittivity(map.permittivity)\n                }\n            })\n        }\n    }, [simulatorMapUrl])\n\n    return (\n        <div style={{ userSelect: \"none\" }}>\n            <div style={{ textAlign: \"center\", position: \"absolute\", opacity: 0.8, background: \"rgba(33, 33, 33, 100)\", fontWeight: \"lighter\", color: \"white\" }}>\n                <button onClick={e => setCollapsed(!collapsed)} style={{ width: \"100%\", height: \"30px\", background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", fontWeight: \"bold\", cursor: \"pointer\" }}>\n                    Controls [{collapsed ? \"+\" : \"-\"}]\n                </button>\n                {!collapsed && (\n                    <div style={{ padding: \"10px\" }}>\n                        <div>\n                            <button onClick={onSaveClicked} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Save map</button>\n                        </div>\n                        <div>\n                            <input type=\"text\" onChange={e => setSimulatorMapUrl(e.target.value)} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }} />\n                            <button onClick={onLoadClicked} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Load map url</button>\n                        </div>\n                        <LabeledSlider label=\"Brush size\" value={props.brushSize} setValue={props.setBrushSize} min={1} max={100} step={1} />\n                        <LabeledSlider label=\"Brush value\" value={props.brushValue} setValue={props.setBrushValue} min={1} max={100} step={1} />\n                        <LabeledSlider label=\"Signal frequency\" value={props.signalFrequency} setValue={props.setSignalFrequency} min={0} max={5} step={0.5} />\n                        <OptionSelector options={[\"ε brush\", \"µ brush\", \"Signal\"]} selectedOption={props.clickOption} setSelectedOption={props.setClickOption} />\n                        <div>\n                            <button onClick={props.resetFields} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Reset fields</button>\n                            <button onClick={props.resetMaterials} style={{ background: \"rgba(50, 50, 50, 100)\", border: \"0px\", color: \"white\", margin: \"2px\" }}>Reset materials</button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nconst defaultSignalBrushValue = 10\nconst defaultSignalBrushSize = 1\nconst defaultMaterialBrushValue = 5\nconst defaultMaterialBrushSize = 5\n\nexport default function () {\n    const [brushSize, setBrushSize] = useState(defaultSignalBrushSize)\n    const [brushValue, setBrushValue] = useState(defaultSignalBrushValue)\n    const [signalFrequency, setSignalFrequency] = useState(1)\n    const [drawingPermeability, setDrawingPermeability] = useState(false)\n    const [drawingPermittivity, setDrawingPermittivity] = useState(false)\n    const [clickOption, setClickOption] = useState(2) // eps, mu, signal\n    const optionPermittivityBrush = 0\n    const optionPermeabilityBrush = 1\n    const optionSignal = 2\n\n    const [mousePosition, setMousePosition] = useState<[number, number] | null>(null)\n\n    const signalStrength = useRef(0)\n    const mouseDownPos = useRef<[number, number] | null>(null)\n    const renderSim = useRef<IKernelRunShortcut | null>(null)\n    const drawCanvasRef = useRef<HTMLCanvasElement>(null)\n\n    const simStep = useCallback(() => {\n        if (simulator) {\n            const simData = simulator.getData()\n\n            if (mouseDownPos.current !== null && drawCanvasRef.current) {\n                const centerX = clamp(0, simData.electricSourceFieldZ.shape[0] - 1, Math.floor(simData.electricSourceFieldZ.shape[0] * mouseDownPos.current[0] / drawCanvasRef.current.width))\n                const centerY = clamp(0, simData.electricSourceFieldZ.shape[1] - 1, Math.floor(simData.electricSourceFieldZ.shape[1] * mouseDownPos.current[1] / drawCanvasRef.current.height))\n                const brushHalfSize = Math.round(brushSize / 2)\n\n                simulator.injectSignal([centerX, centerY, 0], brushHalfSize, -brushValue * 1000 * Math.cos(2 * Math.PI * signalFrequency * simData.time), dt)\n            }\n\n            simulator.stepMagnetic(dt)\n            simulator.stepElectric(dt)\n        }\n    }, [signalFrequency, brushValue, brushSize])\n\n    useEffect(() => {\n        const timer = setInterval(simStep, 1000 * dt)\n        return () => clearInterval(timer)\n    }, [simStep])\n\n    const startLoop = useCallback(() => {\n        let stop = false\n\n        const loop = (async () => {\n            const resolveDrawPromise = (resolve: (value?: unknown) => void) => requestAnimationFrame(resolve)\n\n            while (!stop) {\n                if (simulator) {\n                    const simData = simulator.getData()\n\n                    if (simData.time > 0 && renderSim.current !== null) {\n                        renderSim.current(simData.electricFieldX.values, simData.electricFieldY.values, simData.electricFieldZ.values,\n                            simData.magneticFieldX.values, simData.magneticFieldY.values, simData.magneticFieldZ.values,\n                            simData.permittivity.values, simData.permeability.values)\n                    }\n                }\n\n                await new Promise(resolveDrawPromise)\n            }\n        })\n\n        loop()\n\n        return () => { stop = true }\n    }, [])\n\n    useEffect(() => {\n        if (drawCanvasRef.current) {\n            const gpu = new GPU({ mode: \"webgl\", canvas: drawCanvasRef.current })\n            renderSim.current = makeRenderSimulatorCanvas(gpu)\n            simulator = new FDTDSimulator(gpu, gridSize, cellSize)\n        } else {\n            throw new Error(\"Canvas ref was null\")\n        }\n\n        startLoop()\n    }, [startLoop])\n\n    const changePermittivity = useCallback((canvasPos: [number, number]) => {\n        if (simulator) {\n            const centerX = Math.round(gridSize[0] * (canvasPos[0] / canvasSize[0]))\n            const centerY = Math.round(gridSize[1] * (canvasPos[1] / canvasSize[1]))\n            const brushHalfSize = Math.round(brushSize / 2)\n\n            simulator.drawPermittivity([centerX, centerY, 0], brushHalfSize, brushValue)\n        }\n    }, [brushSize, brushValue])\n\n    const changePermeability = useCallback((canvasPos: [number, number]) => {\n        if (simulator) {\n            const centerX = Math.round(gridSize[0] * (canvasPos[0] / canvasSize[0]))\n            const centerY = Math.round(gridSize[1] * (canvasPos[1] / canvasSize[1]))\n            const brushHalfSize = Math.round(brushSize / 2)\n\n            simulator.drawPermeability([centerX, centerY, 0], brushHalfSize, brushValue)\n        }\n    }, [brushSize, brushValue])\n\n    const resetMaterials = useCallback(() => {\n        if (simulator) {\n            simulator.resetMaterials()\n        }\n    }, [])\n\n    const resetFields = useCallback(() => {\n        if (simulator) {\n            simulator.resetFields()\n            signalStrength.current = 0\n        }\n    }, [])\n\n    const onInputDown = useCallback(([clientX, clientY]: [number, number]) => {\n        if (simulator) {\n            if (clickOption === optionSignal) {\n                mouseDownPos.current = [clientX, clientY]\n            } else if (clickOption === optionPermittivityBrush) {\n                changePermittivity([clientX, clientY])\n                setDrawingPermittivity(true)\n            } else if (clickOption === optionPermeabilityBrush) {\n                changePermeability([clientX, clientY])\n                setDrawingPermeability(true)\n            }\n        }\n    }, [changePermittivity, changePermeability, clickOption])\n\n    const onInputMove = useCallback(([clientX, clientY]: [number, number]) => {\n        if (simulator) {\n            if (clickOption === optionSignal && mouseDownPos.current !== null) {\n                mouseDownPos.current = [clientX, clientY]\n            }\n\n            if (drawingPermittivity) {\n                changePermittivity([clientX, clientY])\n            }\n\n            if (drawingPermeability) {\n                changePermeability([clientX, clientY])\n            }\n        }\n    }, [changePermittivity, changePermeability, clickOption, drawingPermeability, drawingPermittivity])\n\n    const onInputUp = useCallback(() => {\n        if (clickOption === optionSignal) {\n            mouseDownPos.current = null\n        } else if (clickOption === optionPermeabilityBrush) {\n            setDrawingPermeability(false)\n        } else if (clickOption === optionPermittivityBrush) {\n            setDrawingPermittivity(false)\n        }\n    }, [clickOption])\n\n    // Remember old brush values for signal and material\n    const [previousClickOption, setPreviousClickOption] = useState(optionSignal)\n    const [signalBrushSize, setSignalBrushSize] = useState(defaultSignalBrushSize)\n    const [signalBrushValue, setSignalBrushValue] = useState(defaultSignalBrushValue)\n    const [materialBrushSize, setMaterialBrushSize] = useState(defaultMaterialBrushSize)\n    const [materialBrushValue, setMaterialBrushValue] = useState(defaultMaterialBrushValue)\n    useEffect(() => {\n        if (clickOption === optionSignal && previousClickOption !== optionSignal) {\n            setMaterialBrushSize(brushSize)\n            setMaterialBrushValue(brushValue)\n            setBrushSize(signalBrushSize)\n            setBrushValue(signalBrushValue)\n        } else if (clickOption !== optionSignal && previousClickOption === optionSignal) {\n            setSignalBrushSize(brushSize)\n            setSignalBrushValue(brushValue)\n            setBrushSize(materialBrushSize)\n            setBrushValue(materialBrushValue)\n        }\n\n        setPreviousClickOption(clickOption)\n    }, [clickOption, previousClickOption, signalBrushSize, signalBrushValue, materialBrushSize, materialBrushValue, brushSize, brushValue])\n\n    return (\n        <div>\n            <canvas width={canvasSize[0]} height={canvasSize[1]} ref={drawCanvasRef} style={{ position: \"absolute\", userSelect: \"none\" }}\n                onMouseDown={e => onInputDown([e.clientX, e.clientY])}\n                onMouseMove={e => { setMousePosition([e.clientX, e.clientY]); onInputMove([e.clientX, e.clientY]) }}\n                onMouseUp={e => onInputUp()}\n                onTouchStart={e => { setMousePosition([e.touches[0].clientX, e.touches[0].clientY]); onInputDown([e.touches[0].clientX, e.touches[0].clientY]) }}\n                onTouchMove={e => { setMousePosition([e.touches[0].clientX, e.touches[0].clientY]); onInputMove([e.touches[0].clientX, e.touches[0].clientY]) }}\n                onTouchEnd={e => { setMousePosition(null); onInputUp() }}\n                onContextMenu={e => e.preventDefault()}\n            />\n\n            <div style={{ position: \"absolute\", bottom: 10, right: 10, userSelect: \"none\" }}>\n                <a href=\"https://github.com/RobinKa/maxwell-simulation\" rel=\"noopener noreferrer\" target=\"_blank\" style={{ fontWeight: \"lighter\", color: \"rgba(255, 255, 255, 100)\", textDecoration: \"none\" }}>Source code</a>\n            </div>\n\n            {mousePosition &&\n                <div style={{ position: \"absolute\", pointerEvents: \"none\", left: mousePosition[0] - (2 * (brushSize + 1)), top: mousePosition[1] - (2 * (brushSize + 1)), width: 4 * (brushSize + 1), height: 4 * (brushSize + 1), border: \"2px solid yellow\" }} />\n            }\n\n            <ControlWidget brushSize={brushSize} setBrushSize={setBrushSize}\n                brushValue={brushValue} setBrushValue={setBrushValue}\n                signalFrequency={signalFrequency} setSignalFrequency={setSignalFrequency}\n                clickOption={clickOption} setClickOption={setClickOption}\n                resetFields={resetFields} resetMaterials={resetMaterials}\n            />\n        </div>\n    )\n}\n","type SimulatorMap = {\r\n    permittivity: number[][]\r\n    permeability: number[][]\r\n    shape: [number, number]\r\n}\r\n\r\nexport function simulatorMapToImageUrl(simulatorMap: SimulatorMap): string {\r\n    const canvas = document.createElement(\"canvas\")\r\n    canvas.width = simulatorMap.shape[0]\r\n    canvas.height = simulatorMap.shape[1]\r\n\r\n    const permeability = simulatorMap.permeability\r\n    const permittivity = simulatorMap.permittivity\r\n\r\n    const ctx = canvas.getContext(\"2d\")!\r\n\r\n    ctx.fillStyle = \"rgb(1, 0, 1)\"\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n    ctx.fillStyle = \"rgb(0, 255, 0)\"\r\n    ctx.textAlign = \"center\"\r\n    ctx.textBaseline = \"middle\"\r\n    ctx.fillText(\"warlock.ai/maxwell\", canvas.width / 2, canvas.height / 2)\r\n\r\n    const canvasData = ctx.getImageData(0, 0, canvas.width, canvas.height)\r\n\r\n    for (let x = 0; x < canvas.width; x++) {\r\n        for (let y = 0; y < canvas.height; y++) {\r\n            canvasData.data[x * 4 + y * canvas.width * 4 + 0] = Math.round(permittivity[y][x]) // r\r\n            canvasData.data[x * 4 + y * canvas.width * 4 + 2] = Math.round(permeability[y][x]) // b\r\n            canvasData.data[x * 4 + y * canvas.width * 4 + 3] = 255 // a\r\n        }\r\n    }\r\n\r\n    ctx.putImageData(canvasData, 0, 0)\r\n\r\n    return canvas.toDataURL(\"image/png\")\r\n}\r\n\r\nexport function imageUrlToSimulatorMap(imageUrl: string, targetSize: [number, number], onLoaded: (simulatorMap: SimulatorMap) => void) {\r\n    const canvas = document.createElement(\"canvas\")\r\n    canvas.width = targetSize[0]\r\n    canvas.height = targetSize[1]\r\n    const image = new Image()\r\n    image.crossOrigin = \"anonymous\"\r\n    image.onload = e => {\r\n        const ctx = canvas.getContext(\"2d\")!\r\n\r\n        ctx.fillStyle = \"rgb(1, 0, 1)\"\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n        ctx.drawImage(image, 0, 0, image.width, image.height)\r\n\r\n        const map: SimulatorMap = { permeability: [], permittivity: [], shape: targetSize }\r\n\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data\r\n        for (let y = 0; y < targetSize[1]; y++) {\r\n            map.permittivity.push([])\r\n            map.permeability.push([])\r\n            for (let x = 0; x < targetSize[0]; x++) {\r\n                map.permittivity[y].push(Math.max(1, imageData[x * 4 + y * targetSize[0] * 4 + 0]))\r\n                map.permeability[y].push(Math.max(1, imageData[x * 4 + y * targetSize[0] * 4 + 2]))\r\n            }\r\n        }\r\n\r\n        onLoaded(map)\r\n    }\r\n    image.src = imageUrl\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}