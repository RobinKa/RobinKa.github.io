{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["p","Math","floor","gridSize","makeField3D","shape","getValue","field","x","row","y","d","z","push","gpu","GPU","fdCurlX3DA","createKernel","fieldY","fieldZ","this","thread","v","constants","w","output","fdCurlY3DA","fieldX","u","fdCurlZ3DA","fdCurlX3DB","fdCurlY3DB","fdCurlZ3DB","inplaceMulAddScalarField3D","a","b","s","length","simulator","data","stepElectric","dt","curlX","magneticFieldY","magneticFieldZ","curlY","magneticFieldX","curlZ","electricFieldX","electricFieldY","electricFieldZ","time","stepMagnetic","getData","_","permittivity","permeability","drawArrow","ctx","from","to","style","strokeStyle","beginPath","moveTo","lineTo","stroke","fillStyle","angle","atan2","cos","sin","PI","closePath","fill","magnitudeSquaredVector3D","clampMagnitudeVector3D","maxMag","magSq","mag","sqrt","Boolean","window","location","hostname","match","ReactDOM","render","canvasRef","useRef","useState","showElectric","setShowElectric","showMagnetic","setShowMagnetic","showPoynting","setShowPoynting","showEnergy","setShowEnergy","redrawCanvas","useMemo","simulationData","current","getContext","fillRect","canvas","width","height","cellSize","arrowLength","totalEnergy","totalElectricEnergy","totalMagneticEnergy","canvasCoords","electricValue","magneticValue","poyntingVector","electricEnergy","magneticEnergy","energy","depthColor","arc","min","elClamped","magClamped","poyntingClamped","fillText","toFixed","getSignal","t","electric","magnetic","step","useCallback","stop","simData","sig","Promise","resolve","setTimeout","loop","useEffect","float","innerHeight","ref","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.729b57c9.chunk.js","sourcesContent":["import React, { useRef, useCallback, useEffect, useMemo, useState } from 'react'\nimport { GPU } from \"gpu.js\"\n\nconst gridSize = 19\nconst p = Math.floor(gridSize / 2)\n\nconst energyScale = 1\n\ntype Vector3D = [number, number, number]\n\ntype Field3D<T> = T[][][]\ntype ScalarField3D = Field3D<number>\n\nfunction makeField3D<T>(shape: [number, number, number], getValue: (coords: [number, number, number]) => T): Field3D<T> {\n    const field = []\n    for (let x = 0; x < shape[0]; x++) {\n        const row = []\n        for (let y = 0; y < shape[1]; y++) {\n            const d = []\n            for (let z = 0; z < shape[2]; z++) {\n                d.push(getValue([x, y, z]))\n            }\n            row.push(d)\n        }\n        field.push(row)\n    }\n    return field\n}\n\nconst gpu = new GPU()\n\nconst fdCurlX3DA = gpu.createKernel(function (fieldY: ScalarField3D, fieldZ: ScalarField3D) {\n    const x = this.thread.z!\n    const y = this.thread.y!\n    const z = this.thread.x!\n\n    const v = y + 1 >= this.constants.gridSize ? y : y + 1\n    const w = z + 1 >= this.constants.gridSize ? z : z + 1\n\n    return (fieldZ[x][v][z] - fieldZ[x][y][z]) - (fieldY[x][y][w] - fieldY[x][y][z])\n}, { output: [gridSize, gridSize, gridSize], constants: { gridSize: gridSize } })\n\n\nconst fdCurlY3DA = gpu.createKernel(function (fieldX: ScalarField3D, fieldZ: ScalarField3D) {\n    const x = this.thread.z!\n    const y = this.thread.y!\n    const z = this.thread.x!\n\n    const u = x + 1 >= this.constants.gridSize ? x : x + 1\n    const w = z + 1 >= this.constants.gridSize ? z : z + 1\n\n    return (fieldX[x][y][w] - fieldX[x][y][z]) - (fieldZ[u][y][z] - fieldZ[x][y][z])\n}, { output: [gridSize, gridSize, gridSize], constants: { gridSize: gridSize } })\n\nconst fdCurlZ3DA = gpu.createKernel(function (fieldX: ScalarField3D, fieldY: ScalarField3D) {\n    const x = this.thread.z!\n    const y = this.thread.y!\n    const z = this.thread.x!\n\n    const u = x + 1 >= this.constants.gridSize ? x : x + 1\n    const v = y + 1 >= this.constants.gridSize ? y : y + 1\n\n    return (fieldY[u][y][z] - fieldY[x][y][z]) - (fieldX[x][v][z] - fieldX[x][y][z])\n}, { output: [gridSize, gridSize, gridSize], constants: { gridSize: gridSize } })\n\n\nconst fdCurlX3DB = gpu.createKernel(function (fieldY: ScalarField3D, fieldZ: ScalarField3D) {\n    const x = this.thread.z!\n    const y = this.thread.y!\n    const z = this.thread.x!\n\n    const v: number = y - 1 < 0 ? y : y - 1\n    const w: number = z - 1 < 0 ? z : z - 1\n\n    return (fieldZ[x][y][z] - fieldZ[x][v][z]) - (fieldY[x][y][z] - fieldY[x][y][w])\n}, { output: [gridSize, gridSize, gridSize], constants: { gridSize: gridSize } })\n\nconst fdCurlY3DB = gpu.createKernel(function (fieldX: ScalarField3D, fieldZ: ScalarField3D) {\n    const x = this.thread.z!\n    const y = this.thread.y!\n    const z = this.thread.x!\n\n    const u: number = x - 1 < 0 ? x : x - 1\n    const w: number = z - 1 < 0 ? z : z - 1\n\n    return (fieldX[x][y][z] - fieldX[x][y][w]) - (fieldZ[x][y][z] - fieldZ[u][y][z])\n}, { output: [gridSize, gridSize, gridSize], constants: { gridSize: gridSize } })\n\nconst fdCurlZ3DB = gpu.createKernel(function (fieldX: ScalarField3D, fieldY: ScalarField3D) {\n    const x = this.thread.z!\n    const y = this.thread.y!\n    const z = this.thread.x!\n\n    const u: number = x - 1 < 0 ? x : x - 1\n    const v: number = y - 1 < 0 ? y : y - 1\n\n    return (fieldY[x][y][z] - fieldY[u][y][z]) - (fieldX[x][y][z] - fieldX[x][v][z])\n}, { output: [gridSize, gridSize, gridSize], constants: { gridSize: gridSize } })\n\nfunction inplaceMulAddScalarField3D(a: ScalarField3D, b: ScalarField3D, s: number) {\n    for (let x = 0; x < a.length; x++) {\n        for (let y = 0; y < a[0].length; y++) {\n            for (let z = 0; z < a[0][0].length; z++) {\n                a[x][y][z] += s * b[x][y][z]\n            }\n        }\n    }\n}\n\ntype SimulationData = {\n    time: number\n    electricFieldX: ScalarField3D\n    electricFieldY: ScalarField3D\n    electricFieldZ: ScalarField3D\n    magneticFieldX: ScalarField3D\n    magneticFieldY: ScalarField3D\n    magneticFieldZ: ScalarField3D\n    permittivity: ScalarField3D\n    permeability: ScalarField3D\n}\n\ninterface Simulator {\n    stepElectric: (dt: number) => void\n    stepMagnetic: (dt: number) => void\n    getData: () => SimulationData\n}\n\nclass FDTDSimulator implements Simulator {\n    private data: SimulationData\n\n    constructor(shape: [number, number, number]) {\n        this.data = {\n            time: 0,\n            electricFieldX: makeField3D<number>(shape, _ => 0),\n            electricFieldY: makeField3D<number>(shape, _ => 0),\n            electricFieldZ: makeField3D<number>(shape, _ => 0),\n            magneticFieldX: makeField3D<number>(shape, _ => 0),\n            magneticFieldY: makeField3D<number>(shape, _ => 0),\n            magneticFieldZ: makeField3D<number>(shape, _ => 0),\n            permittivity: makeField3D<number>(shape, (_) => 0),\n            permeability: makeField3D<number>(shape, (_) => 0),\n        }\n    }\n\n    stepElectric = (dt: number) => {\n        // d/dt E(x, t) = (curl B(x, t))/(µε)\n        const curlX = fdCurlX3DB(this.data.magneticFieldY, this.data.magneticFieldZ) as ScalarField3D\n        const curlY = fdCurlY3DB(this.data.magneticFieldX, this.data.magneticFieldZ) as ScalarField3D\n        const curlZ = fdCurlZ3DB(this.data.magneticFieldX, this.data.magneticFieldY) as ScalarField3D\n\n        inplaceMulAddScalarField3D(this.data.electricFieldX, curlX, dt)\n        inplaceMulAddScalarField3D(this.data.electricFieldY, curlY, dt)\n        inplaceMulAddScalarField3D(this.data.electricFieldZ, curlZ, dt)\n\n        this.data.time += dt / 2\n    }\n\n    stepMagnetic = (dt: number) => {\n        // d/dt B(x, t) = -curl E(x, t)\n        const curlX = fdCurlX3DA(this.data.electricFieldY, this.data.electricFieldZ) as ScalarField3D\n        const curlY = fdCurlY3DA(this.data.electricFieldX, this.data.electricFieldZ) as ScalarField3D\n        const curlZ = fdCurlZ3DA(this.data.electricFieldX, this.data.electricFieldY) as ScalarField3D\n\n        inplaceMulAddScalarField3D(this.data.magneticFieldX, curlX, -dt)\n        inplaceMulAddScalarField3D(this.data.magneticFieldY, curlY, -dt)\n        inplaceMulAddScalarField3D(this.data.magneticFieldZ, curlZ, -dt)\n\n        this.data.time += dt / 2\n    }\n\n    getData = () => this.data\n}\n\nconst simulator = new FDTDSimulator([gridSize, gridSize, gridSize])\n\nfunction drawArrow(ctx: CanvasRenderingContext2D, from: [number, number], to: [number, number], style: string) {\n    const r = 5\n\n    ctx.strokeStyle = style\n    ctx.beginPath()\n    ctx.moveTo(from[0], from[1])\n    ctx.lineTo(to[0], to[1])\n    ctx.stroke()\n\n    ctx.fillStyle = style\n    ctx.beginPath()\n    let angle = Math.atan2(to[1] - from[1], to[0] - from[0])\n    let x = r * Math.cos(angle) + to[0]\n    let y = r * Math.sin(angle) + to[1]\n    ctx.moveTo(x, y)\n\n    angle += (1 / 3) * (2 * Math.PI)\n    x = r * Math.cos(angle) + to[0]\n    y = r * Math.sin(angle) + to[1]\n    ctx.lineTo(x, y)\n\n    angle += (1 / 3) * (2 * Math.PI)\n    x = r * Math.cos(angle) + to[0]\n    y = r * Math.sin(angle) + to[1]\n    ctx.lineTo(x, y)\n\n    ctx.closePath()\n    ctx.fill()\n}\n\nfunction crossVector3D(a: Vector3D, b: Vector3D): Vector3D {\n    return [\n        a[1] * b[2] - a[2] * b[1],\n        a[2] * b[0] - a[0] * b[2],\n        a[0] * b[1] - a[1] * b[0],\n    ]\n}\n\nfunction magnitudeSquaredVector3D(v: Vector3D) {\n    return v[0] * v[0] + v[1] * v[1] + v[2] * v[2]\n}\n\nfunction clampMagnitudeVector3D(maxMag: number, v: Vector3D): Vector3D {\n    const magSq = magnitudeSquaredVector3D(v)\n\n    if (magSq === 0 || magSq <= maxMag * maxMag) {\n        return v\n    }\n\n    const mag = Math.sqrt(magSq)\n\n    return [\n        maxMag * v[0] / mag,\n        maxMag * v[1] / mag,\n        maxMag * v[2] / mag\n    ]\n}\n\nexport default function () {\n    const canvasRef = useRef<HTMLCanvasElement>(null)\n\n    const [showElectric, setShowElectric] = useState(false)\n    const [showMagnetic, setShowMagnetic] = useState(false)\n    const [showPoynting, setShowPoynting] = useState(true)\n    const [showEnergy, setShowEnergy] = useState(true)\n\n    const redrawCanvas = useMemo(() => (simulationData: SimulationData) => {\n        if (canvasRef.current) {\n            const ctx = canvasRef.current.getContext(\"2d\")\n            if (ctx) {\n                ctx.fillStyle = \"black\"\n                ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n                const cellSize = ctx.canvas.width / simulationData.electricFieldX.length\n                const arrowLength = cellSize / 2.5\n\n                let totalEnergy = 0\n                let totalElectricEnergy = 0\n                let totalMagneticEnergy = 0\n\n                for (let x = 0; x < simulationData.electricFieldX.length; x++) {\n                    for (let y = 0; y < simulationData.electricFieldX[0].length; y++) {\n                        //for (let z = 0; z < 1; z++) {\n                        const z = p; {\n                            const canvasCoords: [number, number] = [\n                                (x + 0.5) * cellSize + cellSize * z / (4 * simulationData.electricFieldX.length),\n                                (y + 0.5) * cellSize - cellSize * z / (4 * simulationData.electricFieldX.length)\n                            ]\n\n                            const electricValue: [number, number, number] = [simulationData.electricFieldX[x][y][z], simulationData.electricFieldY[x][y][z], simulationData.electricFieldZ[x][y][z]]\n                            const magneticValue: [number, number, number] = [simulationData.magneticFieldX[x][y][z], simulationData.magneticFieldY[x][y][z], simulationData.magneticFieldZ[x][y][z]]\n\n                            const poyntingVector = crossVector3D(electricValue, magneticValue)\n\n                            const electricEnergy = 0.5 * magnitudeSquaredVector3D(electricValue)\n                            const magneticEnergy = 0.5 * magnitudeSquaredVector3D(magneticValue)\n                            const energy = electricEnergy + magneticEnergy // + magnitudeVector3D(poyntingVector)\n\n                            totalEnergy += energy\n                            totalElectricEnergy += electricEnergy\n                            totalMagneticEnergy += magneticEnergy\n\n                            const depthColor = 255 * z / (simulationData.electricFieldX[0][0].length - 1)\n\n                            if (showEnergy) {\n                                ctx.strokeStyle = `rgb(${depthColor}, 255, ${depthColor})`\n                                ctx.beginPath()\n                                ctx.arc(canvasCoords[0], canvasCoords[1], arrowLength * Math.min(1, Math.sqrt(energy / energyScale)), 0, 2 * Math.PI)\n                                ctx.stroke()\n                            }\n\n                            if (showElectric) {\n                                const elClamped = clampMagnitudeVector3D(1, electricValue)\n\n                                const elOffset: [number, number] = [\n                                    canvasCoords[0] + arrowLength * elClamped[0],\n                                    canvasCoords[1] + arrowLength * elClamped[1],\n                                ]\n\n                                drawArrow(ctx, canvasCoords, elOffset, `rgb(255, ${depthColor}, ${depthColor})`)\n                            }\n\n                            if (showMagnetic) {\n                                const magClamped = clampMagnitudeVector3D(1, magneticValue)\n\n                                const magOffset: [number, number] = [\n                                    canvasCoords[0] + arrowLength * magClamped[0],\n                                    canvasCoords[1] + arrowLength * magClamped[1],\n                                ]\n\n                                drawArrow(ctx, canvasCoords, magOffset, `rgb(${depthColor}, ${depthColor}, 255)`)\n                            }\n\n                            if (showPoynting) {\n                                const poyntingClamped = clampMagnitudeVector3D(energyScale, poyntingVector)\n\n                                const poyntingOffset: [number, number] = [\n                                    canvasCoords[0] + arrowLength * poyntingClamped[0] / energyScale,\n                                    canvasCoords[1] + arrowLength * poyntingClamped[1] / energyScale,\n                                ]\n\n                                drawArrow(ctx, canvasCoords, poyntingOffset, `rgb(${255 - depthColor}, 255, ${depthColor})`)\n                            }\n                        }\n                    }\n                }\n\n                ctx.fillStyle = \"white\"\n                ctx.fillText(`Time: ${simulationData.time.toFixed(2)}`, 10, 10)\n                ctx.fillStyle = \"lime\"\n                ctx.fillText(`Total energy: ${totalEnergy.toFixed(2)}`, 10, 20)\n                ctx.fillStyle = \"red\"\n                ctx.fillText(`Electric energy: ${totalElectricEnergy.toFixed(2)}`, 10, 30)\n                ctx.fillStyle = \"blue\"\n                ctx.fillText(`Magnetic energy: ${totalMagneticEnergy.toFixed(2)}`, 10, 40)\n            }\n        }\n    }, [canvasRef, showElectric, showMagnetic, showEnergy, showPoynting])\n\n    const getSignal = useMemo(() => {\n        return (t: number) => {\n            const el: Vector3D = [0, 0, t > 2 ? 0 : 20]\n            const mag: Vector3D = [0, t > 5 ? 0 : 0, 0]\n\n            return {\n                electric: el,\n                magnetic: mag\n            }\n        }\n    }, [])\n\n    const step = useCallback(() => {\n        let stop = false\n\n        const loop = (async () => {\n            while (!stop) {\n                const simData = simulator.getData()\n\n                const dt = 0.01\n\n                let sig = getSignal(simData.time)\n                for (let z = 0; z < gridSize; z++) {\n                    simData.electricFieldX[p][p][z] = sig.electric[0]\n                    simData.electricFieldY[p][p][z] = sig.electric[1]\n                    simData.electricFieldZ[p][p][z] = sig.electric[2]\n                    simData.magneticFieldX[p][p][z] = sig.magnetic[0]\n                    simData.magneticFieldY[p][p][z] = sig.magnetic[1]\n                    simData.magneticFieldZ[p][p][z] = sig.magnetic[2]\n                }\n                simulator.stepMagnetic(dt)\n\n                sig = getSignal(simData.time)\n                for (let z = 0; z < gridSize; z++) {\n                    simData.electricFieldX[p][p][z] = sig.electric[0]\n                    simData.electricFieldY[p][p][z] = sig.electric[1]\n                    simData.electricFieldZ[p][p][z] = sig.electric[2]\n                    simData.magneticFieldX[p][p][z] = sig.magnetic[0]\n                    simData.magneticFieldY[p][p][z] = sig.magnetic[1]\n                    simData.magneticFieldZ[p][p][z] = sig.magnetic[2]\n                }\n                simulator.stepElectric(dt)\n\n                redrawCanvas(simulator.getData())\n                await new Promise(resolve => setTimeout(resolve, dt * 1000))\n            }\n        })\n\n        loop()\n\n        return () => { stop = true }\n    }, [redrawCanvas, getSignal])\n\n    useEffect(() => {\n        redrawCanvas(simulator.getData())\n    }, [redrawCanvas])\n\n    useEffect(step, [step])\n\n    return (\n        <div>\n            <div style={{ float: \"left\" }}>\n                <canvas width={window.innerHeight} height={window.innerHeight} ref={canvasRef} />\n            </div>\n            <div>\n                <div><button onClick={() => setShowElectric(!showElectric)}>Toggle electric</button></div>\n                <div><button onClick={() => setShowMagnetic(!showMagnetic)}>Toggle magnetic</button></div>\n                <div><button onClick={() => setShowEnergy(!showEnergy)}>Toggle energy</button></div>\n                <div><button onClick={() => setShowPoynting(!showPoynting)}>Toggle poynting</button></div>\n            </div>\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}