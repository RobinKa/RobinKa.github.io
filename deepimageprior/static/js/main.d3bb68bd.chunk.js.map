{"version":3,"sources":["Painter.tsx","models/UNet.ts","AppState.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["drawImageTensor","ctx","imageTensor","_ref","canvas","width","height","imageData","createImageData","x","y","i","data","Math","min","max","putImageData","Painter","props","state","dispatchState","_useState","useState","_useState2","Object","slicedToArray","model","setModel","_useState3","_useState4","noise","setNoise","_useState5","_useState6","setImageTensor","useMemo","document","createElement","createMemoryCanvas","algorithmSettings","useEffect","requestRun","m","n","it","noiseShape","inputShape","outputFilters","layers","filters","input","tf","shape","downs","push","conv2d","pow","kernelSize","padding","strides","activation","apply","length","ups","last","upsampled","conv2dTranspose","concatenated","concatenate","axis","processed","inputs","outputs","createUNet","compile","optimizer","loss","concat","flat","sourceImage","reshape","slice","asyncToGenerator","regenerator_default","a","mark","_callee","output","wrap","_context","prev","next","type","running","fit","batchSize","epochs","predict","array","sent","getContext","iteration","uri","toDataURL","t0","console","log","stop","generating","dispose","react_default","updateAppState","action","newState","objectSpread","images","newSettings","image","Error","JSON","stringify","App","_useAppState","useReducer","_useAppState2","useRef","selectedImage","setSelectedImage","context","current","drawImage","getImageData","Array","from","_useDropzone","useDropzone","accept","onDrop","files","Image","onload","evt","file","reader","FileReader","target","readyState","DONE","src","result","readAsDataURL","disabled","getRootProps","getInputProps","statusText","Container","Navbar","bg","variant","Brand","Nav","Link","href","style","marginTop","Col","Row","assign","textAlign","boxShadow","ref","es","defaultValue","step","onChange","value","setWidth","setHeight","setLayers","setFilters","fontSize","Button","visibility","onClick","lib","onClickItem","index","item","FileSaver","saveAs","selectedItem","showArrows","autoPlay","map","key","alt","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0aAuBA,SAASA,EAAgBC,EAA+BC,GAKpD,IALiF,IAAAC,EACzD,CAACF,EAAIG,OAAOC,MAAOJ,EAAIG,OAAOE,QAA/CD,EAD0EF,EAAA,GACnEG,EADmEH,EAAA,GAG3EI,EAAYN,EAAIO,gBAAgBH,EAAOC,GAEpCG,EAAI,EAAGA,EAAIJ,EAAOI,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAC7B,IAAMC,EAAIF,EAAIC,EAAIL,EAClBE,EAAUK,KAAS,EAAJD,EAAQ,GAAKE,KAAKC,IAAI,IAAKD,KAAKE,IAAI,EAAG,OAAS,EAAIb,EAAY,GAAGO,GAAGC,GAAG,MACxFH,EAAUK,KAAS,EAAJD,EAAQ,GAAKE,KAAKC,IAAI,IAAKD,KAAKE,IAAI,EAAG,OAAS,EAAIb,EAAY,GAAGO,GAAGC,GAAG,MACxFH,EAAUK,KAAS,EAAJD,EAAQ,GAAKE,KAAKC,IAAI,IAAKD,KAAKE,IAAI,EAAG,OAAS,EAAIb,EAAY,GAAGO,GAAGC,GAAG,MACxFH,EAAUK,KAAS,EAAJD,EAAQ,GAAK,IAIpCV,EAAIe,aAAaT,EAAW,EAAG,GAG5B,SAASU,EAAQC,GAAqB,IACjCC,EAAyBD,EAAzBC,MAAOC,EAAkBF,EAAlBE,cAD0BC,EAGfC,mBAAgC,MAHjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGlCK,EAHkCH,EAAA,GAG3BI,EAH2BJ,EAAA,GAAAK,EAIfN,mBAAoC,MAJrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAIlCE,EAJkCD,EAAA,GAI3BE,EAJ2BF,EAAA,GAAAG,EAKHV,mBAAoC,MALjCW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAKlC9B,EALkC+B,EAAA,GAKrBC,EALqBD,EAAA,GAOnC7B,EAAS+B,kBAAQ,WACnB,OAjCR,SAA4B9B,EAAeC,GACvC,IAAMF,EAASgC,SAASC,cAAc,UAGtC,OAFAjC,EAAOC,MAAQA,EACfD,EAAOE,OAASA,EACTF,EA6BIkC,CAAmBnB,EAAMoB,kBAAkBlC,MAAOc,EAAMoB,kBAAkBjC,SAClF,CAACa,EAAMoB,kBAAkBlC,MAAOc,EAAMoB,kBAAkBjC,SAwF3D,OAtFAkC,oBAAU,WACN,GAAIrB,EAAMsB,WAAY,CAClB,IAAIC,EAAIhB,EACJiB,EAAIb,EACJc,EAAK1C,EAET,GAAU,OAANwC,GAAoB,OAANC,GAAqB,OAAPC,EAAa,CACzC,IAAMC,EAAuC,CAAC1B,EAAMoB,kBAAkBlC,MAAOc,EAAMoB,kBAAkBjC,OAAQ,IAG7GoC,EC5DT,SAAoBI,EAAsCC,EAAuBC,EAAgBC,GAIpG,IAHA,IAAMC,EAAQC,IAAS,CAAEC,MAAON,IAE1BO,EAAQ,CAACH,GACNvC,EAAI,EAAGA,EAAIqC,EAAQrC,IACxB0C,EAAMC,KAAKH,IAAUI,OAAO,CACxBN,QAASpC,KAAKC,IAAI,IAAKD,KAAK2C,IAAI,EAAG7C,GAAKsC,GACxCQ,WAAY,CAAC,EAAG,GAChBC,QAAS,OACTC,QAAS,EACTC,WAAY,QACbC,MAAMR,EAAMA,EAAMS,OAAS,KAIlC,IADA,IAAMC,EAAM,CAACV,EAAMA,EAAMS,OAAS,IACzBnD,EAAI,EAAGA,EAAIqC,EAAQrC,IAAK,CAC7B,IAAMqD,EAAOrD,IAAMqC,EAAS,EAEtBiB,EAAYd,IAAUe,gBAAgB,CACxCjB,QAASpC,KAAKC,IAAI,IAAKD,KAAK2C,IAAI,EAAGR,EAASrC,EAAI,GAAKsC,GACrDQ,WAAY,CAAC,EAAG,GAChBC,QAAS,OACTC,QAAS,EACTC,WAAY,QACbC,MAAME,EAAIA,EAAID,OAAS,IAEpBK,EAAehB,IAAUiB,YAAY,CAACC,MAAO,IAAIR,MAAM,CAACI,EAAWZ,EAAML,EAASrC,EAAI,KAEtF2D,EAAYnB,IAAUI,OAAO,CAC/BN,QAASe,EAAOjB,EAAgBlC,KAAKC,IAAI,IAAKD,KAAK2C,IAAI,EAAGR,EAASrC,EAAI,GAAKsC,GAC5EQ,WAAY,CAAC,EAAG,GAChBC,QAAS,OACTC,QAAS,EACTC,WAAYI,EAAO,OAAS,QAC7BH,MAAMM,GAETJ,EAAIT,KAAKgB,GAGb,OAAOnB,IAAS,CAACoB,OAAQrB,EAAOsB,QAAST,EAAIA,EAAID,OAAS,KDqB1CW,CAAW5B,EAFO,EAEoB1B,EAAMoB,kBAAkBS,OAAQ7B,EAAMoB,kBAAkBU,UAChGyB,QAAQ,CACNC,UAAW,OACXC,KAAM,sBAGVjC,EAAIQ,IAAgB,CAAC,GAAG0B,OAAOhC,IAxDbiC,EA0DY3D,EAAM4D,YA1DF1E,EA0DgBc,EAAMoB,kBAAkBlC,MA1DzBC,EA0DgCa,EAAMoB,kBAAkBjC,OAAzGsC,EAzDLO,IAAaA,IAAOA,IAAOA,IAAY2B,GAAME,QAAQ,CAAC,EAAG1E,EAAQD,EAAO,IAAI4E,MAAM,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG3E,EAAQD,EAAO,IAAK,OAAQ,GAAI,CAAC,EAAG,EAAG,EAAG,IA2DzIsB,EAASe,GACTX,EAASY,GACTT,EAAeU,GAGnBpB,OAAA0D,EAAA,EAAA1D,CAAA2D,EAAAC,EAAAC,KAAC,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAEOtE,EAAc,CACVwE,KAAM,aACNC,SAAS,IAJpBJ,EAAAE,KAAA,EAOajD,EAAEoD,IAAInD,EAAGC,EAAI,CACfmD,UAAW,EACXC,OAAQ,KATnB,cAAAP,EAAAE,KAAA,EAY6BjD,EAAEuD,QAAQtD,GAAiBuD,QAZxD,OAYaX,EAZbE,EAAAU,KAcOnG,EAAgBI,EAAOgG,WAAW,MAAQb,GAE1CnE,EAAc,CACVwE,KAAM,eACNrF,UAAW,CACP8F,UAAWlF,EAAMkF,UACjBC,IAAKlG,EAAOmG,UAAU,gBApBrCd,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAe,GAAAf,EAAA,SAyBOgB,QAAQC,IAAR,iCAAA7B,OAAAY,EAAAe,KAzBP,QA4BGpF,EAAc,CACVwE,KAAM,aACNC,SAAS,IAGbzE,EAAc,CACVwE,KAAM,gBACNnD,YAAY,IAnCnB,yBAAAgD,EAAAkB,SAAArB,EAAA,iBAAD9D,GAjEZ,IAAkCsD,EAAgBzE,EAAeC,GAwG1D,CAACa,EAAMsB,aAEVD,oBAAU,WACDrB,EAAMyF,aACO,OAAVlF,GACAA,EAAMmF,UAGU,OAAhB3G,GACAA,EAAY2G,UAGF,OAAV/E,GACAA,EAAM+E,UAGVlF,EAAS,MACTO,EAAe,MACfH,EAAS,QAEd,CAACZ,EAAMyF,aAEHE,EAAA1B,EAAA/C,cAAA,YArIXc,uFEgDA,SAAS4D,EAAe5F,EAAiB6F,GACrC,IAAMC,EAAQzF,OAAA0F,EAAA,EAAA1F,CAAA,GAAQL,GAEtB,OAAQ6F,EAAOpB,MACX,IAAK,QACDqB,EAASE,OAAS,GAClBF,EAASL,YAAa,EACtBK,EAASZ,UAAY,EACrBY,EAASxE,YAAa,EACtBwE,EAAS1E,kBAAoB,CACzBU,QAAS,EACTD,OAAQ,EACR3C,MAAO,IACPC,OAAQ,KAEZ,MACJ,IAAK,QACD2G,EAASL,YAAa,EACtB,MACJ,IAAK,QACDK,EAASL,YAAa,EACtB,MACJ,IAAK,eACDK,EAASE,OAAO7D,KAAK0D,EAAOzG,WAC5B,MACJ,IAAK,oBACD0G,EAAS1E,kBAAoByE,EAAOI,YACpC,MACJ,IAAK,iBACDH,EAASlC,YAAciC,EAAOK,MAC9BJ,EAASE,OAAS,GAClBF,EAASZ,UAAY,EACrB,MACJ,IAAK,qBACDY,EAASZ,WAAa,EACtB,MACJ,IAAK,aACDY,EAASpB,QAAUmB,EAAOnB,QAC1B,MACJ,IAAK,gBACDoB,EAASxE,WAAauE,EAAOvE,WAC7B,MACJ,QACI,MAAM,IAAI6E,MAAM,qCAAuCC,KAAKC,UAAUR,IAG9E,OAAOC,0CC6FIQ,UA/KO,WAAM,IAAAC,EDsFjBC,qBAAWZ,EAAgB,CAC9BH,YAAY,EACZf,SAAS,EACTQ,UAAW,EACXc,OAAQ,GACR5E,kBAAmB,CACfU,QAAS,EACTD,OAAQ,EACR3C,MAAO,IACPC,OAAQ,KAEZyE,YAAa,KACbtC,YAAY,IClGQmF,EAAApG,OAAAC,EAAA,EAAAD,CAAAkG,EAAA,GACjBvG,EADiByG,EAAA,GACVxG,EADUwG,EAAA,GA2CxBpF,oBAAU,WACFrB,EAAMyF,aAAezF,EAAMsB,aAC3BrB,EAAc,CAAEwE,KAAM,uBACtBxE,EAAc,CAAEwE,KAAM,gBAAiBnD,YAAY,MAExD,CAACtB,EAAMsB,WAAYtB,EAAMyF,WAAYxF,IAExC,IAAMhB,EAASyH,iBAA0B,MAlDjBxG,EAoDkBC,mBAAkC,MApDpDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAoDjByG,EApDiBvG,EAAA,GAoDFwG,EApDExG,EAAA,GAsDxBiB,oBAAU,WACN,GAAsB,OAAlBsF,EAAwB,CACxB,IAAME,EAAU5H,EAAO6H,QAAS7B,WAAW,MAC3C4B,EAAQE,UAAUJ,EAAe,EAAG,EAAG3G,EAAMoB,kBAAkBlC,MAAOc,EAAMoB,kBAAkBjC,QAC9F,IAAMC,EAAYyH,EAAQG,aAAa,EAAG,EAAGhH,EAAMoB,kBAAkBlC,MAAOc,EAAMoB,kBAAkBjC,QAAQM,KAC5GQ,EAAc,CACVwE,KAAM,iBACNyB,MAAOe,MAAMC,KAAK9H,OAG3B,CAACuH,EAAe3G,EAAMoB,kBAAkBlC,MAAOc,EAAMoB,kBAAkBjC,OAAQc,IAhE1D,IAAAkH,EAuFgBC,YAAY,CAChDC,OAAQ,UACRC,OAvBJ,SAAyBC,GACrBX,EAAiB,MAEjB,IAAMV,EAAQ,IAAIsB,MAElBtB,EAAMuB,OAAS,SAAUC,GACrBd,EAAiBV,IAGrB,IAAMyB,EAAOJ,EAAM,GACbK,EAAS,IAAIC,WAEnBD,EAAOH,OAAS,SAAUC,GAClBA,EAAII,OAAOC,aAAeF,WAAWG,OACrC9B,EAAM+B,IAAMP,EAAII,OAAOI,SAI/BN,EAAOO,cAAcR,IAMrBS,SAAUpI,EAAMyF,YAAczF,EAAM0E,UAHhC2D,EAvFgBlB,EAuFhBkB,aAAcC,EAvFEnB,EAuFFmB,cAMhBC,EAAavH,kBAAQ,WACvB,OAAIhB,EAAMyF,YAAczF,EAAM0E,QAC1B,uBAAAhB,OAA8B1D,EAAMkF,UAApC,gCACOlF,EAAMyF,aAAezF,EAAM0E,QAC3B,sDACC1E,EAAMyF,YAAczF,EAAM0E,QAC3B,cACC1E,EAAMyF,YAAezF,EAAM0E,SAAY1E,EAAM4D,YAE7C5D,EAAMyF,YAAezF,EAAM0E,aAAhC,EACI,cAFA,4IAKZ,CAAC1E,EAAMyF,WAAYzF,EAAM0E,QAAS1E,EAAM4D,YAAa5D,EAAMkF,YAE9D,OACIS,EAAA1B,EAAA/C,cAAA,WACIyE,EAAA1B,EAAA/C,cAACsH,EAAA,EAAD,KACI7C,EAAA1B,EAAA/C,cAACuH,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtBhD,EAAA1B,EAAA/C,cAACuH,EAAA,EAAOG,MAAR,yBAGAjD,EAAA1B,EAAA/C,cAAC2H,EAAA,EAAIC,KAAL,CAAUC,KAAK,mDAAf,eACApD,EAAA1B,EAAA/C,cAAC2H,EAAA,EAAIC,KAAL,CAAUC,KAAK,oCAAf,WAGRpD,EAAA1B,EAAA/C,cAACsH,EAAA,EAAD,CAAWQ,MAAO,CAACC,UAAW,SAC1BtD,EAAA1B,EAAA/C,cAACgI,EAAA,EAAD,KACIvD,EAAA1B,EAAA/C,cAACiI,EAAA,EAAD,KACIxD,EAAA1B,EAAA/C,cAACgI,EAAA,EAAD,KACIvD,EAAA1B,EAAA/C,cAAA,MAAAb,OAAA+I,OAAA,CAAKJ,MAAO,CAAEK,UAAW,WAAgBhB,KACrC1C,EAAA1B,EAAA/C,cAAA,QAAWoH,KACX3C,EAAA1B,EAAA/C,cAAA,UAAQ8H,MAAO,CAAEM,UAAW,oBAAsBC,IAAKtK,EAAQC,MAAOc,EAAMoB,kBAAkBlC,MAAOC,OAAQa,EAAMoB,kBAAkBjC,WAG7IwG,EAAA1B,EAAA/C,cAACgI,EAAA,EAAD,KACIvD,EAAA1B,EAAA/C,cAAA,OAAK8H,MAAO,CAAEK,UAAW,WACrB1D,EAAA1B,EAAA/C,cAACsI,EAAA,EAAD,CAAQpB,SAAUpI,EAAMyF,YAAczF,EAAM0E,QAAS+E,aAtI9C,IAsI0E9J,IAAK,EAAGC,IAAK,KAAM8J,KAAM,GAAIC,SAAU,SAAAC,GAAK,OA/HzJ,SAAkBA,GACd3J,EAAc,CACVwE,KAAM,oBACNwB,YAAY5F,OAAA0F,EAAA,EAAA1F,CAAA,GACLL,EAAMoB,kBADF,CAEPlC,MAAO0K,MA0H0IC,CAASD,MAC1IjE,EAAA1B,EAAA/C,cAAA,uBAAelB,EAAMoB,kBAAkBlC,QAE3CyG,EAAA1B,EAAA/C,cAAA,OAAK8H,MAAO,CAAEK,UAAW,WACrB1D,EAAA1B,EAAA/C,cAACsI,EAAA,EAAD,CAAQpB,SAAUpI,EAAMyF,YAAczF,EAAM0E,QAAS+E,aA1IzC,IA0IsE9J,IAAK,EAAGC,IAAK,KAAM8J,KAAM,GAAIC,SAAU,SAAAC,GAAK,OAzH1J,SAAmBA,GACf3J,EAAc,CACVwE,KAAM,oBACNwB,YAAY5F,OAAA0F,EAAA,EAAA1F,CAAA,GACLL,EAAMoB,kBADF,CAEPjC,OAAQyK,MAoH0IE,CAAUF,MAC5IjE,EAAA1B,EAAA/C,cAAA,wBAAgBlB,EAAMoB,kBAAkBjC,SAE5CwG,EAAA1B,EAAA/C,cAAA,OAAK8H,MAAO,CAAEK,UAAW,WACrB1D,EAAA1B,EAAA/C,cAACsI,EAAA,EAAD,CAAQpB,SAAUpI,EAAMyF,YAAczF,EAAM0E,QAAS+E,aA7I/D,EA6I4F9J,IAAK,EAAGC,IAAK,GAAI8J,KAAM,EAAGC,SAAU,SAAAC,GAAK,OAnHvJ,SAAmBA,GACf3J,EAAc,CACVwE,KAAM,oBACNwB,YAAY5F,OAAA0F,EAAA,EAAA1F,CAAA,GACLL,EAAMoB,kBADF,CAEPS,OAAQ+H,MA8GuIG,CAAUH,MACzIjE,EAAA1B,EAAA/C,cAAA,wBAAgBlB,EAAMoB,kBAAkBS,SAE5C8D,EAAA1B,EAAA/C,cAAA,OAAK8H,MAAO,CAAEK,UAAW,WACrB1D,EAAA1B,EAAA/C,cAACsI,EAAA,EAAD,CAAQpB,SAAUpI,EAAMyF,YAAczF,EAAM0E,QAAS+E,aAhJ9D,EAgJ4F9J,IAAK,EAAGC,IAAK,IAAK8J,KAAM,EAAGC,SAAU,SAAAC,GAAK,OA7GzJ,SAAoBA,GAChB3J,EAAc,CACVwE,KAAM,oBACNwB,YAAY5F,OAAA0F,EAAA,EAAA1F,CAAA,GACLL,EAAMoB,kBADF,CAEPU,QAAS8H,MAwGwII,CAAWJ,MAC5IjE,EAAA1B,EAAA/C,cAAA,yBAAiBlB,EAAMoB,kBAAkBU,UAG7C6D,EAAA1B,EAAA/C,cAAA,KAAG8H,MAAO,CAAEiB,SAAU,SAAW1B,GAEjC5C,EAAA1B,EAAA/C,cAAA,OAAK8H,MAAO,CAAEK,UAAW,WACrB1D,EAAA1B,EAAA/C,cAACpB,EAAD,CAASE,MAAOA,EAAOC,cAAeA,IAEtC0F,EAAA1B,EAAA/C,cAACgJ,EAAA,EAAD,CAAQlB,MAAO,CAAEmB,WAAanK,EAAM0E,SAAY1E,EAAMyF,aAAczF,EAAM4D,YAA0B,SAAZ,WAAwBwG,QAAS,kBAAMnK,EAAc,CAAEwE,KAAM,YAArJ,SACAkB,EAAA1B,EAAA/C,cAACgJ,EAAA,EAAD,CAAQlB,MAAO,CAAEmB,WAAYnK,EAAM0E,SAAW1E,EAAMyF,WAAa,UAAY,UAAY2E,QAAS,kBAAMnK,EAAc,CAAEwE,KAAM,YAA9H,QACAkB,EAAA1B,EAAA/C,cAACgJ,EAAA,EAAD,CAAQE,QAAS,kBAAMnK,EAAc,CAAEwE,KAAM,YAA7C,aAKhBkB,EAAA1B,EAAA/C,cAACgI,EAAA,EAAD,KACIvD,EAAA1B,EAAA/C,cAACmJ,EAAA,SAAD,CAAUC,YAAa,SAACC,EAAeC,GAAhB,OAA0CC,IAAUC,OAAO1K,EAAMgG,OAAOuE,GAAOpF,IAArC,aAAAzB,OAAuD1D,EAAMgG,OAAOuE,GAAOrF,UAA3E,UAA6FyF,aAAc3K,EAAMgG,OAAOrD,OAAS,EAAI3C,EAAMgG,OAAOrD,OAAS,EAAI,EAAGiI,YAAY,EAAMC,UAAU,GAC1P7K,EAAMgG,OAAO8E,IAAI,SAAC5E,GAAD,OACdP,EAAA1B,EAAA/C,cAAA,OAAK6J,IAAK7E,EAAMf,KACZQ,EAAA1B,EAAA/C,cAAA,OAAK+G,IAAK/B,EAAMf,IAAK6F,IAAK9E,EAAMf,MAChCQ,EAAA1B,EAAA/C,cAAA,KAAG+J,UAAU,UAAb,aACe/E,EAAMhB,oBCzK/CgG,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjM,QACf2L,UAAUC,cAAcQ,YAI1B9G,QAAQC,IACN,iHAKEmG,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBzG,QAAQC,IAAI,sCAGRmG,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,UAO5BQ,MAAM,SAAAC,GACLlH,QAAQkH,MAAM,4CAA6CA,KC9FjEC,IAASC,OAAO/G,EAAA1B,EAAA/C,cAACyL,EAAD,MAAS1L,SAAS2L,eAAe,SDiB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIkB,IACnBC,kBACD1B,OAAOC,SAAStC,MAEJgE,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAA/H,OAAMoJ,kBAAN,sBAEP5B,GAgEV,SAAiCO,EAAeC,GAE9CuB,MAAMxB,GACHK,KAAK,SAAAoB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BV,OAAOC,SAASqC,aAKpBlC,EAAgBC,EAAOC,KAG1Ba,MAAM,WACLjH,QAAQC,IACN,mEArFAoI,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,KAAK,WACjCxG,QAAQC,IACN,gHAMJiG,EAAgBC,EAAOC,MC3C/BE","file":"static/js/main.d3bb68bd.chunk.js","sourcesContent":["import * as tf from \"@tensorflow/tfjs\"\r\nimport React, { Dispatch, useEffect, useState, useMemo } from \"react\"\r\nimport { createUNet } from \"./models/UNet\"\r\nimport { AppState, AppUpdateAction } from \"./AppState\"\r\n\r\ntf.enableProdMode()\r\n\r\ntype PainterProps = {\r\n    state: AppState,\r\n    dispatchState: Dispatch<AppUpdateAction>\r\n}\r\n\r\nfunction imageTensorFromFlatArray(flat: number[], width: number, height: number) {\r\n    return tf.transpose(tf.sub(tf.div(tf.tensor1d(flat).reshape([1, height, width, 4]).slice([0, 0, 0, 0], [1, height, width, 3]), 127.5), 1), [0, 2, 1, 3])\r\n}\r\n\r\nfunction createMemoryCanvas(width: number, height: number) {\r\n    const canvas = document.createElement(\"canvas\")\r\n    canvas.width = width\r\n    canvas.height = height\r\n    return canvas\r\n}\r\n\r\nfunction drawImageTensor(ctx: CanvasRenderingContext2D, imageTensor: number[][][][]) {\r\n    const [width, height] = [ctx.canvas.width, ctx.canvas.height]\r\n\r\n    const imageData = ctx.createImageData(width, height)\r\n\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            const i = x + y * width\r\n            imageData.data[i * 4 + 0] = Math.min(255, Math.max(0, 127.5 * (1 + imageTensor[0][x][y][0])))\r\n            imageData.data[i * 4 + 1] = Math.min(255, Math.max(0, 127.5 * (1 + imageTensor[0][x][y][1])))\r\n            imageData.data[i * 4 + 2] = Math.min(255, Math.max(0, 127.5 * (1 + imageTensor[0][x][y][2])))\r\n            imageData.data[i * 4 + 3] = 255\r\n        }\r\n    }\r\n\r\n    ctx.putImageData(imageData, 0, 0)\r\n}\r\n\r\nexport function Painter(props: PainterProps) {\r\n    const { state, dispatchState } = props\r\n\r\n    const [model, setModel] = useState<tf.LayersModel | null>(null)\r\n    const [noise, setNoise] = useState<tf.Tensor<tf.Rank> | null>(null)\r\n    const [imageTensor, setImageTensor] = useState<tf.Tensor<tf.Rank> | null>(null)\r\n\r\n    const canvas = useMemo(() => {\r\n        return createMemoryCanvas(state.algorithmSettings.width, state.algorithmSettings.height)\r\n    }, [state.algorithmSettings.width, state.algorithmSettings.height])\r\n\r\n    useEffect(() => {\r\n        if (state.requestRun) {\r\n            let m = model\r\n            let n = noise\r\n            let it = imageTensor\r\n\r\n            if (m === null || n === null || it === null) {\r\n                const noiseShape: [number, number, number] = [state.algorithmSettings.width, state.algorithmSettings.height, 1]\r\n                const outputFilters = 3\r\n\r\n                m = createUNet(noiseShape, outputFilters, state.algorithmSettings.layers, state.algorithmSettings.filters)\r\n                m.compile({\r\n                    optimizer: \"adam\",\r\n                    loss: \"meanAbsoluteError\",\r\n                })\r\n\r\n                n = tf.randomNormal([1].concat(noiseShape))\r\n\r\n                it = imageTensorFromFlatArray(state.sourceImage!, state.algorithmSettings.width, state.algorithmSettings.height)\r\n\r\n                setModel(m)\r\n                setNoise(n)\r\n                setImageTensor(it)\r\n            }\r\n\r\n            (async () => {\r\n                try {\r\n                    dispatchState({\r\n                        type: \"setRunning\",\r\n                        running: true\r\n                    })\r\n\r\n                    await m.fit(n, it, {\r\n                        batchSize: 1,\r\n                        epochs: 20,\r\n                    })\r\n\r\n                    const output = await (m.predict(n) as tf.Tensor).array() as number[][][][]\r\n\r\n                    drawImageTensor(canvas.getContext(\"2d\")!, output)\r\n\r\n                    dispatchState({\r\n                        type: \"addImageData\",\r\n                        imageData: {\r\n                            iteration: state.iteration,\r\n                            uri: canvas.toDataURL(\"image/png\")\r\n                        }\r\n                    })\r\n                }\r\n                catch (e) {\r\n                    console.log(`Exception when running model: ${e}`)\r\n                }\r\n\r\n                dispatchState({\r\n                    type: \"setRunning\",\r\n                    running: false\r\n                })\r\n\r\n                dispatchState({\r\n                    type: \"setRequestRun\",\r\n                    requestRun: false\r\n                })\r\n            })()\r\n        }\r\n    }, [state.requestRun])\r\n\r\n    useEffect(() => {\r\n        if (!state.generating) {\r\n            if (model !== null) {\r\n                model.dispose()\r\n            }\r\n\r\n            if (imageTensor !== null) {\r\n                imageTensor.dispose()\r\n            }\r\n\r\n            if (noise !== null) {\r\n                noise.dispose()\r\n            }\r\n\r\n            setModel(null)\r\n            setImageTensor(null)\r\n            setNoise(null)\r\n        }\r\n    }, [state.generating])\r\n\r\n    return <div />\r\n}","import * as tf from \"@tensorflow/tfjs\"\r\n\r\nexport function createUNet(inputShape: [number, number, number], outputFilters: number, layers: number, filters: number) {\r\n    const input = tf.input({ shape: inputShape })\r\n\r\n    const downs = [input]\r\n    for (let i = 0; i < layers; i++) {\r\n        downs.push(tf.layers.conv2d({\r\n            filters: Math.min(256, Math.pow(2, i) * filters),\r\n            kernelSize: [4, 4],\r\n            padding: \"same\",\r\n            strides: 2,\r\n            activation: \"elu\",\r\n        }).apply(downs[downs.length - 1]) as tf.SymbolicTensor)\r\n    }\r\n\r\n    const ups = [downs[downs.length - 1]]\r\n    for (let i = 0; i < layers; i++) {\r\n        const last = i === layers - 1\r\n\r\n        const upsampled = tf.layers.conv2dTranspose({\r\n            filters: Math.min(256, Math.pow(2, layers - i - 1) * filters),\r\n            kernelSize: [4, 4],\r\n            padding: \"same\",\r\n            strides: 2,\r\n            activation: \"elu\",\r\n        }).apply(ups[ups.length - 1]) as tf.SymbolicTensor\r\n\r\n        const concatenated = tf.layers.concatenate({axis: -1}).apply([upsampled, downs[layers - i - 1]])\r\n\r\n        const processed = tf.layers.conv2d({\r\n            filters: last ? outputFilters : Math.min(256, Math.pow(2, layers - i - 1) * filters),\r\n            kernelSize: [4, 4],\r\n            padding: \"same\",\r\n            strides: 1,\r\n            activation: last ? \"tanh\" : \"elu\",\r\n        }).apply(concatenated) as tf.SymbolicTensor\r\n\r\n        ups.push(processed)\r\n    }\r\n\r\n    return tf.model({inputs: input, outputs: ups[ups.length - 1]})\r\n}","import { useReducer } from \"react\"\r\n\r\nexport type ImageData = {\r\n    uri: string,\r\n    iteration: number,\r\n}\r\n\r\nexport type AlgorithmSettings = {\r\n    filters: number,\r\n    layers: number,\r\n    width: number,\r\n    height: number,\r\n}\r\n\r\nexport type AppState = {\r\n    generating: boolean,\r\n    requestRun: boolean,\r\n    running: boolean,\r\n    images: ImageData[],\r\n    algorithmSettings: AlgorithmSettings,\r\n    sourceImage: number[] | null,\r\n    iteration: number,\r\n}\r\n\r\nexport type AppUpdateReset = { type: \"reset\" }\r\nexport type AppUpdateStart = { type: \"start\" }\r\nexport type AppUpdatePause = { type: \"pause\" }\r\nexport type AppUpdateAddImageData = {\r\n    type: \"addImageData\"\r\n    imageData: ImageData\r\n}\r\nexport type AppUpdateAlgorithmSettings = {\r\n    type: \"algorithmSettings\"\r\n    newSettings: AlgorithmSettings\r\n}\r\nexport type AppUpdateSetSourceImage = {\r\n    type: \"setSourceImage\",\r\n    image: number[]\r\n}\r\nexport type AppUpdateIncrementIteration = {\r\n    type: \"incrementIteration\"\r\n}\r\nexport type AppUpdateSetRunning = {\r\n    type: \"setRunning\"\r\n    running: boolean\r\n}\r\nexport type AppUpdateSetRequestRun = {\r\n    type: \"setRequestRun\"\r\n    requestRun: boolean\r\n}\r\n\r\nexport type AppUpdateAction = AppUpdateReset | AppUpdateStart | AppUpdatePause | AppUpdateAddImageData | AppUpdateAlgorithmSettings | AppUpdateSetSourceImage | AppUpdateIncrementIteration | AppUpdateSetRunning | AppUpdateSetRequestRun\r\n\r\nfunction updateAppState(state: AppState, action: AppUpdateAction) {\r\n    const newState = { ...state }\r\n\r\n    switch (action.type) {\r\n        case \"reset\":\r\n            newState.images = []\r\n            newState.generating = false\r\n            newState.iteration = 0\r\n            newState.requestRun = false\r\n            newState.algorithmSettings = {\r\n                filters: 8,\r\n                layers: 5,\r\n                width: 256,\r\n                height: 256,\r\n            }\r\n            break\r\n        case \"start\":\r\n            newState.generating = true\r\n            break\r\n        case \"pause\":\r\n            newState.generating = false\r\n            break\r\n        case \"addImageData\":\r\n            newState.images.push(action.imageData)\r\n            break\r\n        case \"algorithmSettings\":\r\n            newState.algorithmSettings = action.newSettings\r\n            break\r\n        case \"setSourceImage\":\r\n            newState.sourceImage = action.image\r\n            newState.images = []\r\n            newState.iteration = 0\r\n            break\r\n        case \"incrementIteration\":\r\n            newState.iteration += 1\r\n            break\r\n        case \"setRunning\":\r\n            newState.running = action.running\r\n            break\r\n        case \"setRequestRun\":\r\n            newState.requestRun = action.requestRun\r\n            break\r\n        default:\r\n            throw new Error(\"Unhandled action in state update: \" + JSON.stringify(action))\r\n    }\r\n\r\n    return newState\r\n}\r\n\r\nexport function useAppState() {\r\n    return useReducer(updateAppState, {\r\n        generating: false,\r\n        running: false,\r\n        iteration: 0,\r\n        images: [],\r\n        algorithmSettings: {\r\n            filters: 8,\r\n            layers: 5,\r\n            width: 256,\r\n            height: 256,\r\n        },\r\n        sourceImage: null,\r\n        requestRun: false\r\n    })\r\n}\r\n","import React, { useEffect, useRef, useState, useMemo } from 'react'\nimport './App.css'\nimport { Painter } from './Painter'\nimport Slider from 'rc-slider'\nimport { Row, Col, Container, Button, Navbar, Nav } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'rc-slider/assets/index.css'\nimport { useAppState, ImageData } from './AppState'\nimport { useDropzone } from 'react-dropzone'\nimport { Carousel } from \"react-responsive-carousel\"\nimport FileSaver from \"file-saver\"\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"\n\nconst [defaultWidth, defaultHeight] = [256, 256]\nconst defaultLayers = 5\nconst defaultFilters = 8\n\nconst App: React.FC = () => {\n    const [state, dispatchState] = useAppState()\n\n    function setWidth(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                width: value\n            }\n        })\n    }\n\n    function setHeight(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                height: value\n            }\n        })\n    }\n\n    function setLayers(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                layers: value\n            }\n        })\n    }\n\n    function setFilters(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                filters: value\n            }\n        })\n    }\n\n    useEffect(() => {\n        if (state.generating && !state.requestRun) {\n            dispatchState({ type: \"incrementIteration\" })\n            dispatchState({ type: \"setRequestRun\", requestRun: true })\n        }\n    }, [state.requestRun, state.generating, dispatchState])\n\n    const canvas = useRef<HTMLCanvasElement>(null)\n\n    const [selectedImage, setSelectedImage] = useState<HTMLImageElement | null>(null)\n\n    useEffect(() => {\n        if (selectedImage !== null) {\n            const context = canvas.current!.getContext(\"2d\")!\n            context.drawImage(selectedImage, 0, 0, state.algorithmSettings.width, state.algorithmSettings.height)\n            const imageData = context.getImageData(0, 0, state.algorithmSettings.width, state.algorithmSettings.height).data\n            dispatchState({\n                type: \"setSourceImage\",\n                image: Array.from(imageData)\n            })\n        }\n    }, [selectedImage, state.algorithmSettings.width, state.algorithmSettings.height, dispatchState])\n\n    function onImageSelected(files: File[]) {\n        setSelectedImage(null)\n\n        const image = new Image()\n\n        image.onload = function (evt: any) {\n            setSelectedImage(image)\n        }\n\n        const file = files[0]\n        const reader = new FileReader()\n\n        reader.onload = function (evt: any) {\n            if (evt.target.readyState === FileReader.DONE) {\n                image.src = evt.target.result\n            }\n        }\n\n        reader.readAsDataURL(file)\n    }\n\n    const { getRootProps, getInputProps } = useDropzone({\n        accept: \"image/*\",\n        onDrop: onImageSelected,\n        disabled: state.generating || state.running\n    })\n\n    const statusText = useMemo(() => {\n        if (state.generating && state.running) {\n            return `Running, iteration: ${state.iteration}. Click an image to save it.`\n        } else if (state.generating && !state.running) {\n            return \"Starting, your browser might freeze for a while...\"\n        } else if (!state.generating && state.running) {\n            return \"Stopping...\"\n        } else if (!state.generating && !state.running && !state.sourceImage) {\n            return \"Click on the empty canvas to select an image or drop an image on it. None of your data is uploaded as everything is running client-side.\"\n        } else if (!state.generating && !state.running) {\n            return \"Click start\"\n        }\n\n    }, [state.generating, state.running, state.sourceImage, state.iteration])\n\n    return (\n        <div>\n            <Container>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand>\n                        Deep Image Prior\n                    </Navbar.Brand>\n                    <Nav.Link href=\"https://github.com/RobinKa/web-deep-image-prior\">Source code</Nav.Link>\n                    <Nav.Link href=\"https://arxiv.org/abs/1711.10925\">Paper</Nav.Link>\n                </Navbar>\n            </Container>\n            <Container style={{marginTop: \"20px\"}}>\n                <Col>\n                    <Row>\n                        <Col>\n                            <div style={{ textAlign: \"center\" }} {...getRootProps()}>\n                                <input {...getInputProps()} />\n                                <canvas style={{ boxShadow: \"0px 0px 5px gray\" }} ref={canvas} width={state.algorithmSettings.width} height={state.algorithmSettings.height} />\n                            </div>\n                        </Col>\n                        <Col>\n                            <div style={{ textAlign: \"center\" }}>\n                                <Slider disabled={state.generating || state.running} defaultValue={defaultWidth} min={0} max={1024} step={32} onChange={value => setWidth(value)} />\n                                <label>Width: {state.algorithmSettings.width}</label>\n                            </div>\n                            <div style={{ textAlign: \"center\" }}>\n                                <Slider disabled={state.generating || state.running} defaultValue={defaultHeight} min={0} max={1024} step={32} onChange={value => setHeight(value)} />\n                                <label>Height: {state.algorithmSettings.height}</label>\n                            </div>\n                            <div style={{ textAlign: \"center\" }}>\n                                <Slider disabled={state.generating || state.running} defaultValue={defaultLayers} min={1} max={20} step={1} onChange={value => setLayers(value)} />\n                                <label>Layers: {state.algorithmSettings.layers}</label>\n                            </div>\n                            <div style={{ textAlign: \"center\" }}>\n                                <Slider disabled={state.generating || state.running} defaultValue={defaultFilters} min={1} max={256} step={1} onChange={value => setFilters(value)} />\n                                <label>Filters: {state.algorithmSettings.filters}</label>\n                            </div>\n\n                            <p style={{ fontSize: \"20px\" }}>{statusText}</p>\n\n                            <div style={{ textAlign: \"center\" }}>\n                                <Painter state={state} dispatchState={dispatchState} />\n\n                                <Button style={{ visibility: !state.running && !state.generating && state.sourceImage ? \"visible\" : \"hidden\" }} onClick={() => dispatchState({ type: \"start\" })}>Start</Button>\n                                <Button style={{ visibility: state.running && state.generating ? \"visible\" : \"hidden\" }} onClick={() => dispatchState({ type: \"pause\" })}>Stop</Button>\n                                <Button onClick={() => dispatchState({ type: \"reset\" })}>Reset</Button>\n                            </div>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col>\n                    <Carousel onClickItem={(index: number, item: React.ReactNode) => FileSaver.saveAs(state.images[index].uri, `image_iter${state.images[index].iteration}.png`)} selectedItem={state.images.length > 0 ? state.images.length - 1 : 0} showArrows={true} autoPlay={false}>\n                        {state.images.map((image: ImageData) =>\n                            <div key={image.uri}>\n                                <img src={image.uri} alt={image.uri} />\n                                <p className=\"legend\">\n                                    Iteration {image.iteration}\n                                </p>\n                            </div>\n                        )}\n                    </Carousel>\n                </Col>\n            </Container>\n        </div>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9'\nimport 'react-app-polyfill/stable'\nimport \"fast-text-encoding/text.min.js\"\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}