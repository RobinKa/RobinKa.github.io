{"version":3,"sources":["sample-images/car_inpaint.png","sample-images/lenna_noisy.png","sample-images/cat_text.png","Painter.tsx","models/UNet.ts","AppState.ts","DrawableCanvas.tsx","LabeledSlider.tsx","LabeledCheckbox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","imageTensorFromFlatArray","flat","width","height","tf","reshape","slice","drawImageTensor","ctx","imageTensor","_ref","canvas","imageData","createImageData","x","y","i","data","Math","min","max","putImageData","Painter","props","state","dispatchState","_useState","useState","_useState2","Object","slicedToArray","model","setModel","_useState3","_useState4","noise","setNoise","_useState5","_useState6","setImageTensor","useMemo","document","createElement","createMemoryCanvas","algorithmSettings","useEffect","step","m","n","it","noiseShape","inputShape","outputFilters","layers","filters","skip","input","shape","downs","push","conv2d","pow","kernelSize","padding","strides","activation","apply","length","ups","last","upsampled","conv2dTranspose","concatenated","concatenate","axis","processed","inputs","outputs","createUNet","inpaint","concat","sourceImage","loss","mask","Array","from","maskCanvas","getContext","getImageData","mt","absoluteDifference","compile","optimizer","asyncToGenerator","regenerator_default","a","mark","_callee","output","wrap","_context","prev","next","fit","batchSize","epochs","predict","array","sent","type","iteration","uri","toDataURL","t0","console","log","undefined","stop","shouldRun","dispose","react_default","updateAppState","action","newState","objectSpread","images","newSettings","image","Error","JSON","stringify","DrawableCanvas","drawing","setDrawing","useRef","tryStartDraw","endDraw","onMove","clientPos","cnv","current","bounds","getBoundingClientRect","mousePos","left","top","beginPath","arc","PI","fillStyle","fill","fillRect","ref","style","opacity","onTouchStart","onTouchEnd","onTouchMove","e","targetTouches","pageX","changedTouches","pageY","onMouseDown","onMouseUp","event","button","reset","onMouseMove","clientX","clientY","LabeledSlider","rc_slider_es","disabled","value","onChange","setValue","label","LabeledCheckbox","checked","evt","target","App","_useAppState","useReducer","_useAppState2","selectedImage","setSelectedImage","context","drawImage","statusText","displayedImage","src","settingsProps","textAlign","comparisonImageUri","setComparisonImageUri","selectImage","_useDropzone","useDropzone","accept","onDrop","files","Image","onload","file","reader","FileReader","readyState","DONE","result","readAsDataURL","getRootProps","getInputProps","columnSizes","xl","l","md","sm","xs","runButtonEnabled","stopButtonEnabled","Container","Navbar","bg","variant","Brand","fontSize","href","Nav","Link","Row","Col","assign","Button","onClick","es_Image","fluid","minWidth","sampleImage1","alt","sampleImage2","sampleImage3","boxShadow","position","display","backgroundImage","maxWidth","bundle_default","leftImage","rightImage","map","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uZCaxC,SAASC,EAAyBC,EAAgBC,EAAeC,GAC7D,OAAOC,IAAaA,IAAYH,GAAMI,QAAQ,CAAC,EAAGF,EAAQD,EAAO,IAAII,MAAM,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAGH,EAAQD,EAAO,IAAK,CAAC,EAAG,EAAG,EAAG,IAc/H,SAASK,EAAgBC,EAA+BC,GAKpD,IALiF,IAAAC,EACzD,CAACF,EAAIG,OAAOT,MAAOM,EAAIG,OAAOR,QAA/CD,EAD0EQ,EAAA,GACnEP,EADmEO,EAAA,GAG3EE,EAAYJ,EAAIK,gBAAgBX,EAAOC,GAEpCW,EAAI,EAAGA,EAAIZ,EAAOY,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIZ,EAAQY,IAAK,CAC7B,IAAMC,EAAIF,EAAIC,EAAIb,EAClBU,EAAUK,KAAS,EAAJD,EAAQ,GAAKE,KAAKC,IAAI,IAAKD,KAAKE,IAAI,EAAG,OAAS,EAAIX,EAAY,GAAGK,GAAGC,GAAG,MACxFH,EAAUK,KAAS,EAAJD,EAAQ,GAAKE,KAAKC,IAAI,IAAKD,KAAKE,IAAI,EAAG,OAAS,EAAIX,EAAY,GAAGK,GAAGC,GAAG,MACxFH,EAAUK,KAAS,EAAJD,EAAQ,GAAKE,KAAKC,IAAI,IAAKD,KAAKE,IAAI,EAAG,OAAS,EAAIX,EAAY,GAAGK,GAAGC,GAAG,MACxFH,EAAUK,KAAS,EAAJD,EAAQ,GAAK,IAIpCR,EAAIa,aAAaT,EAAW,EAAG,GAG5B,SAASU,EAAQC,GAAqB,IACjCC,EAAyBD,EAAzBC,MAAOC,EAAkBF,EAAlBE,cAD0BC,EAGfC,mBAAgC,MAHjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGlCK,EAHkCH,EAAA,GAG3BI,EAH2BJ,EAAA,GAAAK,EAIfN,mBAAoC,MAJrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAIlCE,EAJkCD,EAAA,GAI3BE,EAJ2BF,EAAA,GAAAG,EAKHV,mBAAoC,MALjCW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAKlC5B,EALkC6B,EAAA,GAKrBC,EALqBD,EAAA,GAOnC3B,EAAS6B,kBAAQ,WACnB,OAjCR,SAA4BtC,EAAeC,GACvC,IAAMQ,EAAS8B,SAASC,cAAc,UAGtC,OAFA/B,EAAOT,MAAQA,EACfS,EAAOR,OAASA,EACTQ,EA6BIgC,CAAmBnB,EAAMoB,kBAAkB1C,MAAOsB,EAAMoB,kBAAkBzC,SAClF,CAACqB,EAAMoB,kBAAkB1C,MAAOsB,EAAMoB,kBAAkBzC,SA+F3D,OA7FA0C,oBAAU,WACN,GAAmB,YAAfrB,EAAMsB,KAAoB,CAC1B,IAAIC,EAAIhB,EACJiB,EAAIb,EACJc,EAAKxC,EAET,GAAU,OAANsC,GAAoB,OAANC,GAAqB,OAAPC,EAAa,CACzC,IAAMC,EAAuC,CAAC1B,EAAMoB,kBAAkB1C,MAAOsB,EAAMoB,kBAAkBzC,OAAQ,GAG7G4C,ECjET,SAAoBI,EAAsCC,EAAuBC,EAAgBC,EAAiBC,GAIrH,IAHA,IAAMC,EAAQpD,IAAS,CAAEqD,MAAON,IAE1BO,EAAQ,CAACF,GACNxC,EAAI,EAAGA,EAAIqC,EAAQrC,IACxB0C,EAAMC,KAAKvD,IAAUwD,OAAO,CACxBN,QAASpC,KAAKC,IAAI,IAAKD,KAAK2C,IAAI,EAAG7C,GAAKsC,GACxCQ,WAAY,CAAC,EAAG,GAChBC,QAAS,OACTC,QAAS,EACTC,WAAY,QACbC,MAAMR,EAAMA,EAAMS,OAAS,KAIlC,IADA,IAAMC,EAAM,CAACV,EAAMA,EAAMS,OAAS,IACzBnD,EAAI,EAAGA,EAAIqC,EAAQrC,IAAK,CAC7B,IAAMqD,EAAOrD,IAAMqC,EAAS,EAEtBiB,EAAYlE,IAAUmE,gBAAgB,CACxCjB,QAASpC,KAAKC,IAAI,IAAKD,KAAK2C,IAAI,EAAGR,EAASrC,EAAI,GAAKsC,GACrDQ,WAAY,CAAC,EAAG,GAChBC,QAAS,OACTC,QAAS,EACTC,WAAY,QACbC,MAAME,EAAIA,EAAID,OAAS,IAEpBK,EAAejB,EAAOnD,IAAUqE,YAAY,CAACC,MAAO,IAAIR,MAAM,CAACI,EAAWZ,EAAML,EAASrC,EAAI,KAAOsD,EAEpGK,EAAYvE,IAAUwD,OAAO,CAC/BN,QAASe,EAAOjB,EAAgBlC,KAAKC,IAAI,IAAKD,KAAK2C,IAAI,EAAGR,EAASrC,EAAI,GAAKsC,GAC5EQ,WAAY,CAAC,EAAG,GAChBC,QAAS,OACTC,QAAS,EACTC,WAAYI,EAAO,OAAS,QAC7BH,MAAMM,GAETJ,EAAIT,KAAKgB,GAGb,OAAOvE,IAAS,CAACwE,OAAQpB,EAAOqB,QAAST,EAAIA,EAAID,OAAS,KD0B1CW,CAAW5B,EAFO,EAEoB1B,EAAMoB,kBAAkBS,OAAQ7B,EAAMoB,kBAAkBU,SAAU9B,EAAMoB,kBAAkBmC,SAEpI/B,EAAI5C,IAAgB,CAAC,GAAG4E,OAAO9B,IApDrBpC,EAsDYd,EAAyBwB,EAAMyD,YAAczD,EAAMoB,kBAAkB1C,MAAOsB,EAAMoB,kBAAkBzC,QAA1H8C,EArDL7C,IAAOA,IAAOU,EAAG,OAAQ,GAuDpBkB,EAASe,GACTX,EAASY,GACTT,EAAeU,GAEf,IAAIiC,EAAgC,oBAEpC,GAAI1D,EAAMoB,kBAAkBmC,QAAS,CACjC,IAAMI,EAAOC,MAAMC,KAAK7D,EAAM8D,WAAYC,WAAW,MAAOC,aAAa,EAAG,EAAGhE,EAAMoB,kBAAkB1C,MAAOsB,EAAMoB,kBAAkBzC,QAAQc,MACxIwE,EAAKrF,IAAOJ,EAAyBmF,EAAM3D,EAAMoB,kBAAkB1C,MAAOsB,EAAMoB,kBAAkBzC,QAAS,KACjH+E,EAAO,SAACpE,EAAcC,GAClB,OAAOX,IAAUsF,mBAAmB5E,EAAGC,EAAG0E,IAIlD1C,EAAE4C,QAAQ,CACNC,UAAW,OACXV,KAAMA,IAIdrD,OAAAgE,EAAA,EAAAhE,CAAAiE,EAAAC,EAAAC,KAAC,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEavD,EAAEwD,IAAIvD,EAAGC,EAAI,CACfuD,UAAW,EACXC,OAAQ,KAJnB,cAAAL,EAAAE,KAAA,EAO6BvD,EAAE2D,QAAQ1D,GAAiB2D,QAPxD,OAOaT,EAPbE,EAAAQ,KASOrG,EAAgBI,EAAO4E,WAAW,MAAQW,GAE1CzE,EAAc,CACVoF,KAAM,aACNjG,UAAW,CACPkG,UAAWtF,EAAMsF,UACjBC,IAAKpG,EAAOqG,UAAU,gBAfrCZ,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,SAoBOc,QAAQC,IAAR,iCAAAnC,OAAAoB,EAAAa,KAEAxF,EAAc,CACVoF,KAAM,aACNjG,eAAWwG,IAxBtB,yBAAAhB,EAAAiB,SAAApB,EAAA,iBAADpE,GA5EZ,IAA0Bf,GA0GnB,CAACU,EAAMsB,OAEVD,oBAAU,WACa,iBAAfrB,EAAMsB,MAA4BtB,EAAM8F,YAC1B,OAAVvF,GACAA,EAAMwF,UAGU,OAAhB9G,GACAA,EAAY8G,UAGF,OAAVpF,GACAA,EAAMoF,UAGVvF,EAAS,MACTO,EAAe,MACfH,EAAS,MAETX,EAAc,CACVoF,KAAM,cAIf,CAACrF,EAAM8F,UAAW9F,EAAMsB,OAEpB0E,EAAAzB,EAAArD,cAAA,YAhJXtC,uFEkDA,SAASqH,EAAejG,EAAiBkG,GACrC,IAAMC,EAAQ9F,OAAA+F,EAAA,EAAA/F,CAAA,GAAQL,GAEtB,OAAQkG,EAAOb,MACX,IAAK,QACDc,EAASE,OAAS,GAClBF,EAASL,WAAY,EACrBK,EAASb,UAAY,EACrBa,EAAS/E,kBAAoB,CACzBU,QAAS,EACTD,OAAQ,EACRnD,MAAO,IACPC,OAAQ,IACR4E,SAAS,GAEb,MACJ,IAAK,QACD4C,EAASL,WAAY,EACrB,MACJ,IAAK,QACDK,EAASL,WAAY,EACrB,MACJ,IAAK,oBACDK,EAAS/E,kBAAoB8E,EAAOI,YACpCH,EAASE,OAAS,GAClBF,EAASb,UAAY,EACrB,MACJ,IAAK,iBACDa,EAAS1C,YAAcyC,EAAOK,MAC9BJ,EAASE,OAAS,GAClBF,EAASb,UAAY,EACrB,MACJ,IAAK,aACGa,EAASL,YACTK,EAASb,WAAa,EAClBY,EAAO9G,WACP+G,EAASE,OAAOlE,KAAK+D,EAAO9G,YAGpC+G,EAAS7E,KAAO,eAChB,MACJ,IAAK,UACD6E,EAAS7E,KAAO,OAChB6E,EAASb,UAAY,EACrB,MACJ,IAAK,YACDa,EAAS7E,KAAO,UAChB,MACJ,IAAK,gBACD6E,EAASrC,WAAaoC,EAAOpC,WAC7B,MACJ,QACI,MAAM,IAAI0C,MAAM,qCAAuCC,KAAKC,UAAUR,IAG9E,OAAOC,iCCtGI,SAASQ,EAAe5G,GAA4B,IAAAb,EACvC,CAACa,EAAMC,MAAMoB,kBAAkB1C,MAAOqB,EAAMC,MAAMoB,kBAAkBzC,QAArFD,EADwDQ,EAAA,GACjDP,EADiDO,EAAA,GAEzD4E,EAAa/D,EAAMC,MAAM8D,WACzB7D,EAAgBF,EAAME,cAHmCC,EAKjCC,oBAAS,GALwBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAKxD0G,EALwDxG,EAAA,GAK/CyG,EAL+CzG,EAAA,GAOzDjB,EAAS2H,iBAA0B,MAEzC,SAASC,IACoB,SAArBhH,EAAMC,MAAMsB,MAAoBvB,EAAMC,MAAM8F,WAC5Ce,GAAW,GAInB,SAASG,IACLH,GAAW,GAkBf,SAASI,EAAOC,GACZ,GAAIN,EAAS,CACT,IAAMO,EAAMhI,EAAOiI,QACbpI,EAAMmI,EAAIpD,WAAW,MACrBsD,EAASF,EAAIG,wBAEbC,EAAW,CAACL,EAAU,GAAKG,EAAOG,KAAMN,EAAU,GAAKG,EAAOI,KAGpEzI,EAAI0I,YACJ1I,EAAI2I,IAAIJ,EAAS,GAAIA,EAAS,GAHf,EAG2B,EAAG,EAAI7H,KAAKkI,IACtD5I,EAAI6I,UAAY,QAChB7I,EAAI8I,QA2BZ,OAhBAzG,oBAAU,WACN,IACMrC,EADMG,EAAOiI,QACHrD,WAAW,MAC3B/E,EAAI6I,UAAY,QAChB7I,EAAI+I,SAAS,EAAG,EAAGrJ,EAAOC,IAC3B,CAACQ,EAAQT,EAAOC,IAEnB0C,oBAAU,WACFlC,EAAOiI,UAAYtD,GACnB7D,EAAc,CACVoF,KAAM,gBACNvB,WAAY3E,EAAOiI,WAG5B,CAACjI,EAAQ2E,EAAY7D,IAGpB+F,EAAAzB,EAAArD,cAAA,UAAQxC,MAAOA,EAAOC,OAAQA,EAAQqJ,IAAK7I,EACvC8I,MAAO,CAAEvJ,MAAOA,EAAOC,OAAQA,EAAQuJ,QAAS,IAChDC,aAAcpB,EAAcqB,WAAYpB,EAASqB,YA1BzD,SAAqBC,GACjBrB,EAAO,CACHqB,EAAEC,cAAc,GAAKD,EAAEC,cAAc,GAAGC,MAAQF,EAAEG,eAAeH,EAAEG,eAAe9F,OAAS,GAAG6F,MAC9FF,EAAEC,cAAc,GAAKD,EAAEC,cAAc,GAAGG,MAAQJ,EAAEG,eAAeH,EAAEG,eAAe9F,OAAS,GAAG+F,SAwB9FC,YAAa5B,EAAc6B,UAlDnC,SAAmBC,GACf7B,IACqB,IAAjB6B,EAAMC,QAVd,WACI,IACM9J,EADMG,EAAOiI,QACHrD,WAAW,MAE3B/E,EAAI6I,UAAY,QAChB7I,EAAI+I,SAAS,EAAG,EAAGrJ,EAAOC,GAMtBoK,IA+CiDC,YAAa,SAAAV,GAAC,OAAIrB,EAAO,CAACqB,EAAEW,QAASX,EAAEY,0BCxErF,SAASC,EAAcpJ,GAClC,OACIiG,EAAAzB,EAAArD,cAAA,OAAK+G,MAAOlI,EAAMkI,OACdjC,EAAAzB,EAAArD,cAACkI,EAAA,EAAD,CAAQC,SAAUtJ,EAAMsJ,SAAUC,MAAOvJ,EAAMuJ,MAAO3J,IAAKI,EAAMJ,IAAKC,IAAKG,EAAMH,IAAK0B,KAAMvB,EAAMuB,KAAMiI,SAAU,SAAAD,GAAK,OAAIvJ,EAAMyJ,SAASF,MAC1ItD,EAAAzB,EAAArD,cAAA,aAAQnB,EAAM0J,MAAd,KAAuB1J,EAAMuJ,QCR1B,SAASI,EAAgB3J,GACpC,OACIiG,EAAAzB,EAAArD,cAAA,OAAK+G,MAAOlI,EAAMkI,OACdjC,EAAAzB,EAAArD,cAAA,SAAOmE,KAAK,WAAWgE,SAAUtJ,EAAMsJ,SAAUM,QAAS5J,EAAMuJ,MAAOC,SAAU,SAAAK,GAAG,OAAI7J,EAAMyJ,SAASI,EAAIC,OAAOF,YAClH3D,EAAAzB,EAAArD,cAAA,aAAQnB,EAAM0J,kECkPXK,EA/OO,WAAM,IAAAC,EJkGjBC,qBAAW/D,EAAgB,CAC9B3E,KAAM,OACNwE,WAAW,EACXR,UAAW,EACXe,OAAQ,GACRjF,kBAAmB,CACfU,QAAS,EACTD,OAAQ,EACRnD,MAAO,IACPC,OAAQ,IACR4E,SAAS,GAEbE,YAAa,KACbK,WAAY,OI/GQmG,EAAA5J,OAAAC,EAAA,EAAAD,CAAA0J,EAAA,GACjB/J,EADiBiK,EAAA,GACVhK,EADUgK,EAAA,GAqDxB5I,oBAAU,WACFrB,EAAM8F,WAA4B,YAAf9F,EAAMsB,MACzBrB,EAAc,CAAEoF,KAAM,eAE3B,CAACrF,EAAMsB,KAAMtB,EAAM8F,UAAW7F,IAEjC,IAAMd,EAAS6B,kBAAQ,WACnB,IAAMmG,EAAMlG,SAASC,cAAc,UAGnC,OAFAiG,EAAIzI,MAAQsB,EAAMoB,kBAAkB1C,MACpCyI,EAAIxI,OAASqB,EAAMoB,kBAAkBzC,OAC9BwI,GACR,CAACnH,EAAMoB,kBAAkB1C,MAAOsB,EAAMoB,kBAAkBzC,SAhEnCuB,EAkEkBC,mBAAkC,MAlEpDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAkEjBgK,EAlEiB9J,EAAA,GAkEF+J,EAlEE/J,EAAA,GAoExBiB,oBAAU,WACN,GAAsB,OAAlB6I,EAAwB,CACxB,IAAME,EAAUjL,EAAO4E,WAAW,MAClCqG,EAAQC,UAAUH,EAAe,EAAG,EAAGlK,EAAMoB,kBAAkB1C,MAAOsB,EAAMoB,kBAAkBzC,QAC9F,IAAMS,EAAYgL,EAAQpG,aAAa,EAAG,EAAGhE,EAAMoB,kBAAkB1C,MAAOsB,EAAMoB,kBAAkBzC,QAAQc,KAC5GQ,EAAc,CACVoF,KAAM,iBACNkB,MAAO3C,MAAMC,KAAKzE,OAG3B,CAAC8K,EAAelK,EAAMoB,kBAAkB1C,MAAOsB,EAAMoB,kBAAkBzC,OAAQsB,EAAed,IAuBjG,IAAMmL,EAAatJ,kBAAQ,WACvB,MAAmB,SAAfhB,EAAMsB,MAAmBtB,EAAM8F,UAC/B,uBAAAtC,OAA8BxD,EAAMsF,UAApC,KACsB,SAAftF,EAAMsB,MAAmBtB,EAAM8F,UAC/B,qDACe,SAAf9F,EAAMsB,MAAoBtB,EAAM8F,UAEjB,SAAf9F,EAAMsB,MAAoBtB,EAAM8F,WAAc9F,EAAMyD,YAErC,SAAfzD,EAAMsB,MAAoBtB,EAAM8F,eAApC,EACI,cAFA,mBAFA,eAOZ,CAAC9F,EAAMsB,KAAMtB,EAAM8F,UAAW9F,EAAMyD,YAAazD,EAAMsF,YAEpDiF,EAAiBL,EAAgBA,EAAcM,IAAM,GAOrDC,EAA+B,CACjCxC,MAAO,CACHyC,UAAW,UAEfrB,SAAUrJ,EAAM8F,WAA4B,SAAf9F,EAAMsB,MA/Hfb,EAkI4BN,mBAAiB,IAlI7CO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAkIjBkK,EAlIiBjK,EAAA,GAkIGkK,EAlIHlK,EAAA,GAoIlBmK,EAAc,SAACjB,GACZa,EAAcpB,UACfc,EAAiBP,EAAIC,SAtILiB,EA0IgBC,YAAY,CAChDC,OAAQ,UACRC,OA5DJ,SAAyBC,GACrBf,EAAiB,MAEjB,IAAM5D,EAAQ,IAAI4E,MAElB5E,EAAM6E,OAAS,SAAUxB,GACrBO,EAAiB5D,IAGrB,IAAM8E,EAAOH,EAAM,GACbI,EAAS,IAAIC,WAEnBD,EAAOF,OAAS,SAAUxB,GAClBA,EAAIC,OAAO2B,aAAeD,WAAWE,OACrClF,EAAMiE,IAAMZ,EAAIC,OAAO6B,SAI/BJ,EAAOK,cAAcN,IA2CrBhC,SAAUoB,EAAcpB,WAHpBuC,EA1IgBd,EA0IhBc,aAAcC,EA1IEf,EA0IFe,cAMhBC,EAAc,CAChBC,GAAI,EACJC,EAAG,EACHC,GAAI,EACJC,GAAI,EACJC,GAAI,GAGFC,GAAoBpM,EAAM8F,WAA4B,SAAf9F,EAAMsB,MAAwC,OAArBtB,EAAM8D,YAA6C,OAAtB9D,EAAMyD,YACnG4I,EAAoBrM,EAAM8F,WAA4B,SAAf9F,EAAMsB,KAEnD,OACI0E,EAAAzB,EAAArD,cAAA,WACI8E,EAAAzB,EAAArD,cAACpB,EAAD,CAASE,MAAOA,EAAOC,cAAeA,IAEtC+F,EAAAzB,EAAArD,cAACoL,EAAA,EAAD,KACItG,EAAAzB,EAAArD,cAACqL,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtBzG,EAAAzB,EAAArD,cAACqL,EAAA,EAAOG,MAAR,KACI1G,EAAAzB,EAAArD,cAAA,+BAGA8E,EAAAzB,EAAArD,cAAA,OAAK+G,MAAO,CAAE0E,SAAU,SAAxB,qBACsB3G,EAAAzB,EAAArD,cAAA,KAAG0L,KAAK,8BAAR,UAG1B5G,EAAAzB,EAAArD,cAAC2L,EAAA,EAAIC,KAAL,CAAUF,KAAK,mDAAf,eACA5G,EAAAzB,EAAArD,cAAC2L,EAAA,EAAIC,KAAL,CAAUF,KAAK,oDAAf,yBACA5G,EAAAzB,EAAArD,cAAC2L,EAAA,EAAIC,KAAL,CAAUF,KAAK,oCAAf,WAGR5G,EAAAzB,EAAArD,cAACoL,EAAA,EAAD,KACItG,EAAAzB,EAAArD,cAAC6L,EAAA,EAAD,KACI/G,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD3M,OAAA4M,OAAA,GAASnB,EAAT,CAAsB7D,MAAO,CAAE1F,QAAS,UACpCyD,EAAAzB,EAAArD,cAAC6L,EAAA,EAAD,KACI/G,EAAAzB,EAAArD,cAAA,KAAG+G,MAAO,CAAE0E,SAAU,SAAWrC,IAGrCtE,EAAAzB,EAAArD,cAAC6L,EAAA,EAAD,CAAK9E,MAAO,CAAEyC,UAAW,WACrB1E,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD,KACIhH,EAAAzB,EAAArD,cAACgM,EAAA,EAAD,CAAQ7D,UAAW+C,EAAkBe,QAAS,kBAAMlN,EAAc,CAAEoF,KAAM,YAA1E,SACAW,EAAAzB,EAAArD,cAACgM,EAAA,EAAD,CAAQ7D,UAAWgD,EAAmBc,QAAS,kBAAMlN,EAAc,CAAEoF,KAAM,YAA3E,QACAW,EAAAzB,EAAArD,cAACgM,EAAA,EAAD,CAAQC,QAAS,kBAAMlN,EAAc,CAAEoF,KAAM,YAA7C,YAIZW,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD3M,OAAA4M,OAAA,GAASnB,EAAT,CAAsB7D,MAAO,CAAE1F,QAAS,UACpCyD,EAAAzB,EAAArD,cAAC6L,EAAA,EAAD,KACI/G,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD,KAAKhH,EAAAzB,EAAArD,cAACkM,EAAA,EAAD,CAASC,OAAK,EAACpF,MAAO,CAAEqF,SAAU,QAAU9C,IAAK+C,IAAcC,IAAKD,IAAcJ,QAAStC,KAChG7E,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD,KAAKhH,EAAAzB,EAAArD,cAACkM,EAAA,EAAD,CAASC,OAAK,EAACpF,MAAO,CAAEqF,SAAU,QAAU9C,IAAKiD,IAAcD,IAAKC,IAAcN,QAAStC,KAChG7E,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD,KAAKhH,EAAAzB,EAAArD,cAACkM,EAAA,EAAD,CAASC,OAAK,EAACpF,MAAO,CAAEqF,SAAU,QAAU9C,IAAKkD,IAAcF,IAAKE,IAAcP,QAAStC,MAEpG7E,EAAAzB,EAAArD,cAAC6L,EAAA,EAAD,KACI/G,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD,KACIhH,EAAAzB,EAAArD,cAAA,MAAAb,OAAA4M,OAAA,CAAKhF,MAAO,CAAEyC,UAAW,WAAgBkB,KACrC5F,EAAAzB,EAAArD,cAAA,QAAW2K,KACX7F,EAAAzB,EAAArD,cAAA,KAAG+G,MAAO,CAAE0E,SAAU,SAAtB,gCAKhB3G,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD3M,OAAA4M,OAAA,GAASnB,EAAT,CAAsB7D,MAAO,CAAE1F,QAAS,UACpCyD,EAAAzB,EAAArD,cAAA,OAAK+G,MAAO,CAAEvJ,MAAOsB,EAAMoB,kBAAkB1C,MAAOC,OAAQqB,EAAMoB,kBAAkBzC,OAAQgP,UAAW,qBACnG3H,EAAAzB,EAAArD,cAAA,OAAKsJ,IAAKD,EAAgBiD,IAAI,GAAGvF,MAAO,CAAEvJ,MAAOsB,EAAMoB,kBAAkB1C,MAAOC,OAAQqB,EAAMoB,kBAAkBzC,OAAQiP,SAAU,cAClI5H,EAAAzB,EAAArD,cAAA,OAAK+G,MAAO,CAAE4F,QAAS7N,EAAMoB,kBAAkBmC,QAAU,QAAU,SAC/DyC,EAAAzB,EAAArD,cAACyF,EAAD,CAAgB3G,MAAOA,EAAOC,cAAeA,EAAe6N,gBAAiBvD,OAIzFvE,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD3M,OAAA4M,OAAA,GAASnB,EAAT,CAAsB7D,MAAO,CAAE1F,QAAS,UACpCyD,EAAAzB,EAAArD,cAAA,KAAG+G,MAAO,CAAEyC,UAAW,SAAUiC,SAAU,SAA3C,YACA3G,EAAAzB,EAAArD,cAACiI,EAAD9I,OAAA4M,OAAA,GAAmBxC,EAAnB,CAAkC9K,IAAK,GAAIC,IAAK,KAAM0B,KAAM,GAAIgI,MAAOtJ,EAAMoB,kBAAkB1C,MAAO8K,SAnN1H,SAAkBF,GACdrJ,EAAc,CACVoF,KAAM,oBACNiB,YAAYjG,OAAA+F,EAAA,EAAA/F,CAAA,GACLL,EAAMoB,kBADF,CAEP1C,MAAO4K,OA8M2HG,MAAO,WACjIzD,EAAAzB,EAAArD,cAACiI,EAAD9I,OAAA4M,OAAA,GAAmBxC,EAAnB,CAAkC9K,IAAK,GAAIC,IAAK,KAAM0B,KAAM,GAAIgI,MAAOtJ,EAAMoB,kBAAkBzC,OAAQ6K,SA1M3H,SAAmBF,GACfrJ,EAAc,CACVoF,KAAM,oBACNiB,YAAYjG,OAAA+F,EAAA,EAAA/F,CAAA,GACLL,EAAMoB,kBADF,CAEPzC,OAAQ2K,OAqM4HG,MAAO,YACnIzD,EAAAzB,EAAArD,cAACiI,EAAD9I,OAAA4M,OAAA,GAAmBxC,EAAnB,CAAkC9K,IAAK,EAAGC,IAAK,GAAI0B,KAAM,EAAGgI,MAAOtJ,EAAMoB,kBAAkBS,OAAQ2H,SAjMvH,SAAmBF,GACfrJ,EAAc,CACVoF,KAAM,oBACNiB,YAAYjG,OAAA+F,EAAA,EAAA/F,CAAA,GACLL,EAAMoB,kBADF,CAEPS,OAAQyH,OA4LwHG,MAAO,YAC/HzD,EAAAzB,EAAArD,cAACiI,EAAD9I,OAAA4M,OAAA,GAAmBxC,EAAnB,CAAkC9K,IAAK,EAAGC,IAAK,IAAK0B,KAAM,EAAGgI,MAAOtJ,EAAMoB,kBAAkBU,QAAS0H,SAxLzH,SAAoBF,GAChBrJ,EAAc,CACVoF,KAAM,oBACNiB,YAAYjG,OAAA+F,EAAA,EAAA/F,CAAA,GACLL,EAAMoB,kBADF,CAEPU,QAASwH,OAmL0HG,MAAO,aAElIzD,EAAAzB,EAAArD,cAACwI,EAADrJ,OAAA4M,OAAA,GAAqBxC,EAArB,CAAoCnB,MAAOtJ,EAAMoB,kBAAkBmC,QAASiG,SAhLhG,SAAoBF,GAChBrJ,EAAc,CACVoF,KAAM,oBACNiB,YAAYjG,OAAA+F,EAAA,EAAA/F,CAAA,GACLL,EAAMoB,kBADF,CAEPmC,QAAS+F,OA2KiGG,MAAO,eAGjHzD,EAAAzB,EAAArD,cAAC6L,EAAA,EAAD,KACI/G,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD,MACAhH,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD,CAAK/E,MAAO,CAAE8F,SAAU/N,EAAMoB,kBAAkB1C,QAC5CsH,EAAAzB,EAAArD,cAAC8M,EAAAzJ,EAAD,CAAmB0J,UAAW1D,EAAgB2D,WAAYvD,KAE9D3E,EAAAzB,EAAArD,cAAC8L,EAAA,EAAD,OAEJhH,EAAAzB,EAAArD,cAAC6L,EAAA,EAAD,KACK/M,EAAMqG,OAAO8H,IAAI,SAAC5H,GAAD,OACdP,EAAAzB,EAAArD,cAAA,OAAKxC,MAAM,OAAO0P,IAAK7H,EAAMhB,IAAKiF,IAAKjE,EAAMhB,IAAKiI,IAAKjH,EAAMhB,IAAK4H,QAAS,SAACvD,GAAD,OAASgB,EAAsBrE,EAAMhB,cC5OlI8I,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpP,QACf8O,UAAUC,cAAcQ,YAI1B7J,QAAQC,IACN,iHAKEkJ,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBxJ,QAAQC,IAAI,sCAGRkJ,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,UAO5BQ,MAAM,SAAAC,GACLjK,QAAQiK,MAAM,4CAA6CA,KC9FjEC,IAASC,OAAO7J,EAAAzB,EAAArD,cAAC4O,EAAD,MAAS7O,SAAS8O,eAAe,SDiB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIkB,IACnBC,kBACD1B,OAAOC,SAAS5B,MAEJsD,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAApL,OAAMyM,kBAAN,sBAEP5B,GAgEV,SAAiCO,EAAeC,GAE9CuB,MAAMxB,GACHK,KAAK,SAAAoB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BV,OAAOC,SAASqC,aAKpBlC,EAAgBC,EAAOC,KAG1Ba,MAAM,WACLhK,QAAQC,IACN,mEArFAmL,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,KAAK,WACjCvJ,QAAQC,IACN,gHAMJgJ,EAAgBC,EAAOC,MC3C/BE","file":"static/js/main.2c5de49a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/car_inpaint.82954de1.png\";","module.exports = __webpack_public_path__ + \"static/media/lenna_noisy.7637940c.png\";","module.exports = __webpack_public_path__ + \"static/media/cat_text.f7cb4fcc.png\";","import * as tf from \"@tensorflow/tfjs\"\r\nimport React, { Dispatch, useEffect, useState, useMemo } from \"react\"\r\nimport { createUNet } from \"./models/UNet\"\r\nimport { AppState, AppUpdateAction } from \"./AppState\"\r\nimport { LossOrMetricFn } from \"@tensorflow/tfjs-layers/dist/types\"\r\n\r\ntf.enableProdMode()\r\n\r\ntype PainterProps = {\r\n    state: AppState,\r\n    dispatchState: Dispatch<AppUpdateAction>\r\n}\r\n\r\nfunction imageTensorFromFlatArray(flat: number[], width: number, height: number) {\r\n    return tf.transpose(tf.tensor1d(flat).reshape([1, height, width, 4]).slice([0, 0, 0, 0], [1, height, width, 3]), [0, 2, 1, 3])\r\n}\r\n\r\nfunction scaleImageTensor(x: tf.Tensor) {\r\n    return tf.sub(tf.div(x, 127.5), 1)\r\n}\r\n\r\nfunction createMemoryCanvas(width: number, height: number) {\r\n    const canvas = document.createElement(\"canvas\")\r\n    canvas.width = width\r\n    canvas.height = height\r\n    return canvas\r\n}\r\n\r\nfunction drawImageTensor(ctx: CanvasRenderingContext2D, imageTensor: number[][][][]) {\r\n    const [width, height] = [ctx.canvas.width, ctx.canvas.height]\r\n\r\n    const imageData = ctx.createImageData(width, height)\r\n\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            const i = x + y * width\r\n            imageData.data[i * 4 + 0] = Math.min(255, Math.max(0, 127.5 * (1 + imageTensor[0][x][y][0])))\r\n            imageData.data[i * 4 + 1] = Math.min(255, Math.max(0, 127.5 * (1 + imageTensor[0][x][y][1])))\r\n            imageData.data[i * 4 + 2] = Math.min(255, Math.max(0, 127.5 * (1 + imageTensor[0][x][y][2])))\r\n            imageData.data[i * 4 + 3] = 255\r\n        }\r\n    }\r\n\r\n    ctx.putImageData(imageData, 0, 0)\r\n}\r\n\r\nexport function Painter(props: PainterProps) {\r\n    const { state, dispatchState } = props\r\n\r\n    const [model, setModel] = useState<tf.LayersModel | null>(null)\r\n    const [noise, setNoise] = useState<tf.Tensor<tf.Rank> | null>(null)\r\n    const [imageTensor, setImageTensor] = useState<tf.Tensor<tf.Rank> | null>(null)\r\n\r\n    const canvas = useMemo(() => {\r\n        return createMemoryCanvas(state.algorithmSettings.width, state.algorithmSettings.height)\r\n    }, [state.algorithmSettings.width, state.algorithmSettings.height])\r\n\r\n    useEffect(() => {\r\n        if (state.step === \"runIter\") {\r\n            let m = model\r\n            let n = noise\r\n            let it = imageTensor\r\n\r\n            if (m === null || n === null || it === null) {\r\n                const noiseShape: [number, number, number] = [state.algorithmSettings.width, state.algorithmSettings.height, 1]\r\n                const outputFilters = 3\r\n\r\n                m = createUNet(noiseShape, outputFilters, state.algorithmSettings.layers, state.algorithmSettings.filters, !state.algorithmSettings.inpaint)\r\n\r\n                n = tf.randomNormal([1].concat(noiseShape))\r\n\r\n                it = scaleImageTensor(imageTensorFromFlatArray(state.sourceImage!, state.algorithmSettings.width, state.algorithmSettings.height))\r\n\r\n                setModel(m)\r\n                setNoise(n)\r\n                setImageTensor(it)\r\n\r\n                let loss: string | LossOrMetricFn = \"meanAbsoluteError\"\r\n\r\n                if (state.algorithmSettings.inpaint) {\r\n                    const mask = Array.from(state.maskCanvas!.getContext(\"2d\")!.getImageData(0, 0, state.algorithmSettings.width, state.algorithmSettings.height).data)\r\n                    const mt = tf.div(imageTensorFromFlatArray(mask, state.algorithmSettings.width, state.algorithmSettings.height), 255)\r\n                    loss = (x: tf.Tensor, y: tf.Tensor) => {\r\n                        return tf.losses.absoluteDifference(x, y, mt!)\r\n                    }\r\n                }\r\n\r\n                m.compile({\r\n                    optimizer: \"adam\",\r\n                    loss: loss,\r\n                })\r\n            }\r\n\r\n            (async () => {\r\n                try {\r\n                    await m.fit(n, it, {\r\n                        batchSize: 1,\r\n                        epochs: 20,\r\n                    })\r\n\r\n                    const output = await (m.predict(n) as tf.Tensor).array() as number[][][][]\r\n\r\n                    drawImageTensor(canvas.getContext(\"2d\")!, output)\r\n\r\n                    dispatchState({\r\n                        type: \"finishIter\",\r\n                        imageData: {\r\n                            iteration: state.iteration,\r\n                            uri: canvas.toDataURL(\"image/png\")\r\n                        }\r\n                    })\r\n                }\r\n                catch (e) {\r\n                    console.log(`Exception when running model: ${e}`)\r\n\r\n                    dispatchState({\r\n                        type: \"finishIter\",\r\n                        imageData: undefined\r\n                    })\r\n                }\r\n            })()\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state.step])\r\n\r\n    useEffect(() => {\r\n        if (state.step === \"finishedIter\" && !state.shouldRun) {\r\n            if (model !== null) {\r\n                model.dispose()\r\n            }\r\n\r\n            if (imageTensor !== null) {\r\n                imageTensor.dispose()\r\n            }\r\n\r\n            if (noise !== null) {\r\n                noise.dispose()\r\n            }\r\n\r\n            setModel(null)\r\n            setImageTensor(null)\r\n            setNoise(null)\r\n\r\n            dispatchState({\r\n                type: \"stopped\"\r\n            })\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state.shouldRun, state.step])\r\n\r\n    return <div />\r\n}","import * as tf from \"@tensorflow/tfjs\"\r\n\r\nexport function createUNet(inputShape: [number, number, number], outputFilters: number, layers: number, filters: number, skip: boolean) {\r\n    const input = tf.input({ shape: inputShape })\r\n\r\n    const downs = [input]\r\n    for (let i = 0; i < layers; i++) {\r\n        downs.push(tf.layers.conv2d({\r\n            filters: Math.min(256, Math.pow(2, i) * filters),\r\n            kernelSize: [4, 4],\r\n            padding: \"same\",\r\n            strides: 2,\r\n            activation: \"elu\",\r\n        }).apply(downs[downs.length - 1]) as tf.SymbolicTensor)\r\n    }\r\n\r\n    const ups = [downs[downs.length - 1]]\r\n    for (let i = 0; i < layers; i++) {\r\n        const last = i === layers - 1\r\n\r\n        const upsampled = tf.layers.conv2dTranspose({\r\n            filters: Math.min(256, Math.pow(2, layers - i - 1) * filters),\r\n            kernelSize: [4, 4],\r\n            padding: \"same\",\r\n            strides: 2,\r\n            activation: \"elu\",\r\n        }).apply(ups[ups.length - 1]) as tf.SymbolicTensor\r\n        \r\n        const concatenated = skip ? tf.layers.concatenate({axis: -1}).apply([upsampled, downs[layers - i - 1]]) : upsampled\r\n\r\n        const processed = tf.layers.conv2d({\r\n            filters: last ? outputFilters : Math.min(256, Math.pow(2, layers - i - 1) * filters),\r\n            kernelSize: [4, 4],\r\n            padding: \"same\",\r\n            strides: 1,\r\n            activation: last ? \"tanh\" : \"elu\",\r\n        }).apply(concatenated) as tf.SymbolicTensor\r\n\r\n        ups.push(processed)\r\n    }\r\n\r\n    return tf.model({inputs: input, outputs: ups[ups.length - 1]})\r\n}","import { useReducer } from \"react\"\r\n\r\nexport type ImageData = {\r\n    uri: string\r\n    iteration: number\r\n}\r\n\r\nexport type AlgorithmSettings = {\r\n    filters: number\r\n    layers: number\r\n    width: number\r\n    height: number\r\n    inpaint: boolean\r\n}\r\n\r\nexport type AppState = {\r\n    step: \"idle\" | \"runIter\" | \"finishedIter\"\r\n    shouldRun: boolean\r\n\r\n    images: ImageData[]\r\n    maskCanvas: HTMLCanvasElement | null\r\n    algorithmSettings: AlgorithmSettings\r\n    sourceImage: number[] | null\r\n    iteration: number\r\n}\r\n\r\nexport type AppUpdateReset = { type: \"reset\" }\r\nexport type AppUpdateStart = { type: \"start\" }\r\nexport type AppUpdatePause = { type: \"pause\" }\r\n\r\nexport type AppUpdateAlgorithmSettings = {\r\n    type: \"algorithmSettings\"\r\n    newSettings: AlgorithmSettings\r\n}\r\nexport type AppUpdateSetSourceImage = {\r\n    type: \"setSourceImage\",\r\n    image: number[]\r\n}\r\nexport type AppUpdateFinishIter = {\r\n    type: \"finishIter\",\r\n    imageData: ImageData | undefined\r\n}\r\nexport type AppUpdateSetMaskCanvas = {\r\n    type: \"setMaskCanvas\"\r\n    maskCanvas: HTMLCanvasElement | null\r\n}\r\nexport type AppUpdateStartIter = {\r\n    type: \"startIter\"\r\n}\r\nexport type AppUpdateStopped = {\r\n    type: \"stopped\"\r\n}\r\n\r\nexport type AppUpdateAction = AppUpdateReset | AppUpdateStart | AppUpdatePause |\r\n    AppUpdateAlgorithmSettings | AppUpdateSetSourceImage | AppUpdateFinishIter | AppUpdateSetMaskCanvas | AppUpdateStartIter | AppUpdateStopped\r\n\r\nfunction updateAppState(state: AppState, action: AppUpdateAction) {\r\n    const newState = { ...state }\r\n\r\n    switch (action.type) {\r\n        case \"reset\":\r\n            newState.images = []\r\n            newState.shouldRun = false\r\n            newState.iteration = 0\r\n            newState.algorithmSettings = {\r\n                filters: 8,\r\n                layers: 5,\r\n                width: 256,\r\n                height: 256,\r\n                inpaint: false,\r\n            }\r\n            break\r\n        case \"start\":\r\n            newState.shouldRun = true\r\n            break\r\n        case \"pause\":\r\n            newState.shouldRun = false\r\n            break\r\n        case \"algorithmSettings\":\r\n            newState.algorithmSettings = action.newSettings\r\n            newState.images = []\r\n            newState.iteration = 0\r\n            break\r\n        case \"setSourceImage\":\r\n            newState.sourceImage = action.image\r\n            newState.images = []\r\n            newState.iteration = 0\r\n            break\r\n        case \"finishIter\":\r\n            if (newState.shouldRun) {\r\n                newState.iteration += 1\r\n                if (action.imageData) {\r\n                    newState.images.push(action.imageData)\r\n                }\r\n            }\r\n            newState.step = \"finishedIter\"\r\n            break\r\n        case \"stopped\":\r\n            newState.step = \"idle\"\r\n            newState.iteration = 0\r\n            break\r\n        case \"startIter\":\r\n            newState.step = \"runIter\"\r\n            break\r\n        case \"setMaskCanvas\":\r\n            newState.maskCanvas = action.maskCanvas\r\n            break\r\n        default:\r\n            throw new Error(\"Unhandled action in state update: \" + JSON.stringify(action))\r\n    }\r\n\r\n    return newState\r\n}\r\n\r\nexport function useAppState() {\r\n    return useReducer(updateAppState, {\r\n        step: \"idle\",\r\n        shouldRun: false,\r\n        iteration: 0,\r\n        images: [],\r\n        algorithmSettings: {\r\n            filters: 8,\r\n            layers: 5,\r\n            width: 256,\r\n            height: 256,\r\n            inpaint: false,\r\n        },\r\n        sourceImage: null,\r\n        maskCanvas: null,\r\n    })\r\n}\r\n","import React, { useState, useRef, Dispatch, useEffect } from \"react\"\r\nimport { AppState, AppUpdateAction } from \"./AppState\"\r\n\r\ntype DrawableCanvasProps = {\r\n    state: AppState\r\n    dispatchState: Dispatch<AppUpdateAction>\r\n    backgroundImage: string\r\n}\r\n\r\nexport default function DrawableCanvas(props: DrawableCanvasProps) {\r\n    const [width, height] = [props.state.algorithmSettings.width, props.state.algorithmSettings.height]\r\n    const maskCanvas = props.state.maskCanvas\r\n    const dispatchState = props.dispatchState\r\n\r\n    const [drawing, setDrawing] = useState(false)\r\n\r\n    const canvas = useRef<HTMLCanvasElement>(null)\r\n\r\n    function tryStartDraw() {\r\n        if (props.state.step === \"idle\" && !props.state.shouldRun) {\r\n            setDrawing(true)\r\n        }\r\n    }\r\n\r\n    function endDraw() {\r\n        setDrawing(false)\r\n    }\r\n\r\n    function reset() {\r\n        const cnv = canvas.current!\r\n        const ctx = cnv.getContext(\"2d\")!\r\n\r\n        ctx.fillStyle = \"white\"\r\n        ctx.fillRect(0, 0, width, height)\r\n    }\r\n\r\n    function onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\r\n        endDraw()\r\n        if (event.button === 2) {\r\n            reset()\r\n        }\r\n    }\r\n\r\n    function onMove(clientPos: [number, number]) {\r\n        if (drawing) {\r\n            const cnv = canvas.current!\r\n            const ctx = cnv.getContext(\"2d\")!\r\n            const bounds = cnv.getBoundingClientRect()\r\n\r\n            const mousePos = [clientPos[0] - bounds.left, clientPos[1] - bounds.top]\r\n            const radius = 5\r\n\r\n            ctx.beginPath()\r\n            ctx.arc(mousePos[0], mousePos[1], radius, 0, 2 * Math.PI)\r\n            ctx.fillStyle = \"black\"\r\n            ctx.fill()\r\n        }\r\n    }\r\n\r\n    function onTouchMove(e: React.TouchEvent<HTMLCanvasElement>) {\r\n        onMove([\r\n            e.targetTouches[0] ? e.targetTouches[0].pageX : e.changedTouches[e.changedTouches.length - 1].pageX,\r\n            e.targetTouches[0] ? e.targetTouches[0].pageY : e.changedTouches[e.changedTouches.length - 1].pageY\r\n        ])\r\n    }\r\n\r\n    useEffect(() => {\r\n        const cnv = canvas.current!\r\n        const ctx = cnv.getContext(\"2d\")!\r\n        ctx.fillStyle = \"white\"\r\n        ctx.fillRect(0, 0, width, height)\r\n    }, [canvas, width, height])\r\n\r\n    useEffect(() => {\r\n        if (canvas.current !== maskCanvas) {\r\n            dispatchState({\r\n                type: \"setMaskCanvas\",\r\n                maskCanvas: canvas.current\r\n            })\r\n        }\r\n    }, [canvas, maskCanvas, dispatchState])\r\n\r\n    return (\r\n        <canvas width={width} height={height} ref={canvas}\r\n            style={{ width: width, height: height, opacity: 0.6 }}\r\n            onTouchStart={tryStartDraw} onTouchEnd={endDraw} onTouchMove={onTouchMove}\r\n            onMouseDown={tryStartDraw} onMouseUp={onMouseUp} onMouseMove={e => onMove([e.clientX, e.clientY])} />\r\n    )\r\n}","import React, { CSSProperties } from \"react\"\r\nimport Slider from 'rc-slider'\r\n\r\ntype LabeledSliderProps = {\r\n    disabled: boolean,\r\n    setValue: (value: number) => void\r\n    value: number\r\n    label: string\r\n    min: number\r\n    max: number\r\n    step: number\r\n    style: CSSProperties\r\n}\r\n\r\nexport default function LabeledSlider(props: LabeledSliderProps) {\r\n    return (\r\n        <div style={props.style}>\r\n            <Slider disabled={props.disabled} value={props.value} min={props.min} max={props.max} step={props.step} onChange={value => props.setValue(value)} />\r\n            <label>{props.label}: {props.value}</label>\r\n        </div>\r\n    )\r\n}","import React, { CSSProperties } from \"react\"\r\n\r\ntype LabeledCheckboxProps = {\r\n    disabled: boolean,\r\n    setValue: (value: boolean) => void\r\n    value: boolean\r\n    label: string\r\n    style: CSSProperties\r\n}\r\n\r\nexport default function LabeledCheckbox(props: LabeledCheckboxProps) {\r\n    return (\r\n        <div style={props.style}>\r\n            <input type=\"checkbox\" disabled={props.disabled} checked={props.value} onChange={evt => props.setValue(evt.target.checked)} />\r\n            <label>{props.label}</label>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useMemo, CSSProperties } from 'react'\nimport './App.css'\nimport { Painter } from './Painter'\nimport { Row, Col, Container, Button, Navbar, Nav, Image as BSImage } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'rc-slider/assets/index.css'\nimport { useAppState, ImageData } from './AppState'\nimport { useDropzone } from 'react-dropzone'\nimport ReactCompareImage from \"react-compare-image\"\nimport DrawableCanvas from './DrawableCanvas'\nimport LabeledSlider from './LabeledSlider'\nimport LabeledCheckbox from './LabeledCheckbox'\n\nimport sampleImage1 from \"./sample-images/car_inpaint.png\"\nimport sampleImage2 from \"./sample-images/lenna_noisy.png\"\nimport sampleImage3 from \"./sample-images/cat_text.png\"\n\nconst App: React.FC = () => {\n    const [state, dispatchState] = useAppState()\n\n    function setWidth(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                width: value\n            }\n        })\n    }\n\n    function setHeight(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                height: value\n            }\n        })\n    }\n\n    function setLayers(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                layers: value\n            }\n        })\n    }\n\n    function setFilters(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                filters: value\n            }\n        })\n    }\n\n    function setInpaint(value: boolean) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                inpaint: value\n            }\n        })\n    }\n\n    useEffect(() => {\n        if (state.shouldRun && state.step !== \"runIter\") {\n            dispatchState({ type: \"startIter\" })\n        }\n    }, [state.step, state.shouldRun, dispatchState])\n\n    const canvas = useMemo(() => {\n        const cnv = document.createElement(\"canvas\")\n        cnv.width = state.algorithmSettings.width\n        cnv.height = state.algorithmSettings.height\n        return cnv\n    }, [state.algorithmSettings.width, state.algorithmSettings.height])\n\n    const [selectedImage, setSelectedImage] = useState<HTMLImageElement | null>(null)\n\n    useEffect(() => {\n        if (selectedImage !== null) {\n            const context = canvas.getContext(\"2d\")!\n            context.drawImage(selectedImage, 0, 0, state.algorithmSettings.width, state.algorithmSettings.height)\n            const imageData = context.getImageData(0, 0, state.algorithmSettings.width, state.algorithmSettings.height).data\n            dispatchState({\n                type: \"setSourceImage\",\n                image: Array.from(imageData)\n            })\n        }\n    }, [selectedImage, state.algorithmSettings.width, state.algorithmSettings.height, dispatchState, canvas])\n\n    function onImageSelected(files: File[]) {\n        setSelectedImage(null)\n\n        const image = new Image()\n\n        image.onload = function (evt: any) {\n            setSelectedImage(image)\n        }\n\n        const file = files[0]\n        const reader = new FileReader()\n\n        reader.onload = function (evt: any) {\n            if (evt.target.readyState === FileReader.DONE) {\n                image.src = evt.target.result\n            }\n        }\n\n        reader.readAsDataURL(file)\n    }\n\n    const statusText = useMemo(() => {\n        if (state.step !== \"idle\" && state.shouldRun) {\n            return `Running, iteration: ${state.iteration}.`\n        } else if (state.step === \"idle\" && state.shouldRun) {\n            return \"Starting, your browser might freeze for a while...\"\n        } else if (state.step !== \"idle\" && !state.shouldRun) {\n            return \"Stopping...\"\n        } else if (state.step === \"idle\" && !state.shouldRun && !state.sourceImage) {\n            return \"Choose an image.\"\n        } else if (state.step === \"idle\" && !state.shouldRun) {\n            return \"Click start\"\n        }\n\n    }, [state.step, state.shouldRun, state.sourceImage, state.iteration])\n\n    const displayedImage = selectedImage ? selectedImage.src : \"\"\n\n    type SettingsProps = {\n        style: CSSProperties,\n        disabled: boolean\n    }\n\n    const settingsProps: SettingsProps = {\n        style: {\n            textAlign: \"center\"\n        },\n        disabled: state.shouldRun || state.step !== \"idle\"\n    }\n\n    const [comparisonImageUri, setComparisonImageUri] = useState<string>(\"\")\n\n    const selectImage = (evt: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\n        if (!settingsProps.disabled) {\n            setSelectedImage(evt.target as HTMLImageElement)\n        }\n    }\n\n    const { getRootProps, getInputProps } = useDropzone({\n        accept: \"image/*\",\n        onDrop: onImageSelected,\n        disabled: settingsProps.disabled\n    })\n\n    const columnSizes = {\n        xl: 3,\n        l: 3,\n        md: 4,\n        sm: 6,\n        xs: 8\n    }\n\n    const runButtonEnabled = !state.shouldRun && state.step === \"idle\" && state.maskCanvas !== null && state.sourceImage !== null\n    const stopButtonEnabled = state.shouldRun && state.step !== \"idle\"\n\n    return (\n        <div>\n            <Painter state={state} dispatchState={dispatchState} />\n\n            <Container>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand>\n                        <div>\n                            Deep Image Prior\n                        </div>\n                        <div style={{ fontSize: \"12px\" }}>\n                            Implementation by <a href=\"https://github.com/RobinKa\">Tora</a>\n                        </div>\n                    </Navbar.Brand>\n                    <Nav.Link href=\"https://github.com/RobinKa/web-deep-image-prior\">Source code</Nav.Link>\n                    <Nav.Link href=\"https://dmitryulyanov.github.io/deep_image_prior\">Original project page</Nav.Link>\n                    <Nav.Link href=\"https://arxiv.org/abs/1711.10925\">Paper</Nav.Link>\n                </Navbar>\n            </Container>\n            <Container>\n                <Row>\n                    <Col {...columnSizes} style={{ padding: \"10px\" }}>\n                        <Row>\n                            <p style={{ fontSize: \"20px\" }}>{statusText}</p>\n                        </Row>\n\n                        <Row style={{ textAlign: \"center\" }}>\n                            <Col>\n                                <Button disabled={!runButtonEnabled} onClick={() => dispatchState({ type: \"start\" })}>Start</Button>\n                                <Button disabled={!stopButtonEnabled} onClick={() => dispatchState({ type: \"pause\" })}>Stop</Button>\n                                <Button onClick={() => dispatchState({ type: \"reset\" })}>Reset</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col {...columnSizes} style={{ padding: \"10px\" }}>\n                        <Row>\n                            <Col><BSImage fluid style={{ minWidth: \"32px\" }} src={sampleImage1} alt={sampleImage1} onClick={selectImage} /></Col>\n                            <Col><BSImage fluid style={{ minWidth: \"32px\" }} src={sampleImage2} alt={sampleImage2} onClick={selectImage} /></Col>\n                            <Col><BSImage fluid style={{ minWidth: \"32px\" }} src={sampleImage3} alt={sampleImage3} onClick={selectImage} /></Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div style={{ textAlign: \"center\" }} {...getRootProps()}>\n                                    <input {...getInputProps()} />\n                                    <p style={{ fontSize: \"20px\" }}>Click to select an image</p>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col {...columnSizes} style={{ padding: \"10px\" }}>\n                        <div style={{ width: state.algorithmSettings.width, height: state.algorithmSettings.height, boxShadow: \"0px 0px 5px gray\" }}>\n                            <img src={displayedImage} alt=\"\" style={{ width: state.algorithmSettings.width, height: state.algorithmSettings.height, position: \"absolute\" }} />\n                            <div style={{ display: state.algorithmSettings.inpaint ? \"block\" : \"none\" }}>\n                                <DrawableCanvas state={state} dispatchState={dispatchState} backgroundImage={displayedImage} />\n                            </div>\n                        </div>\n                    </Col>\n                    <Col {...columnSizes} style={{ padding: \"10px\" }}>\n                        <p style={{ textAlign: \"center\", fontSize: \"20px\" }}>Settings</p>\n                        <LabeledSlider {...settingsProps} min={32} max={1024} step={32} value={state.algorithmSettings.width} setValue={setWidth} label={\"Width\"} />\n                        <LabeledSlider {...settingsProps} min={32} max={1024} step={32} value={state.algorithmSettings.height} setValue={setHeight} label={\"Height\"} />\n                        <LabeledSlider {...settingsProps} min={1} max={20} step={1} value={state.algorithmSettings.layers} setValue={setLayers} label={\"Layers\"} />\n                        <LabeledSlider {...settingsProps} min={4} max={128} step={4} value={state.algorithmSettings.filters} setValue={setFilters} label={\"Filters\"} />\n\n                        <LabeledCheckbox {...settingsProps} value={state.algorithmSettings.inpaint} setValue={setInpaint} label={\"Inpaint\"} />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col />\n                    <Col style={{ maxWidth: state.algorithmSettings.width }}>\n                        <ReactCompareImage leftImage={displayedImage} rightImage={comparisonImageUri} />\n                    </Col>\n                    <Col />\n                </Row>\n                <Row>\n                    {state.images.map((image: ImageData) =>\n                        <img width=\"64px\" key={image.uri} src={image.uri} alt={image.uri} onClick={(evt) => setComparisonImageUri(image.uri)} />\n                    )}\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9'\nimport 'react-app-polyfill/stable'\nimport \"fast-text-encoding/text.min.js\"\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}