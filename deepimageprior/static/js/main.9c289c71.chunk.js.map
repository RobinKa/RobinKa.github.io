{"version":3,"sources":["sample-images/car_inpaint.png","sample-images/lenna_noisy.png","sample-images/cat_text.png","Painter.tsx","models/UNet.ts","AppState.ts","DrawableCanvas.tsx","LabeledSlider.tsx","LabeledCheckbox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","imageTensorFromFlatArray","flat","width","height","tf","reshape","slice","drawImageTensor","ctx","imageTensor","canvas","imageData","createImageData","x","y","i","data","Math","min","max","putImageData","Painter","props","state","dispatchState","useState","model","setModel","noise","setNoise","setImageTensor","useMemo","document","createElement","createMemoryCanvas","algorithmSettings","useEffect","step","m","n","it","noiseShape","inputShape","outputFilters","layers","filters","skip","input","shape","downs","push","conv2d","pow","kernelSize","padding","strides","activation","apply","length","ups","last","upsampled","conv2dTranspose","concatenated","concatenate","axis","processed","inputs","outputs","createUNet","inpaint","concat","sourceImage","loss","mask","Array","from","maskCanvas","getContext","getImageData","mt","absoluteDifference","compile","optimizer","a","fit","batchSize","epochs","predict","array","output","type","iteration","uri","toDataURL","console","log","undefined","shouldRun","dispose","updateAppState","action","newState","images","newSettings","image","Error","JSON","stringify","DrawableCanvas","drawing","setDrawing","useRef","tryStartDraw","endDraw","onMove","clientPos","cnv","current","bounds","getBoundingClientRect","mousePos","left","top","beginPath","arc","PI","fillStyle","fill","fillRect","ref","style","opacity","onTouchStart","onTouchEnd","onTouchMove","e","targetTouches","pageX","changedTouches","pageY","onMouseDown","onMouseUp","event","button","reset","onMouseMove","clientX","clientY","LabeledSlider","disabled","value","onChange","setValue","label","LabeledCheckbox","checked","evt","target","App","useReducer","selectedImage","setSelectedImage","context","drawImage","statusText","displayedImage","src","settingsProps","textAlign","comparisonImageUri","setComparisonImageUri","selectImage","useDropzone","accept","onDrop","files","Image","onload","file","reader","FileReader","readyState","DONE","result","readAsDataURL","getRootProps","getInputProps","columnSizes","xl","l","md","sm","xs","runButtonEnabled","stopButtonEnabled","Container","Navbar","bg","variant","Brand","fontSize","href","Nav","Link","Row","Col","Button","onClick","fluid","minWidth","sampleImage1","alt","sampleImage2","sampleImage3","boxShadow","position","display","backgroundImage","maxWidth","leftImage","rightImage","map","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9c289c71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/car_inpaint.82954de1.png\";","module.exports = __webpack_public_path__ + \"static/media/lenna_noisy.7637940c.png\";","module.exports = __webpack_public_path__ + \"static/media/cat_text.f7cb4fcc.png\";","import * as tf from \"@tensorflow/tfjs\"\r\nimport React, { Dispatch, useEffect, useState, useMemo } from \"react\"\r\nimport { createUNet } from \"./models/UNet\"\r\nimport { AppState, AppUpdateAction } from \"./AppState\"\r\nimport { LossOrMetricFn } from \"@tensorflow/tfjs-layers/dist/types\"\r\n\r\ntf.enableProdMode()\r\n\r\ntype PainterProps = {\r\n    state: AppState,\r\n    dispatchState: Dispatch<AppUpdateAction>\r\n}\r\n\r\nfunction imageTensorFromFlatArray(flat: number[], width: number, height: number) {\r\n    return tf.transpose(tf.tensor1d(flat).reshape([1, height, width, 4]).slice([0, 0, 0, 0], [1, height, width, 3]), [0, 2, 1, 3])\r\n}\r\n\r\nfunction scaleImageTensor(x: tf.Tensor) {\r\n    return tf.sub(tf.div(x, 127.5), 1)\r\n}\r\n\r\nfunction createMemoryCanvas(width: number, height: number) {\r\n    const canvas = document.createElement(\"canvas\")\r\n    canvas.width = width\r\n    canvas.height = height\r\n    return canvas\r\n}\r\n\r\nfunction drawImageTensor(ctx: CanvasRenderingContext2D, imageTensor: number[][][][]) {\r\n    const [width, height] = [ctx.canvas.width, ctx.canvas.height]\r\n\r\n    const imageData = ctx.createImageData(width, height)\r\n\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            const i = x + y * width\r\n            imageData.data[i * 4 + 0] = Math.min(255, Math.max(0, 127.5 * (1 + imageTensor[0][x][y][0])))\r\n            imageData.data[i * 4 + 1] = Math.min(255, Math.max(0, 127.5 * (1 + imageTensor[0][x][y][1])))\r\n            imageData.data[i * 4 + 2] = Math.min(255, Math.max(0, 127.5 * (1 + imageTensor[0][x][y][2])))\r\n            imageData.data[i * 4 + 3] = 255\r\n        }\r\n    }\r\n\r\n    ctx.putImageData(imageData, 0, 0)\r\n}\r\n\r\nexport function Painter(props: PainterProps) {\r\n    const { state, dispatchState } = props\r\n\r\n    const [model, setModel] = useState<tf.LayersModel | null>(null)\r\n    const [noise, setNoise] = useState<tf.Tensor<tf.Rank> | null>(null)\r\n    const [imageTensor, setImageTensor] = useState<tf.Tensor<tf.Rank> | null>(null)\r\n\r\n    const canvas = useMemo(() => {\r\n        return createMemoryCanvas(state.algorithmSettings.width, state.algorithmSettings.height)\r\n    }, [state.algorithmSettings.width, state.algorithmSettings.height])\r\n\r\n    useEffect(() => {\r\n        if (state.step === \"runIter\") {\r\n            let m = model\r\n            let n = noise\r\n            let it = imageTensor\r\n\r\n            if (m === null || n === null || it === null) {\r\n                const noiseShape: [number, number, number] = [state.algorithmSettings.width, state.algorithmSettings.height, 1]\r\n                const outputFilters = 3\r\n\r\n                m = createUNet(noiseShape, outputFilters, state.algorithmSettings.layers, state.algorithmSettings.filters, !state.algorithmSettings.inpaint)\r\n\r\n                n = tf.randomNormal([1].concat(noiseShape))\r\n\r\n                it = scaleImageTensor(imageTensorFromFlatArray(state.sourceImage!, state.algorithmSettings.width, state.algorithmSettings.height))\r\n\r\n                setModel(m)\r\n                setNoise(n)\r\n                setImageTensor(it)\r\n\r\n                let loss: string | LossOrMetricFn = \"meanAbsoluteError\"\r\n\r\n                if (state.algorithmSettings.inpaint) {\r\n                    const mask = Array.from(state.maskCanvas!.getContext(\"2d\")!.getImageData(0, 0, state.algorithmSettings.width, state.algorithmSettings.height).data)\r\n                    const mt = tf.div(imageTensorFromFlatArray(mask, state.algorithmSettings.width, state.algorithmSettings.height), 255)\r\n                    loss = (x: tf.Tensor, y: tf.Tensor) => {\r\n                        return tf.losses.absoluteDifference(x, y, mt!)\r\n                    }\r\n                }\r\n\r\n                m.compile({\r\n                    optimizer: \"adam\",\r\n                    loss: loss,\r\n                })\r\n            }\r\n\r\n            (async () => {\r\n                try {\r\n                    await m.fit(n, it, {\r\n                        batchSize: 1,\r\n                        epochs: 20,\r\n                    })\r\n\r\n                    const output = await (m.predict(n) as tf.Tensor).array() as number[][][][]\r\n\r\n                    drawImageTensor(canvas.getContext(\"2d\")!, output)\r\n\r\n                    dispatchState({\r\n                        type: \"finishIter\",\r\n                        imageData: {\r\n                            iteration: state.iteration,\r\n                            uri: canvas.toDataURL(\"image/png\")\r\n                        }\r\n                    })\r\n                }\r\n                catch (e) {\r\n                    console.log(`Exception when running model: ${e}`)\r\n\r\n                    dispatchState({\r\n                        type: \"finishIter\",\r\n                        imageData: undefined\r\n                    })\r\n                }\r\n            })()\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state.step])\r\n\r\n    useEffect(() => {\r\n        if (state.step === \"finishedIter\" && !state.shouldRun) {\r\n            if (model !== null) {\r\n                model.dispose()\r\n            }\r\n\r\n            if (imageTensor !== null) {\r\n                imageTensor.dispose()\r\n            }\r\n\r\n            if (noise !== null) {\r\n                noise.dispose()\r\n            }\r\n\r\n            setModel(null)\r\n            setImageTensor(null)\r\n            setNoise(null)\r\n\r\n            dispatchState({\r\n                type: \"stopped\"\r\n            })\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state.shouldRun, state.step])\r\n\r\n    return <div />\r\n}","import * as tf from \"@tensorflow/tfjs\"\r\n\r\nexport function createUNet(inputShape: [number, number, number], outputFilters: number, layers: number, filters: number, skip: boolean) {\r\n    const input = tf.input({ shape: inputShape })\r\n\r\n    const downs = [input]\r\n    for (let i = 0; i < layers; i++) {\r\n        downs.push(tf.layers.conv2d({\r\n            filters: Math.min(256, Math.pow(2, i) * filters),\r\n            kernelSize: [4, 4],\r\n            padding: \"same\",\r\n            strides: 2,\r\n            activation: \"elu\",\r\n        }).apply(downs[downs.length - 1]) as tf.SymbolicTensor)\r\n    }\r\n\r\n    const ups = [downs[downs.length - 1]]\r\n    for (let i = 0; i < layers; i++) {\r\n        const last = i === layers - 1\r\n\r\n        const upsampled = tf.layers.conv2dTranspose({\r\n            filters: Math.min(256, Math.pow(2, layers - i - 1) * filters),\r\n            kernelSize: [4, 4],\r\n            padding: \"same\",\r\n            strides: 2,\r\n            activation: \"elu\",\r\n        }).apply(ups[ups.length - 1]) as tf.SymbolicTensor\r\n        \r\n        const concatenated = skip ? tf.layers.concatenate({axis: -1}).apply([upsampled, downs[layers - i - 1]]) : upsampled\r\n\r\n        const processed = tf.layers.conv2d({\r\n            filters: last ? outputFilters : Math.min(256, Math.pow(2, layers - i - 1) * filters),\r\n            kernelSize: [4, 4],\r\n            padding: \"same\",\r\n            strides: 1,\r\n            activation: last ? \"tanh\" : \"elu\",\r\n        }).apply(concatenated) as tf.SymbolicTensor\r\n\r\n        ups.push(processed)\r\n    }\r\n\r\n    return tf.model({inputs: input, outputs: ups[ups.length - 1]})\r\n}","import { useReducer } from \"react\"\r\n\r\nexport type ImageData = {\r\n    uri: string\r\n    iteration: number\r\n}\r\n\r\nexport type AlgorithmSettings = {\r\n    filters: number\r\n    layers: number\r\n    width: number\r\n    height: number\r\n    inpaint: boolean\r\n}\r\n\r\nexport type AppState = {\r\n    step: \"idle\" | \"runIter\" | \"finishedIter\"\r\n    shouldRun: boolean\r\n\r\n    images: ImageData[]\r\n    maskCanvas: HTMLCanvasElement | null\r\n    algorithmSettings: AlgorithmSettings\r\n    sourceImage: number[] | null\r\n    iteration: number\r\n}\r\n\r\nexport type AppUpdateReset = { type: \"reset\" }\r\nexport type AppUpdateStart = { type: \"start\" }\r\nexport type AppUpdatePause = { type: \"pause\" }\r\n\r\nexport type AppUpdateAlgorithmSettings = {\r\n    type: \"algorithmSettings\"\r\n    newSettings: AlgorithmSettings\r\n}\r\nexport type AppUpdateSetSourceImage = {\r\n    type: \"setSourceImage\",\r\n    image: number[]\r\n}\r\nexport type AppUpdateFinishIter = {\r\n    type: \"finishIter\",\r\n    imageData: ImageData | undefined\r\n}\r\nexport type AppUpdateSetMaskCanvas = {\r\n    type: \"setMaskCanvas\"\r\n    maskCanvas: HTMLCanvasElement | null\r\n}\r\nexport type AppUpdateStartIter = {\r\n    type: \"startIter\"\r\n}\r\nexport type AppUpdateStopped = {\r\n    type: \"stopped\"\r\n}\r\n\r\nexport type AppUpdateAction = AppUpdateReset | AppUpdateStart | AppUpdatePause |\r\n    AppUpdateAlgorithmSettings | AppUpdateSetSourceImage | AppUpdateFinishIter | AppUpdateSetMaskCanvas | AppUpdateStartIter | AppUpdateStopped\r\n\r\nfunction updateAppState(state: AppState, action: AppUpdateAction) {\r\n    const newState = { ...state }\r\n\r\n    switch (action.type) {\r\n        case \"reset\":\r\n            newState.images = []\r\n            newState.shouldRun = false\r\n            newState.iteration = 0\r\n            newState.algorithmSettings = {\r\n                filters: 8,\r\n                layers: 5,\r\n                width: 256,\r\n                height: 256,\r\n                inpaint: false,\r\n            }\r\n            break\r\n        case \"start\":\r\n            newState.shouldRun = true\r\n            break\r\n        case \"pause\":\r\n            newState.shouldRun = false\r\n            break\r\n        case \"algorithmSettings\":\r\n            newState.algorithmSettings = action.newSettings\r\n            newState.images = []\r\n            newState.iteration = 0\r\n            break\r\n        case \"setSourceImage\":\r\n            newState.sourceImage = action.image\r\n            newState.images = []\r\n            newState.iteration = 0\r\n            break\r\n        case \"finishIter\":\r\n            if (newState.shouldRun) {\r\n                newState.iteration += 1\r\n                if (action.imageData) {\r\n                    newState.images.push(action.imageData)\r\n                }\r\n            }\r\n            newState.step = \"finishedIter\"\r\n            break\r\n        case \"stopped\":\r\n            newState.step = \"idle\"\r\n            newState.iteration = 0\r\n            break\r\n        case \"startIter\":\r\n            newState.step = \"runIter\"\r\n            break\r\n        case \"setMaskCanvas\":\r\n            newState.maskCanvas = action.maskCanvas\r\n            break\r\n        default:\r\n            throw new Error(\"Unhandled action in state update: \" + JSON.stringify(action))\r\n    }\r\n\r\n    return newState\r\n}\r\n\r\nexport function useAppState() {\r\n    return useReducer(updateAppState, {\r\n        step: \"idle\",\r\n        shouldRun: false,\r\n        iteration: 0,\r\n        images: [],\r\n        algorithmSettings: {\r\n            filters: 8,\r\n            layers: 5,\r\n            width: 256,\r\n            height: 256,\r\n            inpaint: false,\r\n        },\r\n        sourceImage: null,\r\n        maskCanvas: null,\r\n    })\r\n}\r\n","import React, { useState, useRef, Dispatch, useEffect } from \"react\"\r\nimport { AppState, AppUpdateAction } from \"./AppState\"\r\n\r\ntype DrawableCanvasProps = {\r\n    state: AppState\r\n    dispatchState: Dispatch<AppUpdateAction>\r\n    backgroundImage: string\r\n}\r\n\r\nexport default function DrawableCanvas(props: DrawableCanvasProps) {\r\n    const [width, height] = [props.state.algorithmSettings.width, props.state.algorithmSettings.height]\r\n    const maskCanvas = props.state.maskCanvas\r\n    const dispatchState = props.dispatchState\r\n\r\n    const [drawing, setDrawing] = useState(false)\r\n\r\n    const canvas = useRef<HTMLCanvasElement>(null)\r\n\r\n    function tryStartDraw() {\r\n        if (props.state.step === \"idle\" && !props.state.shouldRun) {\r\n            setDrawing(true)\r\n        }\r\n    }\r\n\r\n    function endDraw() {\r\n        setDrawing(false)\r\n    }\r\n\r\n    function reset() {\r\n        const cnv = canvas.current!\r\n        const ctx = cnv.getContext(\"2d\")!\r\n\r\n        ctx.fillStyle = \"white\"\r\n        ctx.fillRect(0, 0, width, height)\r\n    }\r\n\r\n    function onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\r\n        endDraw()\r\n        if (event.button === 2) {\r\n            reset()\r\n        }\r\n    }\r\n\r\n    function onMove(clientPos: [number, number]) {\r\n        if (drawing) {\r\n            const cnv = canvas.current!\r\n            const ctx = cnv.getContext(\"2d\")!\r\n            const bounds = cnv.getBoundingClientRect()\r\n\r\n            const mousePos = [clientPos[0] - bounds.left, clientPos[1] - bounds.top]\r\n            const radius = 5\r\n\r\n            ctx.beginPath()\r\n            ctx.arc(mousePos[0], mousePos[1], radius, 0, 2 * Math.PI)\r\n            ctx.fillStyle = \"black\"\r\n            ctx.fill()\r\n        }\r\n    }\r\n\r\n    function onTouchMove(e: React.TouchEvent<HTMLCanvasElement>) {\r\n        onMove([\r\n            e.targetTouches[0] ? e.targetTouches[0].pageX : e.changedTouches[e.changedTouches.length - 1].pageX,\r\n            e.targetTouches[0] ? e.targetTouches[0].pageY : e.changedTouches[e.changedTouches.length - 1].pageY\r\n        ])\r\n    }\r\n\r\n    useEffect(() => {\r\n        const cnv = canvas.current!\r\n        const ctx = cnv.getContext(\"2d\")!\r\n        ctx.fillStyle = \"white\"\r\n        ctx.fillRect(0, 0, width, height)\r\n    }, [canvas, width, height])\r\n\r\n    useEffect(() => {\r\n        if (canvas.current !== maskCanvas) {\r\n            dispatchState({\r\n                type: \"setMaskCanvas\",\r\n                maskCanvas: canvas.current\r\n            })\r\n        }\r\n    }, [canvas, maskCanvas, dispatchState])\r\n\r\n    return (\r\n        <canvas width={width} height={height} ref={canvas}\r\n            style={{ width: width, height: height, opacity: 0.6 }}\r\n            onTouchStart={tryStartDraw} onTouchEnd={endDraw} onTouchMove={onTouchMove}\r\n            onMouseDown={tryStartDraw} onMouseUp={onMouseUp} onMouseMove={e => onMove([e.clientX, e.clientY])} />\r\n    )\r\n}","import React, { CSSProperties } from \"react\"\r\nimport Slider from 'rc-slider'\r\n\r\ntype LabeledSliderProps = {\r\n    disabled: boolean,\r\n    setValue: (value: number) => void\r\n    value: number\r\n    label: string\r\n    min: number\r\n    max: number\r\n    step: number\r\n    style: CSSProperties\r\n}\r\n\r\nexport default function LabeledSlider(props: LabeledSliderProps) {\r\n    return (\r\n        <div style={props.style}>\r\n            <Slider disabled={props.disabled} value={props.value} min={props.min} max={props.max} step={props.step} onChange={value => props.setValue(value)} />\r\n            <label>{props.label}: {props.value}</label>\r\n        </div>\r\n    )\r\n}","import React, { CSSProperties } from \"react\"\r\n\r\ntype LabeledCheckboxProps = {\r\n    disabled: boolean,\r\n    setValue: (value: boolean) => void\r\n    value: boolean\r\n    label: string\r\n    style: CSSProperties\r\n}\r\n\r\nexport default function LabeledCheckbox(props: LabeledCheckboxProps) {\r\n    return (\r\n        <div style={props.style}>\r\n            <input type=\"checkbox\" disabled={props.disabled} checked={props.value} onChange={evt => props.setValue(evt.target.checked)} />\r\n            <label>{props.label}</label>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useMemo, CSSProperties } from 'react'\nimport './App.css'\nimport { Painter } from './Painter'\nimport { Row, Col, Container, Button, Navbar, Nav, Image as BSImage } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'rc-slider/assets/index.css'\nimport { useAppState, ImageData } from './AppState'\nimport { useDropzone } from 'react-dropzone'\nimport ReactCompareImage from \"react-compare-image\"\nimport DrawableCanvas from './DrawableCanvas'\nimport LabeledSlider from './LabeledSlider'\nimport LabeledCheckbox from './LabeledCheckbox'\n\nimport sampleImage1 from \"./sample-images/car_inpaint.png\"\nimport sampleImage2 from \"./sample-images/lenna_noisy.png\"\nimport sampleImage3 from \"./sample-images/cat_text.png\"\n\nconst App: React.FC = () => {\n    const [state, dispatchState] = useAppState()\n\n    function setWidth(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                width: value\n            }\n        })\n    }\n\n    function setHeight(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                height: value\n            }\n        })\n    }\n\n    function setLayers(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                layers: value\n            }\n        })\n    }\n\n    function setFilters(value: number) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                filters: value\n            }\n        })\n    }\n\n    function setInpaint(value: boolean) {\n        dispatchState({\n            type: \"algorithmSettings\",\n            newSettings: {\n                ...state.algorithmSettings,\n                inpaint: value\n            }\n        })\n    }\n\n    useEffect(() => {\n        if (state.shouldRun && state.step !== \"runIter\") {\n            dispatchState({ type: \"startIter\" })\n        }\n    }, [state.step, state.shouldRun, dispatchState])\n\n    const canvas = useMemo(() => {\n        const cnv = document.createElement(\"canvas\")\n        cnv.width = state.algorithmSettings.width\n        cnv.height = state.algorithmSettings.height\n        return cnv\n    }, [state.algorithmSettings.width, state.algorithmSettings.height])\n\n    const [selectedImage, setSelectedImage] = useState<HTMLImageElement | null>(null)\n\n    useEffect(() => {\n        if (selectedImage !== null) {\n            const context = canvas.getContext(\"2d\")!\n            context.drawImage(selectedImage, 0, 0, state.algorithmSettings.width, state.algorithmSettings.height)\n            const imageData = context.getImageData(0, 0, state.algorithmSettings.width, state.algorithmSettings.height).data\n            dispatchState({\n                type: \"setSourceImage\",\n                image: Array.from(imageData)\n            })\n        }\n    }, [selectedImage, state.algorithmSettings.width, state.algorithmSettings.height, dispatchState, canvas])\n\n    function onImageSelected(files: File[]) {\n        setSelectedImage(null)\n\n        const image = new Image()\n\n        image.onload = function (evt: any) {\n            setSelectedImage(image)\n        }\n\n        const file = files[0]\n        const reader = new FileReader()\n\n        reader.onload = function (evt: any) {\n            if (evt.target.readyState === FileReader.DONE) {\n                image.src = evt.target.result\n            }\n        }\n\n        reader.readAsDataURL(file)\n    }\n\n    const statusText = useMemo(() => {\n        if (state.step !== \"idle\" && state.shouldRun) {\n            return `Running, iteration: ${state.iteration}.`\n        } else if (state.step === \"idle\" && state.shouldRun) {\n            return \"Starting, your browser might freeze for a while...\"\n        } else if (state.step !== \"idle\" && !state.shouldRun) {\n            return \"Stopping...\"\n        } else if (state.step === \"idle\" && !state.shouldRun && !state.sourceImage) {\n            return \"Choose an image.\"\n        } else if (state.step === \"idle\" && !state.shouldRun) {\n            return \"Click start\"\n        }\n\n    }, [state.step, state.shouldRun, state.sourceImage, state.iteration])\n\n    const displayedImage = selectedImage ? selectedImage.src : \"\"\n\n    type SettingsProps = {\n        style: CSSProperties,\n        disabled: boolean\n    }\n\n    const settingsProps: SettingsProps = {\n        style: {\n            textAlign: \"center\"\n        },\n        disabled: state.shouldRun || state.step !== \"idle\"\n    }\n\n    const [comparisonImageUri, setComparisonImageUri] = useState<string>(\"\")\n\n    const selectImage = (evt: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\n        if (!settingsProps.disabled) {\n            setSelectedImage(evt.target as HTMLImageElement)\n        }\n    }\n\n    const { getRootProps, getInputProps } = useDropzone({\n        accept: \"image/*\",\n        onDrop: onImageSelected,\n        disabled: settingsProps.disabled\n    })\n\n    const columnSizes = {\n        xl: 3,\n        l: 3,\n        md: 4,\n        sm: 6,\n        xs: 8\n    }\n\n    const runButtonEnabled = !state.shouldRun && state.step === \"idle\" && state.maskCanvas !== null && state.sourceImage !== null\n    const stopButtonEnabled = state.shouldRun && state.step !== \"idle\"\n\n    return (\n        <div>\n            <Painter state={state} dispatchState={dispatchState} />\n\n            <Container>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand>\n                        <div>\n                            Deep Image Prior\n                        </div>\n                        <div style={{ fontSize: \"12px\" }}>\n                            Implementation by <a href=\"https://github.com/RobinKa\">Tora</a>\n                        </div>\n                    </Navbar.Brand>\n                    <Nav.Link href=\"https://github.com/RobinKa/web-deep-image-prior\">Source code</Nav.Link>\n                    <Nav.Link href=\"https://dmitryulyanov.github.io/deep_image_prior\">Original project page</Nav.Link>\n                    <Nav.Link href=\"https://arxiv.org/abs/1711.10925\">Paper</Nav.Link>\n                </Navbar>\n            </Container>\n            <Container>\n                <Row>\n                    <Col />\n                    <Col {...columnSizes} style={{ padding: \"10px\" }}>\n                        <Row>\n                            <p style={{ fontSize: \"20px\" }}>{statusText}</p>\n                        </Row>\n\n                        <Row style={{ textAlign: \"center\" }}>\n                            <Col>\n                                <Button disabled={!runButtonEnabled} onClick={() => dispatchState({ type: \"start\" })}>Start</Button>\n                                <Button disabled={!stopButtonEnabled} onClick={() => dispatchState({ type: \"pause\" })}>Stop</Button>\n                                <Button onClick={() => dispatchState({ type: \"reset\" })}>Reset</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col {...columnSizes} style={{ padding: \"10px\" }}>\n                        <Row>\n                            <Col><BSImage fluid style={{ minWidth: \"32px\" }} src={sampleImage1} alt={sampleImage1} onClick={selectImage} /></Col>\n                            <Col><BSImage fluid style={{ minWidth: \"32px\" }} src={sampleImage2} alt={sampleImage2} onClick={selectImage} /></Col>\n                            <Col><BSImage fluid style={{ minWidth: \"32px\" }} src={sampleImage3} alt={sampleImage3} onClick={selectImage} /></Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div style={{ textAlign: \"center\" }} {...getRootProps()}>\n                                    <input {...getInputProps()} />\n                                    <p style={{ fontSize: \"20px\" }}>Click to select an image</p>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col {...columnSizes} style={{ padding: \"10px\" }}>\n                        <p style={{ textAlign: \"center\", fontSize: \"20px\" }}>Settings</p>\n                        <LabeledSlider {...settingsProps} min={32} max={1024} step={32} value={state.algorithmSettings.width} setValue={setWidth} label={\"Width\"} />\n                        <LabeledSlider {...settingsProps} min={32} max={1024} step={32} value={state.algorithmSettings.height} setValue={setHeight} label={\"Height\"} />\n                        <LabeledSlider {...settingsProps} min={1} max={20} step={1} value={state.algorithmSettings.layers} setValue={setLayers} label={\"Layers\"} />\n                        <LabeledSlider {...settingsProps} min={4} max={128} step={4} value={state.algorithmSettings.filters} setValue={setFilters} label={\"Filters\"} />\n\n                        <LabeledCheckbox {...settingsProps} value={state.algorithmSettings.inpaint} setValue={setInpaint} label={\"Inpaint\"} />\n                    </Col>\n                    <Col />\n                </Row>\n                <Row>\n                    <Col />\n                    <Col style={{ padding: \"10px\" }}>\n                        <div style={{ width: state.algorithmSettings.width, height: state.algorithmSettings.height, boxShadow: \"0px 0px 5px gray\" }}>\n                            <img src={displayedImage} alt=\"\" style={{ width: state.algorithmSettings.width, height: state.algorithmSettings.height, position: \"absolute\" }} />\n                            <div style={{ display: state.algorithmSettings.inpaint ? \"block\" : \"none\" }}>\n                                <DrawableCanvas state={state} dispatchState={dispatchState} backgroundImage={displayedImage} />\n                            </div>\n                        </div>\n                    </Col>\n                    <Col />\n                </Row>\n                <Row>\n                    <Col />\n                    <Col style={{ maxWidth: state.algorithmSettings.width }}>\n                        <ReactCompareImage leftImage={displayedImage} rightImage={comparisonImageUri} />\n                    </Col>\n                    <Col />\n                </Row>\n                <Row>\n                    {state.images.map((image: ImageData) =>\n                        <img width=\"64px\" key={image.uri} src={image.uri} alt={image.uri} onClick={(evt) => setComparisonImageUri(image.uri)} />\n                    )}\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9'\nimport 'react-app-polyfill/stable'\nimport \"fast-text-encoding/text.min.js\"\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}