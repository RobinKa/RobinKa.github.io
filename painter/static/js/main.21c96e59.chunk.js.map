{"version":3,"sources":["Painter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["tf","activations","Painter","props","_ref","width","height","setProgress","setGenerating","layers","numHidden","canvas","useRef","generateImage","_x","_generateImage","apply","this","arguments","Object","asyncToGenerator","regenerator_default","a","mark","_callee","model","colors","y","coordsX","coordsY","x","coords","pred","predColors","wrap","_context","prev","next","push","transpose","predict","array","sent","concat","abrupt","stop","generateModel","_generateModel","_callee2","getRandomActivation","i","image","ctx","imageData","_i","_context2","Math","floor","random","length","add","dense","units","inputShape","activation","batchNormalization","current","getContext","createImageData","data","putImageData","react_default","createElement","ref","onClick","style","boxShadow","marginTop","textAlign","Button","App","_useState","useState","_useState2","slicedToArray","setWidth","_useState3","_useState4","setHeight","_useState5","_useState6","progress","_useState7","_useState8","generating","_useState9","_useState10","setLayers","_useState11","_useState12","setNumHidden","marginLeft","marginRight","href","fontSize","visibility","ProgressBar","animated","min","max","now","label","round","es","defaultValue","step","onChange","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.21c96e59.chunk.js","sourcesContent":["import * as tf from \"@tensorflow/tfjs\"\r\nimport React, { useRef } from \"react\"\r\nimport { Button } from \"react-bootstrap\"\r\n\r\ntf.enableProdMode()\r\n\r\nconst activations: any = [\r\n    \"elu\",\r\n    \"hardSigmoid\",\r\n    \"linear\",\r\n    \"relu\",\r\n    \"relu6\",\r\n    \"selu\",\r\n    \"sigmoid\",\r\n    \"softmax\",\r\n    \"softplus\",\r\n    \"softsign\",\r\n    \"tanh\",\r\n]\r\n\r\n\r\nexport function Painter(props: any) {\r\n    const [width, height] = [props.width, props.height]\r\n    const setProgress = props.setProgress\r\n    const setGenerating = props.setGenerating\r\n    const layers = props.layers\r\n    const numHidden = props.numHidden\r\n\r\n    const canvas = useRef<HTMLCanvasElement>(null)\r\n\r\n    async function generateImage(model: tf.Sequential) {\r\n        setProgress(0)\r\n\r\n        let colors: number[][] = []\r\n\r\n        for (let y = 0; y < height; y++) {\r\n            const coordsX: number[] = []\r\n            const coordsY: number[] = []\r\n            for (let x = 0; x < width; x++) {\r\n                coordsX.push(x - width / 2)\r\n                coordsY.push(y - height / 2)\r\n            }\r\n\r\n            const coords = tf.tensor2d([coordsX, coordsY]).transpose()\r\n\r\n            const pred = model.predict(coords) as tf.Tensor\r\n\r\n            const predColors = await pred.array() as number[][]\r\n\r\n            colors = colors.concat(predColors)\r\n\r\n            if (y % 10 === 0) {\r\n                setProgress(y / height)\r\n            }\r\n        }\r\n\r\n        setProgress(1)\r\n\r\n        return colors\r\n    }\r\n\r\n    async function generateModel() {\r\n        setGenerating(true)\r\n\r\n        const model = tf.sequential()\r\n        const numInput = 2\r\n\r\n        function getRandomActivation(): any {\r\n            return activations[Math.floor(Math.random() * activations.length)]\r\n        }\r\n\r\n        for (let i = 0; i < layers - 1; i++) {\r\n            model.add(tf.layers.dense({\r\n                units: numHidden,\r\n                inputShape: [i === 0 ? numInput : numHidden],\r\n            }))\r\n\r\n            model.add(tf.layers.activation({\r\n                activation: getRandomActivation(),\r\n            }))\r\n\r\n            model.add(tf.layers.batchNormalization())\r\n        }\r\n\r\n        model.add(tf.layers.dense({ inputShape: layers === 1 ? numInput : numHidden, units: 3 }))\r\n        model.add(tf.layers.activation({\r\n            activation: getRandomActivation(),\r\n        }))\r\n\r\n        const image = await generateImage(model)\r\n\r\n        const ctx = canvas.current!.getContext(\"2d\")!\r\n        const imageData = ctx.createImageData(width, height)\r\n\r\n        for (let i = 0; i < width * height; i++) {\r\n            imageData.data[i * 4 + 0] = Math.floor(255 * image[i][0])\r\n            imageData.data[i * 4 + 1] = Math.floor(255 * image[i][1])\r\n            imageData.data[i * 4 + 2] = Math.floor(255 * image[i][2])\r\n            imageData.data[i * 4 + 3] = 255\r\n        }\r\n\r\n        ctx.putImageData(imageData, 0, 0)\r\n\r\n        setGenerating(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <canvas ref={canvas} onClick={generateModel} width={width} height={height} style={{ boxShadow: \"3px 3px 5px 0px rgba(0,0,0,0.75)\" }} />\r\n\r\n            <div style={{ marginTop: \"10px\", textAlign: \"center\" }}>\r\n                <Button onClick={generateModel}>Generate</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\nimport './App.css'\nimport { Painter } from './Painter'\nimport { ProgressBar } from 'react-bootstrap'\nimport Slider from 'rc-slider'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'rc-slider/assets/index.css'\n\nconst [defaultWidth, defaultHeight] = [256, 256]\nconst defaultLayers = 3\nconst defaultNumHidden = 10\n\nconst App: React.FC = () => {\n    const [width, setWidth] = useState(defaultWidth)\n    const [height, setHeight] = useState(defaultHeight)\n    const [progress, setProgress] = useState(0)\n    const [generating, setGenerating] = useState(false)\n    const [layers, setLayers] = useState(defaultLayers)\n    const [numHidden, setNumHidden] = useState(defaultNumHidden)\n\n    return (\n        <div>\n            <div style={{ marginLeft: \"20%\", marginRight: \"20%\" }}>\n                <h1 style={{ textAlign: \"center\" }}>Neural Painter</h1>\n                <a href=\"https://github.com/RobinKa/web-neural-painter\"><h3 style={{ textAlign: \"center\" }}>Source Code</h3></a>\n\n                <label style={{ fontSize: \"24px\", visibility: !generating ? \"collapse\" : \"visible\" }}>Generating...</label>\n                <ProgressBar animated min={0} max={1} now={progress} label={`${Math.round(progress * 100)}%`} style={{ visibility: !generating ? \"collapse\" : \"visible\" }} />\n                <div style={{ textAlign: \"center\" }}>\n                    <Slider defaultValue={defaultWidth} min={0} max={1024} step={16} onChange={value => setWidth(value)} />\n                    <label>Width: {width}</label>\n                </div>\n                <div style={{ textAlign: \"center\" }}>\n                    <Slider defaultValue={defaultHeight} min={0} max={1024} step={16} onChange={value => setHeight(value)} />\n                    <label>Height: {height}</label>\n                </div>\n                <div style={{ textAlign: \"center\" }}>\n                    <Slider defaultValue={defaultLayers} min={1} max={50} step={1} onChange={value => setLayers(value)} />\n                    <label>Layers: {layers}</label>\n                </div>\n                <div style={{ textAlign: \"center\" }}>\n                    <Slider defaultValue={defaultLayers} min={1} max={100} step={1} onChange={value => setNumHidden(value)} />\n                    <label>Hidden: {numHidden}</label>\n                </div>\n            </div>\n\n            <div style={{ visibility: generating ? \"hidden\" : \"visible\", textAlign: \"center\" }}>\n                <Painter width={width} height={height} setProgress={setProgress} setGenerating={setGenerating} layers={layers} numHidden={numHidden} />\n            </div>\n        </div>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}