{"version":3,"sources":["WindowSize.ts","Components/GraphConnection.tsx","Components/GraphNode.tsx","Components/GraphView.tsx","Behaviors/CSharpTranslatable.ts","Components/GraphCodeView.tsx","Implementations/CSharpTranslatableGraphAlgebra.ts","ExampleGraph.ts","Components/CreateNodeView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getWindowDimensions","_window","window","width","innerWidth","height","innerHeight","relativeDpi","devicePixelRatio","GraphConnection","props","gridCellSize","fromX","conn","fromNode","position","x","fromY","y","fromPinIndex","toX","toNode","toY","toPinIndex","offsetX","react_default","a","createElement","d","concat","fill","strokeWidth","stroke","getInputPins","get","color","GraphNode","node","Math","max","count","getOutputPins","transform","style","filter","cursor","onMouseDown","e","startDrag","textAnchor","fontSize","pointerEvents","userSelect","MozUserSelect","displayName","map","pin","pinIndex","key","TextField","label","r","cx","cy","GraphView","graph","dispatchGraph","windowProps","_useState","useState","_useState2","Object","slicedToArray","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","dragging","setDragging","_useState3","_useState4","draggingNode","setDraggingNode","_useState5","_useState6","dragStartPosition","setDragStartPosition","_useState7","_useState8","nodeStartPosition","setNodeStartPosition","svg","useRef","getSvgMousePos","svgCurrent","current","ctm","getScreenCTM","point","createSVGPoint","clientX","clientY","matrixTransform","inverse","mousePos","onMouseMove","newPos","type","onMouseUp","ref","viewBox","top","left","backgroundColor","id","patternUnits","dx","dy","stdDeviation","nodes","uniqueId","dataConnections","objectSpread","getExecOutputs","getExecInputs","execConnections","CSharpType","fullName","classCallCheck","this","translateToCSharp","result","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","translateVariables","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","getIsPure","pureNode","getPureFunctionName","translatePureFunctions","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop2","stateNode","outputConnectedLabels","execOutput","pureCalls","callPureDependencies","Immutable","_loop","toIndex","conns","Error","push","getInputs","nodeExecConnections","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","execConn","set","translateStates","toSet","join","_iterator3","GraphCodeView","popperAnchorElement","setPopperAnchorElement","openPopper","Boolean","code","Fragment","Button","variant","onClick","target","Popper","open","anchorEl","placement","react_highlight_default","className","randomLower","length","arguments","charactersLength","i","charAt","floor","random","BaseNode","_this","_","getOutputs","inputs","outputs","execInputs","execOutputs","addInput","variableName","addOutput","addExecInput","addExecOutput","outputExecLabels","PureBaseNode","pureFunctionName","nodeCounter","_this2","StatefulBaseNode","LiteralNode","_this4","possibleConstructorReturn","getPrototypeOf","call","ReverseStringNode","_this5","input","output","ConcatenateNode","_this6","execInput","inputA","inputB","createExecutionGraph","algebra","literalType","typeFromString","literalNode","createLiteralNode","reverseStringNode","createReverseStringNode","concatenateNode","createConcatenateNode","literalToReverse","literalToConcatenate","reverseToConcatenate","List","cSharpTranslatableGraphAlgebra","CSharpTranslatableGraphAlgebra","typeString","moveNodes","graphReducer","action","newGraph","testRange","CreateNodeView","ListItem","button","Label_default","ListItemText","primary","App","exampleGraph","reducer","_useReducer","useReducer","_useReducer2","CssBaseline","bottom","right","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bccfcf67.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\"\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height, devicePixelRatio: relativeDpi } = window\r\n    return {\r\n        width,\r\n        height,\r\n        relativeDpi\r\n    }\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions())\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions())\r\n        }\r\n\r\n        window.addEventListener(\"resize\", handleResize)\r\n        return () => window.removeEventListener(\"resize\", handleResize)\r\n    }, [])\r\n\r\n    return windowDimensions\r\n}","import React from \"react\"\r\nimport { Displayable  } from \"../Behaviors/Displayable\"\r\nimport { NodeConnection } from \"../Behaviors/CSharpTranslatable\"\r\n\r\ntype GraphConnectionProps<TNode extends Displayable> = {\r\n    conn: NodeConnection<TNode>\r\n    gridCellSize: number\r\n}\r\n\r\nexport function GraphConnection<TNode extends Displayable>(props: GraphConnectionProps<TNode>) {\r\n    const gridCellSize = props.gridCellSize\r\n\r\n    const fromX = props.conn.fromNode.position.x + gridCellSize * 8\r\n    const fromY = props.conn.fromNode.position.y + props.conn.fromPinIndex * gridCellSize + 1.5 * gridCellSize\r\n    const toX = props.conn.toNode.position.x\r\n    const toY = props.conn.toNode.position.y + props.conn.toPinIndex * gridCellSize + 1.5 * gridCellSize\r\n\r\n    const offsetX = gridCellSize * 2\r\n\r\n    return (\r\n        <path d={`M ${fromX} ${fromY} C ${fromX + offsetX} ${fromY} ${toX - offsetX} ${toY} ${toX} ${toY}`}\r\n            fill=\"none\" strokeWidth={0.11 * gridCellSize} stroke={props.conn.toNode.getInputPins().get(props.conn.toPinIndex)!.color} />\r\n    )\r\n}","import React from \"react\"\r\nimport { Displayable } from \"../Behaviors/Displayable\"\r\nimport { TextField } from \"@material-ui/core\"\r\n\r\ntype GraphNodeProps<TNode extends Displayable> = {\r\n    node: TNode\r\n    startDrag: (node: Displayable, e: React.MouseEvent<SVGElement, MouseEvent>) => void\r\n    gridCellSize: number\r\n}\r\n\r\nexport function GraphNode<TNode extends Displayable>(props: GraphNodeProps<TNode>) {\r\n    const node = props.node\r\n    const gridCellSize = props.gridCellSize\r\n\r\n    // Calculate height from number of pins\r\n    const height = Math.max(node.getInputPins().count(), node.getOutputPins().count()) * gridCellSize\r\n\r\n    const onStartDrag = (e: React.MouseEvent<SVGElement, MouseEvent>) => {\r\n        props.startDrag(node, e)\r\n    }\r\n\r\n    return (\r\n        <g width={gridCellSize * 8} height={height} transform={`translate(${node.position.x}, ${node.position.y})`}>\r\n            <rect width={gridCellSize * 8} height={gridCellSize + height} strokeWidth=\"0\" style={{ fill: \"gray\" }} filter=\"url(#nodeShadow)\" />\r\n            <rect width={gridCellSize * 8} height={gridCellSize} style={{ fill: \"rgb(63, 81, 181)\", cursor: \"move\" }} onMouseDown={onStartDrag} />\r\n            <rect y={gridCellSize} width={gridCellSize * 8} height={height} style={{ fill: \"white\" }} />\r\n            <text textAnchor=\"middle\" x={gridCellSize * 4} y={gridCellSize * 0.75} style={{ fontSize: 0.65 * gridCellSize, fill: \"white\", pointerEvents: \"none\", userSelect: \"none\", MozUserSelect: \"none\" }}>{node.displayName}</text>\r\n\r\n            <g transform={`translate(10, ${gridCellSize})`}>\r\n                {node.getInputPins().map((pin, pinIndex) => (\r\n                    <g key={pinIndex} transform={`translate(0, ${pinIndex * gridCellSize})`}>\r\n                        <foreignObject width={3 * gridCellSize} height=\"100\" x={0.3 * gridCellSize} y={gridCellSize / 2 - 23}>\r\n                            <TextField label=\"Input\" />\r\n                        </foreignObject>\r\n                        <circle r={0.2 * gridCellSize} cx={-gridCellSize * 0.1} cy={gridCellSize / 2} style={{ fill: pin.color, cursor: \"grab\" }} filter=\"url(#nodeShadow)\" />\r\n                    </g>\r\n                ))}\r\n            </g>\r\n\r\n            <g transform={`translate(${gridCellSize * 8}, ${gridCellSize})`}>\r\n                {node.getOutputPins().map((pin, pinIndex) => {\r\n                    return (\r\n                        <g key={pinIndex} transform={`translate(0, ${pinIndex * gridCellSize})`}>\r\n                            <rect width={3 * gridCellSize} height={0.15 * gridCellSize} x={-3.3 * gridCellSize} y={gridCellSize / 2 - 0.15 / 2 * gridCellSize + 20} style={{ fill: \"rgb(222, 222, 222)\" }} />\r\n                            <circle r={0.2 * gridCellSize} cx={0} cy={gridCellSize / 2} style={{ fill: pin.color, cursor: \"grab\" }} filter=\"url(#nodeShadow)\" />\r\n                        </g>\r\n                    )\r\n                })}\r\n            </g>\r\n        </g>\r\n    )\r\n}","import React, { useState, useRef, MutableRefObject } from \"react\"\r\nimport useWindowDimensions from \"../WindowSize\";\r\nimport { Displayable } from \"../Behaviors/Displayable\"\r\nimport { GraphConnection } from \"./GraphConnection\"\r\nimport { GraphNode } from \"./GraphNode\"\r\nimport { ExecutionGraph, CSharpTranslatableNode } from \"../Behaviors/CSharpTranslatable\";\r\n\r\ntype GraphViewProps = {\r\n    gridCellSize: number,\r\n    graph: ExecutionGraph<CSharpTranslatableNode & Displayable>,\r\n    dispatchGraph: any\r\n}\r\n\r\nexport function GraphView(props: GraphViewProps) {\r\n    const gridCellSize = props.gridCellSize\r\n    const graph = props.graph\r\n    const dispatchGraph = props.dispatchGraph\r\n\r\n    const windowProps = useWindowDimensions()\r\n\r\n    const [dragging, setDragging] = useState(false)\r\n    const [draggingNode, setDraggingNode]: [Displayable | null, any] = useState(null)\r\n    const [dragStartPosition, setDragStartPosition] = useState({ x: 0, y: 0 })\r\n    const [nodeStartPosition, setNodeStartPosition] = useState({ x: 0, y: 0 })\r\n\r\n    const svg: MutableRefObject<SVGSVGElement | null> = useRef(null)\r\n\r\n    const getSvgMousePos = (e: React.MouseEvent<SVGElement, MouseEvent>) => {\r\n        const svgCurrent: (SVGSVGElement | null) = svg.current\r\n        if (svgCurrent != null) {\r\n            const ctm = svgCurrent.getScreenCTM()\r\n            if (ctm != null) {\r\n                const point = svgCurrent.createSVGPoint()\r\n                point.x = e.clientX\r\n                point.y = e.clientY\r\n                return point.matrixTransform(ctm.inverse())\r\n            }\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    const onDrag = (e: React.MouseEvent<SVGElement, MouseEvent>) => {\r\n        if (dragging) {\r\n            const mousePos = getSvgMousePos(e)\r\n            if (mousePos != null) {\r\n                const newPos = {\r\n                    x: nodeStartPosition.x + (mousePos.x - dragStartPosition.x),\r\n                    y: nodeStartPosition.y + (mousePos.y - dragStartPosition.y)\r\n                }\r\n\r\n                newPos.x -= newPos.x % gridCellSize\r\n                newPos.y -= newPos.y % gridCellSize\r\n\r\n                dispatchGraph({\r\n                    type: \"setNodePosition\",\r\n                    node: draggingNode,\r\n                    position: newPos\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    function startDrag(node: Displayable, e: React.MouseEvent<SVGElement, MouseEvent>) {\r\n        const mousePos = getSvgMousePos(e)\r\n        if (mousePos != null) {\r\n            setDraggingNode(node)\r\n            setDragStartPosition(mousePos)\r\n            setNodeStartPosition(node.position)\r\n\r\n            setDragging(true)\r\n        }\r\n    }\r\n\r\n    const onEndDrag = (e: React.MouseEvent<SVGElement, MouseEvent>) => {\r\n        setDragging(false)\r\n    }\r\n\r\n    return (\r\n        <svg onMouseMove={onDrag} onMouseUp={onEndDrag} ref={svg} viewBox={`0 0 ${1800 / windowProps.relativeDpi * 0.8 * windowProps.width / windowProps.height} ${1800 / windowProps.relativeDpi}`} style={{ position: \"fixed\", top: 0, left: \"20%\", height: \"100%\", width: \"80%\", backgroundColor: \"rgb(240, 240, 240)\" }}>\r\n            <defs>\r\n                <pattern id=\"smallGrid\" width={gridCellSize} height={gridCellSize} patternUnits=\"userSpaceOnUse\">\r\n                    <path d={`M ${gridCellSize} 0 L 0 0 0 ${gridCellSize}`} fill=\"none\" stroke=\"rgb(180, 180, 180)\" strokeWidth=\"1\" />\r\n                </pattern>\r\n                <pattern id=\"grid\" width={gridCellSize * 5} height={gridCellSize * 5} patternUnits=\"userSpaceOnUse\">\r\n                    <rect width={gridCellSize * 5} height={gridCellSize * 5} fill=\"url(#smallGrid)\" />\r\n                    <path d={`M ${gridCellSize * 5} 0 L 0 0 0 ${gridCellSize * 5}`} fill=\"none\" stroke=\"rgb(180, 180, 180)\" strokeWidth=\"2\" />\r\n                </pattern>\r\n            </defs>\r\n\r\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\r\n\r\n            <defs>\r\n                <filter id=\"nodeShadow\">\r\n                    <feDropShadow dx=\"0\" dy=\"0\" stdDeviation=\"2\" />\r\n                </filter>\r\n            </defs>\r\n\r\n            {graph.nodes.map(node => <GraphNode key={node.uniqueId} gridCellSize={gridCellSize} node={node} startDrag={startDrag} />)}\r\n            {graph.dataConnections.map(conn => {\r\n                return {\r\n                    ...conn,\r\n                    fromPinIndex: conn.fromPinIndex + conn.fromNode.getExecOutputs().count(),\r\n                    toPinIndex: conn.toPinIndex + conn.toNode.getExecInputs().count()\r\n                }\r\n            }).concat(graph.execConnections).map(conn =>\r\n                <GraphConnection key={conn.fromNode.uniqueId + conn.toNode.uniqueId} gridCellSize={gridCellSize} conn={conn} />\r\n            )}\r\n        </svg>\r\n    )\r\n}","import * as Immutable from \"immutable\"\r\n\r\nexport class CSharpType {\r\n    constructor(public fullName: string) {\r\n\r\n    }\r\n}\r\n\r\nexport interface CSharpTranslatableNode {\r\n    getIsPure(): boolean\r\n    getPureFunctionName(): string | null\r\n\r\n    getInputs(): Immutable.List<{ type: CSharpType, variableName: string }>\r\n    getOutputs(): Immutable.List<{ type: CSharpType, variableName: string }>\r\n    getExecInputs(): Immutable.List<{ label: string }>\r\n    getExecOutputs(): Immutable.List<{}>\r\n\r\n    translateVariables(): string\r\n    translatePureFunctions(): string\r\n    translateStates(outputExecLabels: Immutable.List<{ label: string | null }>, pureCalls: string): string\r\n}\r\n\r\nexport type NodeConnection<TNode> = {\r\n    fromNode: TNode\r\n    fromPinIndex: number\r\n    toNode: TNode\r\n    toPinIndex: number\r\n}\r\n\r\nexport type ExecutionGraph<TNode> = {\r\n    nodes: Immutable.List<TNode>,\r\n    dataConnections: Immutable.List<NodeConnection<TNode>>,\r\n    execConnections: Immutable.List<NodeConnection<TNode>>,\r\n}\r\n\r\nfunction callPureDependencies(node: CSharpTranslatableNode, dataConnections: Immutable.List<NodeConnection<CSharpTranslatableNode>>) {\r\n    let result = Immutable.List<string>()\r\n\r\n    for (let toIndex = 0; toIndex < node.getInputs().count(); toIndex++) {\r\n        const conns = dataConnections.filter(conn => conn.toNode === node && conn.toPinIndex === toIndex)\r\n        if (conns.count() > 1) {\r\n            throw new Error()\r\n        } else if (conns.count() === 1) {\r\n            const conn = conns.get(0)!\r\n            if (conn.fromNode.getIsPure()) {\r\n                result = result.concat(callPureDependencies(conn.fromNode, dataConnections))\r\n            }\r\n\r\n            result = result.push(`${conn.fromNode.getPureFunctionName()}();\\n`)\r\n        }\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nexport function translateToCSharp(graph: ExecutionGraph<CSharpTranslatableNode>) {\r\n    let result = \"\"\r\n\r\n    for (const node of graph.nodes) {\r\n        result += node.translateVariables()\r\n    }\r\n\r\n    for (const pureNode of graph.nodes.filter(node => node.getIsPure())) {\r\n        result += `void ${pureNode.getPureFunctionName()}()\\n`\r\n        result += \"{\\n\"\r\n        result += pureNode.translatePureFunctions()\r\n        result += \"}\\n\"\r\n    }\r\n\r\n    for (const stateNode of graph.nodes.filter(node => !node.getIsPure())) {\r\n        let outputConnectedLabels: Immutable.List<{ label: string | null }> = stateNode.getExecOutputs().map(execOutput => { return { label: null } })\r\n\r\n        const pureCalls = callPureDependencies(stateNode, graph.dataConnections)\r\n        const nodeExecConnections = graph.execConnections.filter(conn => conn.fromNode === stateNode)\r\n        for (const execConn of nodeExecConnections) {\r\n            outputConnectedLabels = outputConnectedLabels.set(execConn.fromPinIndex, execConn.toNode.getExecInputs().get(execConn.toPinIndex)!)\r\n        }\r\n\r\n        result += stateNode.translateStates(outputConnectedLabels, pureCalls.toSet().join(\"\"))\r\n    }\r\n\r\n    return result\r\n}","import React, { useState } from \"react\"\r\nimport Highlight from \"react-highlight\"\r\nimport \"../../node_modules/highlight.js/styles/vs2015.css\"\r\nimport { Popper, Button } from \"@material-ui/core\"\r\nimport { translateToCSharp, ExecutionGraph, CSharpTranslatableNode } from \"../Behaviors/CSharpTranslatable\"\r\n\r\ntype GraphCodeViewProps = {\r\n    graph: ExecutionGraph<CSharpTranslatableNode>\r\n}\r\n\r\nexport function GraphCodeView(props: GraphCodeViewProps) {\r\n    const graph = props.graph\r\n\r\n    const [popperAnchorElement, setPopperAnchorElement] = useState()\r\n    const openPopper = Boolean(popperAnchorElement)\r\n\r\n    const code = translateToCSharp(graph)\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" onClick={e => setPopperAnchorElement(popperAnchorElement ? null : e.target)} >Code</Button>\r\n            <Popper open={openPopper} anchorEl={popperAnchorElement} placement=\"top\" style={{ width: \"30%\" }} >\r\n                <Highlight className=\"cs transparent\">\r\n                    {code}\r\n                </Highlight>\r\n            </Popper>\r\n        </>\r\n    )\r\n}","import * as Immutable from \"immutable\"\r\n\r\nimport { DataGraphAlgebra } from \"../Algebras/DataGraphAlgebra\"\r\nimport { ExecutionGraphAlgebra } from \"../Algebras/ExecutionGraphAlgebra\"\r\nimport { CSharpType, CSharpTranslatableNode } from \"../Behaviors/CSharpTranslatable\"\r\nimport { Displayable } from \"../Behaviors/Displayable\"\r\n\r\nexport class CSharpTranslatableGraphAlgebra implements\r\n    DataGraphAlgebra<CSharpType, CSharpTranslatableNode & Displayable>,\r\n    ExecutionGraphAlgebra<CSharpType, CSharpTranslatableNode & Displayable> {\r\n\r\n    createConcatenateNode = () => new ConcatenateNode()\r\n    createLiteralNode = (type: CSharpType, value: any) => new LiteralNode(type, value)\r\n    createReverseStringNode = () => new ReverseStringNode()\r\n\r\n    typeFromString = (typeString: string) => new CSharpType(typeString)\r\n}\r\n\r\nfunction randomLower(length = 8) {\r\n    const characters = \"abcdefghijklmnopqrstuvwxyz\"\r\n    const charactersLength = characters.length\r\n\r\n    let result = \"\"\r\n    for (let i = 0; i < length; i++) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength))\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nabstract class BaseNode implements CSharpTranslatableNode, Displayable {\r\n    // Displayable\r\n    getInputPins = () => this.getExecInputs().map(_ => { return { color: \"rgb(255, 64, 129)\" } }).concat(this.getInputs().map(_ => { return { color: \"rgb(0, 150, 136)\" } }))\r\n    getOutputPins = () => this.getExecOutputs().map(_ => { return { color: \"rgb(255, 64, 129)\" } }).concat(this.getOutputs().map(_ => { return { color: \"rgb(0, 150, 136)\" } }))\r\n\r\n    readonly abstract displayName: string\r\n    readonly uniqueId = randomLower(32)\r\n    position = { x: 0, y: 0 }\r\n\r\n    // CSharpTranslatableNode\r\n    abstract getIsPure(): boolean\r\n    abstract getPureFunctionName(): string | null\r\n\r\n    translateVariables() {\r\n        return this.inputs\r\n            .concat(this.outputs)\r\n            .map(x => `${x.type.fullName} ${x.variableName} = default(${x.type.fullName});\\n`)\r\n            .join(\"\")\r\n    }\r\n    translatePureFunctions() { return \"\" }\r\n    translateStates(outputExecLabels: Immutable.List<{ label: string | null }>, pureCalls: string) { return \"\" }\r\n\r\n    getInputs = () => this.inputs\r\n    getOutputs = () => this.outputs\r\n    getExecInputs = () => this.execInputs\r\n    getExecOutputs = () => this.execOutputs\r\n\r\n    private inputs: Immutable.List<{ type: CSharpType, variableName: string }> = Immutable.List()\r\n    private outputs: Immutable.List<{ type: CSharpType, variableName: string }> = Immutable.List()\r\n    private execInputs: Immutable.List<{ label: string }> = Immutable.List()\r\n    private execOutputs: Immutable.List<{}> = Immutable.List()\r\n\r\n    protected addInput = (type: CSharpType) => this.inputs = this.inputs.push({ type: type, variableName: randomLower() })\r\n    protected addOutput = (type: CSharpType) => this.outputs = this.outputs.push({ type: type, variableName: randomLower() })\r\n    protected addExecInput = () => this.execInputs = this.execInputs.push({ label: randomLower() })\r\n    protected addExecOutput = () => this.execOutputs = this.execOutputs.push({})\r\n}\r\n\r\nabstract class PureBaseNode extends BaseNode {\r\n    getIsPure = () => true\r\n\r\n    static nodeCounter = 0\r\n    readonly pureFunctionName = `Node${PureBaseNode.nodeCounter++}`\r\n    getPureFunctionName = () => this.pureFunctionName\r\n}\r\n\r\nabstract class StatefulBaseNode extends BaseNode {\r\n    getIsPure = () => false\r\n    getPureFunctionName = () => null\r\n}\r\n\r\nclass LiteralNode extends PureBaseNode {\r\n    readonly displayName = \"Literal\"\r\n\r\n    constructor(readonly type: CSharpType, readonly value: any) {\r\n        super()\r\n\r\n        this.addOutput(new CSharpType(\"System.String\"))\r\n    }\r\n\r\n    translateVariables() {\r\n        return `const ${this.type.fullName} = ${this.value};\\n`\r\n    }\r\n}\r\n\r\nclass ReverseStringNode extends PureBaseNode {\r\n    readonly displayName = \"Reverse String\"\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        this.addInput(new CSharpType(\"System.String\"))\r\n        this.addOutput(new CSharpType(\"System.String\"))\r\n    }\r\n\r\n    translatePureFunctions() {\r\n        const input = this.getInputs().get(0)\r\n        const output = this.getOutputs().get(0)\r\n\r\n        if (input === undefined || output === undefined) {\r\n            throw new Error(\"One or more pins were undefined\")\r\n        }\r\n\r\n        return `${output.variableName} = string.Concat(${input.variableName}.Reverse());\\n`\r\n    }\r\n}\r\n\r\nclass ConcatenateNode extends StatefulBaseNode {\r\n    readonly displayName = \"Concatenate\"\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        this.addInput(new CSharpType(\"System.String\"))\r\n        this.addInput(new CSharpType(\"System.String\"))\r\n        this.addOutput(new CSharpType(\"System.String\"))\r\n\r\n        this.addExecInput()\r\n        this.addExecOutput()\r\n    }\r\n\r\n    translateStates(outputExecLabels: Immutable.List<{ label: string | null }>, pureCalls: string) {\r\n        const execInput = this.getExecInputs().get(0)\r\n        const inputA = this.getInputs().get(0)\r\n        const inputB = this.getInputs().get(1)\r\n        const output = this.getOutputs().get(0)\r\n        const execOutput = outputExecLabels.get(0)\r\n\r\n        if (execInput === undefined || inputA === undefined || inputB === undefined || output === undefined || execOutput === undefined) {\r\n            throw new Error(\"One or more pins were undefined\")\r\n        }\r\n\r\n        // Translate label\r\n        let result = `${execInput.label}:\\n`\r\n\r\n        // Translate calls to pure functions this stateful node depends on\r\n        result += pureCalls\r\n\r\n        // Translate actual code\r\n        result += `${output.variableName} = ${inputA.variableName} + \" \" + ${inputB.variableName};\\n`\r\n\r\n        // Go to next\r\n        if (execOutput.label !== null) {\r\n            result += `goto ${execOutput.label};\\n`\r\n        } else {\r\n            result += \"return;\\n\"\r\n        }\r\n\r\n        return result\r\n    }\r\n}","import { DataGraphAlgebra } from \"./Algebras/DataGraphAlgebra\"\r\nimport { ExecutionGraphAlgebra } from \"./Algebras/ExecutionGraphAlgebra\"\r\nimport { List } from \"immutable\"\r\nimport { CSharpTranslatableGraphAlgebra } from \"./Implementations/CSharpTranslatableGraphAlgebra\"\r\nimport { CSharpType, CSharpTranslatableNode, ExecutionGraph } from \"./Behaviors/CSharpTranslatable\"\r\nimport { Displayable } from \"./Behaviors/Displayable\"\r\n\r\nfunction createExecutionGraph<TType, TNode, TAlgebra extends (DataGraphAlgebra<TType, TNode> & ExecutionGraphAlgebra<TType, TNode>)>(algebra: TAlgebra): ExecutionGraph<TNode> {\r\n    const literalType = algebra.typeFromString(\"System.String\")\r\n\r\n    const literalNode = algebra.createLiteralNode(literalType, '\"Hello\"')\r\n    const reverseStringNode = algebra.createReverseStringNode()\r\n    const concatenateNode = algebra.createConcatenateNode()\r\n\r\n    const literalToReverse = { fromNode: literalNode, fromPinIndex: 0, toNode: reverseStringNode, toPinIndex: 0 }\r\n    const literalToConcatenate = { fromNode: literalNode, fromPinIndex: 0, toNode: concatenateNode, toPinIndex: 0 }\r\n    const reverseToConcatenate = { fromNode: reverseStringNode, fromPinIndex: 0, toNode: concatenateNode, toPinIndex: 1 }\r\n\r\n    return {\r\n        nodes: List([literalNode, reverseStringNode, concatenateNode]),\r\n        dataConnections: List([literalToReverse, literalToConcatenate, reverseToConcatenate]),\r\n        execConnections: List(),\r\n    }\r\n}\r\n\r\nconst cSharpTranslatableGraphAlgebra = new CSharpTranslatableGraphAlgebra()\r\n\r\nfunction moveNodes<T extends ExecutionGraph<Displayable & CSharpTranslatableNode>>(graph: T, gridCellSize: number): T {\r\n    graph.nodes.get(0)!.position.x = gridCellSize * 3\r\n    graph.nodes.get(0)!.position.y = gridCellSize * 3\r\n    graph.nodes.get(1)!.position.x = gridCellSize * 3\r\n    graph.nodes.get(1)!.position.y = gridCellSize * 9\r\n    graph.nodes.get(2)!.position.x = gridCellSize * 15\r\n    graph.nodes.get(2)!.position.y = gridCellSize * 4\r\n    return graph\r\n}\r\n\r\nfunction graphReducer(graph: ExecutionGraph<Displayable & CSharpTranslatableNode>, action: any) {\r\n    const newGraph = { ...graph }\r\n\r\n    switch (action.type) {\r\n        case \"setNodePosition\":\r\n            action.node.position = action.position\r\n            break\r\n        case \"addNode\":\r\n            newGraph.nodes = newGraph.nodes.push(cSharpTranslatableGraphAlgebra.createConcatenateNode())\r\n            break\r\n        default:\r\n            throw new Error()\r\n    }\r\n\r\n    return newGraph\r\n}\r\n\r\nexport function createExampleGraph(gridCellSize: number) {\r\n    return {\r\n        graph: moveNodes(createExecutionGraph<CSharpType, Displayable & CSharpTranslatableNode, CSharpTranslatableGraphAlgebra>(cSharpTranslatableGraphAlgebra), gridCellSize),\r\n        reducer: graphReducer\r\n    }\r\n}","import React from \"react\"\r\nimport { List as MuiList, ListItem, ListItemText } from \"@material-ui/core\"\r\nimport LabelIcon from \"@material-ui/icons/Label\"\r\n\r\nconst testRange: number[] = []\r\nfor (let i = 0; i < 10; i++) {\r\n    testRange.push(i)\r\n}\r\n\r\nexport function CreateNodeView(props: any) {\r\n    const dispatchGraph = props.dispatchGraph\r\n\r\n    return (\r\n        <MuiList>\r\n            {testRange.map(i =>\r\n                <ListItem button key={i} onClick={_ => dispatchGraph({ type: \"addNode\" })}>\r\n                    <LabelIcon />\r\n                    <ListItemText primary=\"Literal\" />\r\n                </ListItem>\r\n            )}\r\n        </MuiList>\r\n    )\r\n}","import React, { useReducer } from \"react\"\nimport { CssBaseline } from \"@material-ui/core\"\nimport \"./App.css\"\nimport { GraphView } from \"./Components/GraphView\"\nimport { GraphCodeView } from \"./Components/GraphCodeView\"\nimport { createExampleGraph } from \"./ExampleGraph\"\nimport { CreateNodeView } from \"./Components/CreateNodeView\"\n\nconst gridCellSize = 60\n\nconst App: React.FC = () => {\n    const exampleGraph = createExampleGraph(gridCellSize)\n    const [graph, dispatchGraph] = useReducer(exampleGraph.reducer, exampleGraph.graph)\n\n    return (\n        <div>\n            <CssBaseline />\n\n            <div style={{ width: \"20%\" }}>\n                <CreateNodeView dispatchGraph={dispatchGraph} />\n            </div>\n            \n            <GraphView gridCellSize={gridCellSize} graph={graph} dispatchGraph={dispatchGraph} />\n\n            <div style={{ position: \"absolute\", bottom: 20, right: 20 }}>\n                <GraphCodeView graph={graph} />\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}